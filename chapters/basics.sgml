<chapt id="basics">
<heading>The basics</heading>

<p>This chapter contains a brief overview of the build process as well as containing instructions on how to boot the various binary image types.</p>

<sect>
<heading>First steps: building an ISO image</heading>

<p>The following sequence of commands will create a basic ISO image containing just the Debian standard system without X.org. It is suitable for burning to CD or DVD media.</p>

<p>First, we must configure our Live system:

<example>
$ lh_config
</example>

<p>Passing no parameters indicated that we wish to use the default binary image type. You will see that <tt>live-helper</tt> created a <file>"config/"</file> hierarchy in your current directory - this is used by the rest of <tt>live-helper</tt> to build your live image.</p>

<p>We can then build the image with <tt>lh_build</tt> as root:

<example>
# lh_build
</example>

<p>This process can take a while, depending on the speed of your network connection.</p>

<sect1>
<heading>Testing an ISO image with Qemu</heading>
<p>Testing an ISO is simple:

<example>
# apt-get install qemu
$ qemu -cdrom binary.iso
</example></p>
</sect1>

<sect1>
<heading>Burning an ISO image to physical medium</heading>
<p>Burning an ISO image is easy:

<example>
# apt-get install wodim
$ wodim binary.iso
</example></p>
</sect1>

</sect>

<sect>
<heading>Building an USB/HDD image</heading>
<p>The following sequence of commands will create a basic USB/HDD image containing just the Debian standard system without X.org. It is suitable for booting from USB sticks, hard drives and various other portable storage devices.</p>

<p>First, we must configure <tt>live-helper</tt> to create a USD/HDD image type:

<example>
$ lh_config -b usb-hdd
</example>

<p>We can then build the image with <tt>lh_build</tt> as root:

<example>
# lh_build
</example>

<sect1>
<heading>Copying USB/HDD image to a USB stick</heading>
<p>
<example>
$ dd if=binary.img of=$USBDRV
</example></p>
</sect1>

<sect1>
<heading>Testing a USB/HDD image with Qemu</heading>
<p>
<example>
# apt-get install qemu
$ qemu -hda binary.img
</example></p>
</sect1>
</sect>

<sect>
<heading>Building an netboot image</heading>

<p>First, we configure our Live system:

<example>
$ lh_config -b net --net-root-path "/srv/debian-live" --net-root-server "192.168.0.1"
</example>

<p>In contrast with the ISO and USB/HDD image types, netbooting does not support serving a filesystem image with the client so we must serve the files via NFS. The <var>net-root-path</var> and <var>net-root-server</var> options specify the location and server respectfully of the NFS server on the filesytem image will be located at boot-time.</p>

<p>We can then build the image with <tt>lh_build</tt> as root:

<example>
# lh_build
</example>

<p>We must now configure three services:

<taglist>
<tag>NFS server</tag>
<item>
<p>This contains the Live filesystem image which the system will use at run-time.</p>
<p>You should install the <tt>nfs-kernel-server</tt> server package -- <tt>nfs-user-server</tt> does not function correctly with netboot.</p>
<p>FIXME

<example>
/srv/debian-live *(rw,sync,no_root_squash)
</example>
</item>

<tag>TFTPd server</tag>
<item>
<p>This serves the kernel and initial ramdisk to the system at run-time.</p>
<p>You should install the <tt>tftpd-hpa</tt> package.

<example>
$ ls /var/lib/tftpboot/
initrd.gz  memtest  pxelinux.0  pxelinux.cfg  vmlinuz
</example>
</item>

<tag>DHCP server</tag>
<item>
<p>We must configure our network's DHCP server to advertise the location of the PXE server.</p>
<p>FIXME

<example>
next-server 192.168.0.78;
filename "pxelinux.0";
</example>
</item>

</taglist>

</sect>

</chapt>
