<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % commondata SYSTEM "../ent/common.ent" > %commondata;
]>
<chapter id="basics">
<title>The basics</title>

<para>This chapter contains a brief overview of the build process as well as containing instructions on how to boot the various binary image types.</para>

<section>
<title>First steps: building an ISO image</title>

<para>The following sequence of commands will create a basic ISO image containing just the Debian standard system without X.org. It is suitable for burning to CD or DVD media.</para>

<para>First, we must configure our Live system:</para>

<screen>
$ lh_config
</screen>

<para>Passing no parameters indicated that we wish to use the default binary image type. You will see that &live-helper; created a <filename>"config/"</filename> hierarchy in your current directory - this is used by the rest of &live-helper; to build your live image.</para>

<para>We can then build the image with <filename>lh_build</filename> as root:</para>

<screen>
# lh_build
</screen>

<para>This process can take a while, depending on the speed of your network connection.</para>

<section>
<title>Testing an ISO image with Qemu</title>
<para>Testing an ISO is simple:</para>

<screen>
# apt-get install qemu
$ qemu -cdrom binary.iso
</screen>
</section>

<section>
<title>Burning an ISO image to physical medium</title>
<para>Burning an ISO image is easy:</para>

<screen>
# apt-get install wodim
$ wodim binary.iso
</screen>
</section>

</section>

<section>
<title>Building an USB/HDD image</title>
<para>The following sequence of commands will create a basic USB/HDD image containing just the Debian standard system without X.org. It is suitable for booting from USB sticks, hard drives and various other portable storage devices.</para>

<para>Note if an iso image had been previously built, you will need to clean live-helper:</para>

<screen>
$ lh_clean --binary
</screen>

<para>First, we must configure &live-helper; to create a USD/HDD image type:</para>

<screen>
$ lh_config -b usb-hdd
</screen>

<para>We can then build the image with <filename>lh_build</filename> as root:</para>

<screen>
# lh_build
</screen>

<section>
<title>Copying USB/HDD image to a USB stick</title>
<screen>
$ dd if=binary.img of=$USBDRV
</screen>
</section>

<section>
<title>Testing a USB/HDD image with Qemu</title>
<screen>
# apt-get install qemu
$ qemu -hda binary.img
</screen>
</section>
</section>

<section>
<title>Building an netboot image</title>

<para>First, we configure our Live system:</para>

<screen>
$ lh_config -b net --net-root-path "/srv/debian-live" --net-root-server "192.168.0.1"
</screen>

<para>In contrast with the ISO and USB/HDD image types, netbooting does not support serving a filesystem image with the client so we must serve the files via NFS. The <replaceable>net-root-path</replaceable> and <replaceable>net-root-server</replaceable> options specify the location and server respectfully of the NFS server on the filesytem image will be located at boot-time.</para>

<para>We can then build the image with <filename>lh_build</filename> as root:</para>

<screen>
# lh_build
</screen>

<para>We must now configure three services:</para>

<variablelist>
<varlistentry><term>NFS server</term>
<listitem>
<para>This contains the Live filesystem image which the system will use at run-time.</para>
<para>You should install the <computeroutput>nfs-kernel-server</computeroutput> server package -- <computeroutput>nfs-user-server</computeroutput> does not function correctly with netboot.</para>
<para>FIXME</para>

<screen>
/srv/debian-live *(rw,sync,no_root_squash)
</screen>
</listitem>
</varlistentry>

<varlistentry><term>TFTPd server</term>
<listitem>
<para>This serves the kernel and initial ramdisk to the system at run-time.</para>
<para>You should install the <computeroutput>tftpd-hpa</computeroutput> package.

<screen>
$ ls /var/lib/tftpboot/
initrd.gz  memtest  pxelinux.0  pxelinux.cfg  vmlinuz
</screen>
</para></listitem>
</varlistentry>

<varlistentry><term>DHCP server</term>
<listitem>
<para>We must configure our network's DHCP server to advertise the location of the PXE server.</para>
<para>FIXME</para>

<screen>
next-server 192.168.0.78;
filename "pxelinux.0";
</screen>
</listitem>
</varlistentry>

</variablelist>

</section>

</chapter>
