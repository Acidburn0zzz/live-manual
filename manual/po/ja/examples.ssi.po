# Japanese translations for live-manual package
# Copyright (C) 2013-2014 victory <victory.deb@gmail.com>
# This file is distributed under the same license as the live-manual package.
#
msgid ""
msgstr ""
"Project-Id-Version: live-manual VERSION\n"
"POT-Creation-Date: 2014-04-29 17:04+0300\n"
"PO-Revision-Date: 2014-04-26 15:21+0900\n"
"Last-Translator: victory <victory.deb@gmail.com>\n"
"Language-Team: Japanese <debian-japanese@lists.debian.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: en/live-manual.ssm:65 en/examples.ssi:2
msgid ":B~ Examples"
msgstr ":B~ 例"

#. type: Plain text
#: en/about_manual.ssi:92 en/about_manual.ssi:100 en/about_manual.ssi:108
#: en/about_manual.ssi:116 en/about_manual.ssi:124 en/about_manual.ssi:132
#: en/appendix_style-guide.ssi:124 en/appendix_style-guide.ssi:134
#: en/appendix_style-guide.ssi:144 en/appendix_style-guide.ssi:154
#: en/appendix_style-guide.ssi:164 en/appendix_style-guide.ssi:177
#: en/examples.ssi:14 en/examples.ssi:30 en/examples.ssi:40 en/examples.ssi:54
#: en/examples.ssi:66 en/examples.ssi:82 en/examples.ssi:92
#: en/examples.ssi:105 en/examples.ssi:113 en/examples.ssi:123
#: en/examples.ssi:133 en/examples.ssi:148 en/examples.ssi:156
#: en/examples.ssi:164 en/examples.ssi:172 en/examples.ssi:188
#: en/examples.ssi:203 en/examples.ssi:211 en/examples.ssi:219
#: en/examples.ssi:235 en/examples.ssi:249 en/examples.ssi:258
#: en/examples.ssi:266 en/examples.ssi:286 en/examples.ssi:294
#: en/examples.ssi:303 en/examples.ssi:313 en/project_bugs.ssi:64
#: en/project_coding-style.ssi:30 en/project_coding-style.ssi:40
#: en/project_coding-style.ssi:53 en/project_coding-style.ssi:63
#: en/project_coding-style.ssi:94 en/project_coding-style.ssi:102
#: en/project_coding-style.ssi:112 en/project_coding-style.ssi:123
#: en/project_contributing.ssi:34 en/project_contributing.ssi:45
#: en/project_contributing.ssi:59 en/project_contributing.ssi:68
#: en/project_contributing.ssi:79 en/project_contributing.ssi:87
#: en/project_git.ssi:8 en/project_git.ssi:16 en/project_git.ssi:24
#: en/project_git.ssi:34 en/project_git.ssi:44 en/project_git.ssi:56
#: en/project_procedures.ssi:39 en/project_procedures.ssi:51
#: en/user_basics.ssi:50 en/user_basics.ssi:58 en/user_basics.ssi:68
#: en/user_basics.ssi:84 en/user_basics.ssi:99 en/user_basics.ssi:111
#: en/user_basics.ssi:119 en/user_basics.ssi:157 en/user_basics.ssi:165
#: en/user_basics.ssi:177 en/user_basics.ssi:189 en/user_basics.ssi:197
#: en/user_basics.ssi:209 en/user_basics.ssi:217 en/user_basics.ssi:225
#: en/user_basics.ssi:237 en/user_basics.ssi:249 en/user_basics.ssi:259
#: en/user_basics.ssi:269 en/user_basics.ssi:287 en/user_basics.ssi:318
#: en/user_basics.ssi:334 en/user_basics.ssi:342 en/user_basics.ssi:362
#: en/user_basics.ssi:393 en/user_customization-binary.ssi:16
#: en/user_customization-contents.ssi:24 en/user_customization-contents.ssi:33
#: en/user_customization-contents.ssi:51
#: en/user_customization-installer.ssi:32
#: en/user_customization-installer.ssi:44
#: en/user_customization-packages.ssi:14 en/user_customization-packages.ssi:22
#: en/user_customization-packages.ssi:40 en/user_customization-packages.ssi:54
#: en/user_customization-packages.ssi:68 en/user_customization-packages.ssi:96
#: en/user_customization-packages.ssi:107
#: en/user_customization-packages.ssi:115
#: en/user_customization-packages.ssi:139
#: en/user_customization-packages.ssi:152
#: en/user_customization-packages.ssi:162
#: en/user_customization-packages.ssi:172
#: en/user_customization-packages.ssi:196
#: en/user_customization-packages.ssi:212
#: en/user_customization-packages.ssi:291
#: en/user_customization-packages.ssi:303
#: en/user_customization-packages.ssi:313
#: en/user_customization-packages.ssi:327
#: en/user_customization-packages.ssi:343
#: en/user_customization-packages.ssi:360 en/user_customization-runtime.ssi:14
#: en/user_customization-runtime.ssi:26 en/user_customization-runtime.ssi:44
#: en/user_customization-runtime.ssi:56 en/user_customization-runtime.ssi:75
#: en/user_customization-runtime.ssi:83 en/user_customization-runtime.ssi:92
#: en/user_customization-runtime.ssi:121 en/user_customization-runtime.ssi:131
#: en/user_customization-runtime.ssi:139 en/user_customization-runtime.ssi:148
#: en/user_customization-runtime.ssi:157 en/user_customization-runtime.ssi:172
#: en/user_installation.ssi:38 en/user_installation.ssi:48
#: en/user_installation.ssi:56 en/user_installation.ssi:66
#: en/user_installation.ssi:74 en/user_installation.ssi:82
#: en/user_installation.ssi:106 en/user_installation.ssi:121
#: en/user_installation.ssi:134 en/user_managing_a_configuration.ssi:22
#: en/user_managing_a_configuration.ssi:31
#: en/user_managing_a_configuration.ssi:54
#: en/user_managing_a_configuration.ssi:66
#: en/user_managing_a_configuration.ssi:75 en/user_overview.ssi:40
#: en/user_overview.ssi:52 en/user_overview.ssi:60
msgid "code{"
msgstr "code{"

#. type: Plain text
#: en/about_manual.ssi:96 en/about_manual.ssi:104 en/about_manual.ssi:112
#: en/about_manual.ssi:120 en/about_manual.ssi:128 en/about_manual.ssi:136
#: en/appendix_style-guide.ssi:128 en/appendix_style-guide.ssi:138
#: en/appendix_style-guide.ssi:148 en/appendix_style-guide.ssi:158
#: en/appendix_style-guide.ssi:173 en/appendix_style-guide.ssi:182
#: en/examples.ssi:20 en/examples.ssi:34 en/examples.ssi:44 en/examples.ssi:60
#: en/examples.ssi:70 en/examples.ssi:88 en/examples.ssi:101
#: en/examples.ssi:109 en/examples.ssi:117 en/examples.ssi:127
#: en/examples.ssi:140 en/examples.ssi:152 en/examples.ssi:160
#: en/examples.ssi:168 en/examples.ssi:176 en/examples.ssi:197
#: en/examples.ssi:207 en/examples.ssi:215 en/examples.ssi:231
#: en/examples.ssi:239 en/examples.ssi:254 en/examples.ssi:262
#: en/examples.ssi:270 en/examples.ssi:290 en/examples.ssi:299
#: en/examples.ssi:309 en/examples.ssi:327 en/project_bugs.ssi:68
#: en/project_coding-style.ssi:36 en/project_coding-style.ssi:47
#: en/project_coding-style.ssi:59 en/project_coding-style.ssi:70
#: en/project_coding-style.ssi:98 en/project_coding-style.ssi:106
#: en/project_coding-style.ssi:119 en/project_coding-style.ssi:130
#: en/project_contributing.ssi:41 en/project_contributing.ssi:55
#: en/project_contributing.ssi:64 en/project_contributing.ssi:73
#: en/project_contributing.ssi:83 en/project_contributing.ssi:90
#: en/project_git.ssi:12 en/project_git.ssi:20 en/project_git.ssi:28
#: en/project_git.ssi:38 en/project_git.ssi:48 en/project_git.ssi:60
#: en/project_procedures.ssi:47 en/project_procedures.ssi:92
#: en/user_basics.ssi:54 en/user_basics.ssi:62 en/user_basics.ssi:72
#: en/user_basics.ssi:90 en/user_basics.ssi:105 en/user_basics.ssi:115
#: en/user_basics.ssi:123 en/user_basics.ssi:161 en/user_basics.ssi:169
#: en/user_basics.ssi:183 en/user_basics.ssi:193 en/user_basics.ssi:201
#: en/user_basics.ssi:213 en/user_basics.ssi:221 en/user_basics.ssi:229
#: en/user_basics.ssi:241 en/user_basics.ssi:253 en/user_basics.ssi:263
#: en/user_basics.ssi:273 en/user_basics.ssi:310 en/user_basics.ssi:322
#: en/user_basics.ssi:338 en/user_basics.ssi:346 en/user_basics.ssi:373
#: en/user_basics.ssi:397 en/user_customization-binary.ssi:23
#: en/user_customization-contents.ssi:29 en/user_customization-contents.ssi:43
#: en/user_customization-contents.ssi:55
#: en/user_customization-installer.ssi:38
#: en/user_customization-installer.ssi:49
#: en/user_customization-packages.ssi:18 en/user_customization-packages.ssi:26
#: en/user_customization-packages.ssi:46 en/user_customization-packages.ssi:60
#: en/user_customization-packages.ssi:72
#: en/user_customization-packages.ssi:101
#: en/user_customization-packages.ssi:111
#: en/user_customization-packages.ssi:119
#: en/user_customization-packages.ssi:144
#: en/user_customization-packages.ssi:158
#: en/user_customization-packages.ssi:168
#: en/user_customization-packages.ssi:178
#: en/user_customization-packages.ssi:202
#: en/user_customization-packages.ssi:217
#: en/user_customization-packages.ssi:295
#: en/user_customization-packages.ssi:307
#: en/user_customization-packages.ssi:317
#: en/user_customization-packages.ssi:331
#: en/user_customization-packages.ssi:356
#: en/user_customization-packages.ssi:365 en/user_customization-runtime.ssi:18
#: en/user_customization-runtime.ssi:30 en/user_customization-runtime.ssi:48
#: en/user_customization-runtime.ssi:69 en/user_customization-runtime.ssi:79
#: en/user_customization-runtime.ssi:88 en/user_customization-runtime.ssi:97
#: en/user_customization-runtime.ssi:125 en/user_customization-runtime.ssi:135
#: en/user_customization-runtime.ssi:144 en/user_customization-runtime.ssi:153
#: en/user_customization-runtime.ssi:162 en/user_customization-runtime.ssi:180
#: en/user_installation.ssi:42 en/user_installation.ssi:52
#: en/user_installation.ssi:62 en/user_installation.ssi:70
#: en/user_installation.ssi:78 en/user_installation.ssi:86
#: en/user_installation.ssi:111 en/user_installation.ssi:128
#: en/user_installation.ssi:139 en/user_managing_a_configuration.ssi:27
#: en/user_managing_a_configuration.ssi:42
#: en/user_managing_a_configuration.ssi:60
#: en/user_managing_a_configuration.ssi:71
#: en/user_managing_a_configuration.ssi:79 en/user_overview.ssi:46
#: en/user_overview.ssi:56 en/user_overview.ssi:64
msgid "}code"
msgstr "}code"

#. type: Plain text
#: en/examples.ssi:4
msgid "1~examples Examples"
msgstr "1~examples 例"

#. type: Plain text
#: en/examples.ssi:6
msgid ""
"This chapter covers example builds for specific use cases with live systems. "
"If you are new to building your own live system images, we recommend you "
"first look at the three tutorials in sequence, as each one teaches new "
"techniques that will help you use and understand the remaining examples."
msgstr ""
"この章では特定の live システム活用事例向けの見本ビルドについて触れます。自分"
"用の live システムイメージのビルドが初めてであれば、まず3つのチュートリアルを"
"順に調べてみることを勧めます。それぞれで他の例の利用、理解を支援する新しい技"
"術を学ぶようになっているためです。"

#. type: Plain text
#: en/examples.ssi:8
msgid "2~using-the-examples Using the examples"
msgstr "2~using-the-examples 例の使用"

#. type: Plain text
#: en/examples.ssi:10
msgid ""
"To use these examples you need a system to build them on that meets the "
"requirements listed in {Requirements}#requirements and has live-build "
"installed as described in {Installing live-build}#installing-live-build."
msgstr ""
"提示している例を利用するためには、ビルドするために{要件}#requirements に記載"
"されている要件一覧に合致するシステムと、{live-build のインストール}"
"#installing-live-build で説明しているように live-build がインストールされてい"
"ることが必要となります。"

#. type: Plain text
#: en/examples.ssi:12
msgid ""
"Note that, for the sake of brevity, in these examples we do not specify a "
"local mirror to use for the build. You can speed up downloads considerably "
"if you use a local mirror. You may specify the options when you use #{lb "
"config}#, as described in {Distribution mirrors used at build time}"
"#distribution-mirrors-build-time, or for more convenience, set the default "
"for your build system in #{/etc/live/build.conf}#. Simply create this file "
"and in it, set the corresponding #{LB_MIRROR_*}# variables to your preferred "
"mirror. All other mirrors used in the build will be defaulted from these "
"values. For example:"
msgstr ""
"簡潔にするため、ここに挙げる例ではビルドで利用するローカルミラーを指定してい"
"ないことに注意してください。ローカルミラーを利用するとダウンロード速度をかな"
"り高速化できます。{ビルド時に利用するディストリビューションのミラー}"
"#distribution-mirrors-build-time で説明しているように、#{lb config}# を使った"
"場合はオプションを指定することができます。ビルドシステムのデフォルト値を #{/"
"etc/live/build.conf}# でセットするともっと便利になります。このファイルを単純"
"に作成し、対応する #{LB_MIRROR_*}# 変数に望ましいミラーをセットしてください。"
"ビルドで利用する他のミラーは全て、これにより設定した値をデフォルト値として使"
"います。例えば:"

#. type: Plain text
#: en/examples.ssi:18
#, no-wrap
msgid ""
" LB_MIRROR_BOOTSTRAP=\"http://mirror/debian/\"\n"
" LB_MIRROR_CHROOT_SECURITY=\"http://mirror/debian-security/\"\n"
" LB_MIRROR_CHROOT_BACKPORTS=\"http://mirror/debian-backports/\"\n"
msgstr ""
" LB_MIRROR_BOOTSTRAP=\"http://mirror/debian/\"\n"
" LB_MIRROR_CHROOT_SECURITY=\"http://mirror/debian-security/\"\n"
" LB_MIRROR_CHROOT_BACKPORTS=\"http://mirror/debian-backports/\"\n"

#. type: Plain text
#: en/examples.ssi:22
msgid "2~tutorial-1 Tutorial 1: A default image"
msgstr "2~tutorial-1 チュートリアル 1: デフォルトイメージ"

#. type: Plain text
#: en/examples.ssi:24
#, no-wrap
msgid "*{Use case:}* Create a simple first image, learning the basics of live-build.\n"
msgstr "*{事例:}* 簡単な最初のイメージを作成して live-build の基礎を学びます。\n"

#. type: Plain text
#: en/examples.ssi:26
msgid ""
"In this tutorial, we will build a default ISO hybrid live system image "
"containing only base packages (no Xorg) and some live system support "
"packages, as a first exercise in using live-build."
msgstr ""
"このチュートリアルでは、live-build を利用した最初の演習としてbase パッケージ "
"(Xorg は含まない) と live システムを支援するパッケージだけを収録する、デフォ"
"ルトの ISO hybrid 形式の live システムイメージをビルドします。"

#. type: Plain text
#: en/examples.ssi:28
msgid "You can't get much simpler than this:"
msgstr "これ以上簡単にすることはなかなかできないでしょう:"

#. type: Plain text
#: en/examples.ssi:32
#, no-wrap
msgid " $ mkdir tutorial1 ; cd tutorial1 ; lb init ; lb config\n"
msgstr " $ mkdir tutorial1 ; cd tutorial1 ; lb init ; lb config\n"

#. type: Plain text
#: en/examples.ssi:36
msgid ""
"Examine the contents of the #{config/}# directory if you wish. You will see "
"stored here a skeletal configuration, ready to customize or, in this case, "
"use immediately to build a default image."
msgstr ""
"何か望むことがあれば #{config/}# ディレクトリの内容を調べてください。ここには"
"概略の設定があり、すぐ独自化もできますが、ここではそのままでデフォルトのイ"
"メージをビルドします。"

#. type: Plain text
#: en/examples.ssi:38
msgid ""
"Now, as superuser, build the image, saving a log as you build with #{tee}#."
msgstr ""
"スーパーユーザでイメージをビルドし、そのログを #{tee}# により保存します。"

#. type: Plain text
#: en/examples.ssi:42 en/examples.ssi:68 en/examples.ssi:268
#: en/project_bugs.ssi:66
#, no-wrap
msgid " # lb build 2>&1 | tee build.log\n"
msgstr " # lb build 2>&1 | tee build.log\n"

#. type: Plain text
#: en/examples.ssi:46
msgid ""
"Assuming all goes well, after a while, the current directory will contain #"
"{binary.hybrid.iso}#. This ISO hybrid image can be booted directly in a "
"virtual machine as described in {Testing an ISO image with Qemu}#testing-iso-"
"with-qemu and {Testing an ISO image with VirtualBox}#testing-iso-with-"
"virtualbox, or else imaged onto optical media or a USB flash device as "
"described in {Burning an ISO image to a physical medium}#burning-iso-image "
"and {Copying an ISO hybrid image to a USB stick}#copying-iso-hybrid-to-usb, "
"respectively."
msgstr ""
"すべてがうまくいくとして、しばらくすると現在のディレクトリに #{binary.hybrid."
"iso}# が出来上がります。この ISO hybrid イメージは {Qemu での ISO イメージの"
"テスト}#testing-iso-with-qemu や {VirtualBox での ISO イメージのテスト}"
"#testing-iso-with-virtualbox で説明しているように仮想マシンで直接、あるいは"
"{物理メディアへの ISO イメージ書き込み}#burning-iso-image や {USB メモリへの "
"ISO hybrid イメージのコピー}#copying-iso-hybrid-to-usb で説明しているように光"
"学メディアや USB フラッシュ機器に書き込んだイメージ、それぞれからブートできま"
"す。"

#. type: Plain text
#: en/examples.ssi:48
msgid "2~tutorial-2 Tutorial 2: A web browser utility"
msgstr "2~tutorial-2 チュートリアル 2: ウェブブラウザユーティリティ"

#. type: Plain text
#: en/examples.ssi:50
#, no-wrap
msgid "*{Use case:}* Create a web browser utility image, learning how to apply customizations.\n"
msgstr "*{事例:}* ウェブブラウザユーティリティイメージを作成し、独自化の適用方法を学びます。\n"

#. type: Plain text
#: en/examples.ssi:52
msgid ""
"In this tutorial, we will create an image suitable for use as a web browser "
"utility, serving as an introduction to customizing live system images."
msgstr ""
"このチュートリアルでは live システムイメージを独自化する方法の紹介として、"
"ウェブブラウザユーティリティとしての利用に適するイメージを作成します。"

#. type: Plain text
#: en/examples.ssi:58
#, no-wrap
msgid ""
" $ mkdir tutorial2\n"
" $ cd tutorial2\n"
" $ echo \"task-lxde-desktop iceweasel\" >> config/package-lists/my.list.chroot\n"
msgstr ""
" $ mkdir tutorial2\n"
" $ cd tutorial2\n"
" $ echo \"task-lxde-desktop iceweasel\" >> config/package-lists/my.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:62
msgid ""
"Our choice of LXDE for this example reflects our desire to provide a minimal "
"desktop environment, since the focus of the image is the single use we have "
"in mind, the web browser. We could go even further and provide a default "
"configuration for the web browser in #{config/includes.chroot/etc/iceweasel/"
"profile/}#, or additional support packages for viewing various kinds of web "
"content, but we leave this as an exercise for the reader."
msgstr ""
"この例で LXDE を選択しているのは最小限のデスクトップ環境を提供するという私達"
"の目的を反映しています。念頭に置いているこのイメージの目的はただ一つ、ウェブ"
"ブラウザだけだからです。もっと細かく、#{config/includes.chroot/etc/iceweasel/"
"profile/}# でのウェブブラウザ向けデフォルト設定やウェブ上の様々な種類の内容を"
"表示するための追加のサポートパッケージを提供することはできますが、それは読み"
"手の演習として残しておきます。"

#. type: Plain text
#: en/examples.ssi:64
msgid ""
"Build the image, again as superuser, keeping a log as in {Tutorial 1}"
"#tutorial-1:"
msgstr ""
"{チュートリアル 1}#tutorial-1 と同様、ここでもスーパーユーザでイメージをビル"
"ドし、ログを残します:"

#. type: Plain text
#: en/examples.ssi:72
msgid "Again, verify the image is OK and test, as in {Tutorial 1}#tutorial-1."
msgstr ""
"ここでも{チュートリアル 1}#tutorial-1 と同様、イメージがうまくできているか検"
"証し、テストします。"

#. type: Plain text
#: en/examples.ssi:74
msgid "2~tutorial-3 Tutorial 3: A personalized image"
msgstr "2~tutorial-3 チュートリアル 3: 私的イメージ"

#. type: Plain text
#: en/examples.ssi:76
#, no-wrap
msgid "*{Use case:}* Create a project to build a personalized image, containing your favourite software to take with you on a USB stick wherever you go, and evolving in successive revisions as your needs and preferences change.\n"
msgstr "*{事例:}* プロジェクトを作成して個人用イメージをビルドします。USB メモリを使って好みのソフトウェアを自由に収録し、要求や設定を変更しながらこのイメージを続けて改訂します。\n"

#. type: Plain text
#: en/examples.ssi:78
msgid ""
"Since we will be changing our personalized image over a number of revisions, "
"and we want to track those changes, trying things experimentally and "
"possibly reverting them if things don't work out, we will keep our "
"configuration in the popular #{git}# version control system. We will also "
"use the best practice of autoconfiguration via #{auto}# scripts as described "
"in {Managing a configuration}#managing-a-configuration."
msgstr ""
"この個人用イメージを何度も改訂し、変更を追跡しておいて実験的に試してみてうま"
"くいかなかったときには差し戻せるようにしたいため、人気のある #{git}# バージョ"
"ン管理システムに設定を残します。{設定管理}#managing-a-configuration で説明し"
"ている #{auto}# スクリプトによる自動設定を経由した最善の実践も利用します。"

#. type: Plain text
#: en/examples.ssi:80
msgid "3~ First revision"
msgstr "3~ 最初の改訂"

#. type: Plain text
#: en/examples.ssi:86
#, no-wrap
msgid ""
" $ mkdir -p tutorial3/auto\n"
" $ cp /usr/share/doc/live-build/examples/auto/* tutorial3/auto/\n"
" $ cd tutorial3\n"
msgstr ""
" $ mkdir -p tutorial3/auto\n"
" $ cp /usr/share/doc/live-build/examples/auto/* tutorial3/auto/\n"
" $ cd tutorial3\n"

#. type: Plain text
#: en/examples.ssi:90
msgid "Edit #{auto/config}# to read as follows:"
msgstr "#{auto/config}# を以下のように変更します:"

#. type: Plain text
#: en/examples.ssi:94
#, no-wrap
msgid " #!/bin/sh\n"
msgstr " #!/bin/sh\n"

#. type: Plain text
#: en/examples.ssi:99
#, no-wrap
msgid ""
" lb config noauto \\\n"
"     --architectures i386 \\\n"
"     --linux-flavours 686-pae \\\n"
"     \"${@}\"\n"
msgstr ""
" lb config noauto \\\n"
"     --architectures i386 \\\n"
"     --linux-flavours 686-pae \\\n"
"     \"${@}\"\n"

#. type: Plain text
#: en/examples.ssi:103
msgid ""
"Perform #{lb config}# to generate the config tree, using the #{auto/config}# "
"script you just created:"
msgstr ""
"#{lb config}# を実行して設定ツリーを生成し、生成された #{auto/config}# スクリ"
"プトを使います:"

#. type: Plain text
#: en/examples.ssi:107 en/user_basics.ssi:60
#, no-wrap
msgid " $ lb config\n"
msgstr " $ lb config\n"

#. type: Plain text
#: en/examples.ssi:111
msgid "Now populate your local package list:"
msgstr "ここでローカルパッケージ一覧を設定します:"

#. type: Plain text
#: en/examples.ssi:115
#, no-wrap
msgid " $ echo \"task-lxde-desktop iceweasel xchat\" >> config/package-lists/my.list.chroot\n"
msgstr " $ echo \"task-lxde-desktop iceweasel xchat\" >> config/package-lists/my.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:119
msgid ""
"First, #{--architectures i386}# ensures that on our #{amd64}# build system, "
"we build a 32-bit version suitable for use on most machines. Second, we use #"
"{--linux-flavours 686-pae}# because we don't anticipate using this image on "
"much older systems. Third, we have chosen the /{lxde}/ task metapackage to "
"give us a minimal desktop. And finally, we have added two initial favourite "
"packages: /{iceweasel}/ and /{xchat}/."
msgstr ""
"まず、#{--architectures i386}# により必ず #{amd64}# ビルドシステムでほとんど"
"のマシンでの利用に適応する 32 ビット版をビルドするようにします。次に、相当に"
"古いシステムでのこのイメージの利用を想定しないため #{--linux-flavours 686-"
"pae}# を使います。/{lxde}/ task メタパッケージを選択して最小限のデスクトップ"
"を揃えます。最後に、好みのパッケージの初期値として /{iceweasel}/ と /"
"{xchat}/ を追加しています。"

#. type: Plain text
#: en/examples.ssi:121
msgid "Now, build the image:"
msgstr "そして、イメージをビルドします:"

#. type: Plain text
#: en/examples.ssi:125 en/examples.ssi:237 en/user_basics.ssi:70
#: en/user_basics.ssi:227 en/user_basics.ssi:271
#, no-wrap
msgid " # lb build\n"
msgstr " # lb build\n"

#. type: Plain text
#: en/examples.ssi:129
msgid ""
"Note that unlike in the first two tutorials, we no longer have to type #"
"{2>&1 | tee build.log}# as that is now included in #{auto/build}#."
msgstr ""
"最初の2つのチュートリアルとは異なり、#{2>&1 | tee build.log}# は #{auto/"
"build}# に書かれているため打ち込む必要がなくなっていることに注意してくださ"
"い。"

#. type: Plain text
#: en/examples.ssi:131
msgid ""
"Once you've tested the image (as in {Tutorial 1}#tutorial-1) and are "
"satisfied it works, it's time to initialize our #{git}# repository, adding "
"only the auto scripts we just created, and then make the first commit:"
msgstr ""
"({チュートリアル 1}#tutorial-1 にあるように) イメージをテストしてうまく機能す"
"る確信を得たら #{git}# リポジトリを初期化し、作成したばかりの auto スクリプト"
"だけを追加し、最初のコミットを行います:"

#. type: Plain text
#: en/examples.ssi:138
#, no-wrap
msgid ""
" $ git init\n"
" $ cp /usr/share/doc/live-build/examples/gitignore .gitignore\n"
" $ git add .\n"
" $ git commit -m \"Initial import.\"\n"
msgstr ""
" $ git init\n"
" $ cp /usr/share/doc/live-build/examples/gitignore .gitignore\n"
" $ git add .\n"
" $ git commit -m \"Initial import.\"\n"

#. type: Plain text
#: en/examples.ssi:142
msgid "3~ Second revision"
msgstr "3~ 2回目の改訂"

#. type: Plain text
#: en/examples.ssi:144
msgid ""
"In this revision, we're going to clean up from the first build, add the /"
"{vlc}/ package to our configuration, rebuild, test and commit."
msgstr ""
"この改訂では、最初のビルドをきれいにし、/{vlc}/ パッケージを設定に追加して再"
"ビルド、テストコミットを行います。"

#. type: Plain text
#: en/examples.ssi:146
msgid ""
"The #{lb clean}# command will clean up all generated files from the previous "
"build except for the cache, which saves having to re-download packages. This "
"ensures that the subsequent #{lb build}# will re-run all stages to "
"regenerate the files from our new configuration."
msgstr ""
"#{lb clean}# コマンドは前のビルドで生成したファイルを、パッケージを再びダウン"
"ロードせずに済むようにキャッシュを除いて全てきれいにします。これにより以降の "
"#{lb build}# が全段階で再び実行され、必ず新しい設定でファイルを再生成するよう"
"になります。"

#. type: Plain text
#: en/examples.ssi:150 en/user_basics.ssi:251
#, no-wrap
msgid " # lb clean\n"
msgstr " # lb clean\n"

#. type: Plain text
#: en/examples.ssi:154
msgid ""
"Now append the /{vlc}/ package to our local package list in #{config/package-"
"lists/my.list.chroot}#:"
msgstr ""
"/{vlc}/ パッケージを #{config/package-lists/my.list.chroot}# のローカルパッ"
"ケージ一覧に追記します:"

#. type: Plain text
#: en/examples.ssi:158
#, no-wrap
msgid " $ echo vlc >> config/package-lists/my.list.chroot\n"
msgstr " $ echo vlc >> config/package-lists/my.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:162
msgid "Build again:"
msgstr "再びビルドします:"

#. type: Plain text
#: en/examples.ssi:166
msgid "# lb build"
msgstr "# lb build"

#. type: Plain text
#: en/examples.ssi:170
msgid "Test, and when you're satisfied, commit the next revision:"
msgstr "テストして満足したら次の改訂としてコミットします:"

#. type: Plain text
#: en/examples.ssi:174
#, no-wrap
msgid " $ git commit -a -m \"Adding vlc media player.\"\n"
msgstr " $ git commit -a -m \"Adding vlc media player.\"\n"

#. type: Plain text
#: en/examples.ssi:178
msgid ""
"Of course, more complicated changes to the configuration are possible, "
"perhaps adding files in subdirectories of #{config/}#. When you commit new "
"revisions, just take care not to hand edit or commit the top-level files in #"
"{config}# containing #{LB_*}# variables, as these are build products, too, "
"and are always cleaned up by #{lb clean}# and re-created with #{lb config}# "
"via their respective #{auto}# scripts."
msgstr ""
"もちろん、#{config/}# 以下のサブディレクトリにファイルを追加する等により設定"
"をもっと複雑に変更することも可能です。新しい改訂版をコミットする際、#{config}"
"# の最上位にある、#{LB_*}# 変数を設定しているファイルもビルドされてできたもの"
"で、#{lb clean}# と、対応する #{auto}# スクリプトを経由して再作成した #{lb "
"config}# により常に整理されるものなので、手で編集したりコミットすることのない"
"ように注意してください。"

#. type: Plain text
#: en/examples.ssi:180
msgid ""
"We've come to the end of our tutorial series. While many more kinds of "
"customization are possible, even just using the few features explored in "
"these simple examples, an almost infinite variety of different images can be "
"created. The remaining examples in this section cover several other use "
"cases drawn from the collected experiences of users of live systems."
msgstr ""
"一連のチュートリアルもこれで終わりです。もっと多様な独自化はできますが、ここ"
"までの簡単な例で見てきた少しの機能を使うだけでも、イメージはほぼ無限の異なる"
"組み合わせを作成することができます。この節の残りの例では、収集してきた live "
"システムのユーザの経験を元にした他の事例についていくつか触れます。"

#. type: Plain text
#: en/examples.ssi:182
msgid "2~ A VNC Kiosk Client"
msgstr "2~ VNC 公衆クライアント"

# Translator's Notes: an example on how to create an image, so that this image
# Translator's Notes: connects to a vnc server automatically when the image is started
#. type: Plain text
#: en/examples.ssi:184
#, no-wrap
msgid "*{Use case:}* Create an image with live-build to boot directly to a VNC server.\n"
msgstr "*{事例:}* live-build を使って、ブートすると直接 VNC サーバに接続するイメージを作成します。\n"

#. type: Plain text
#: en/examples.ssi:186
msgid ""
"Make a build directory and create an skeletal configuration inside it, "
"disabling recommends to make a minimal system. And then create two initial "
"package lists: the first one generated with a script provided by live-build "
"named #{Packages}# (see {Generated package lists}#generated-package-lists), "
"and the second one including /{xorg}/, /{gdm3}/, /{metacity}/ and /"
"{xvnc4viewer}/."
msgstr ""
"ビルド用ディレクトリを作ってそこに概略設定を作成し、推奨パッケージを無効にし"
"て最小限のシステムを作成します。それから初期パッケージ一覧を2つ作成します: 1"
"つ目は live-build により提供される #{Packages}# というスクリプト ({生成される"
"パッケージ一覧}#generated-package-lists 参照) により生成し、2つ目では /"
"{xorg}/、/{gdm3}/、/{metacity}/、/{xvnc4viewer}/ を収録します。"

#. type: Plain text
#: en/examples.ssi:195
#, no-wrap
msgid ""
" $ mkdir vnc-kiosk-client\n"
" $ cd vnc-kiosk-client\n"
" $ lb init\n"
" $ lb config -a i386 -k 686-pae --apt-recommends false\n"
" $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot\n"
" $ echo \"xorg gdm3 metacity xvnc4viewer\" > config/package-lists/my.list.chroot\n"
msgstr ""
" $ mkdir vnc-kiosk-client\n"
" $ cd vnc-kiosk-client\n"
" $ lb init\n"
" $ lb config -a i386 -k 686-pae --apt-recommends false\n"
" $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot\n"
" $ echo \"xorg gdm3 metacity xvnc4viewer\" > config/package-lists/my.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:199
msgid ""
"As explained in {Tweaking APT to save space}#tweaking-apt-to-save-space you "
"may need to re-add some recommended packages to make your image work "
"properly."
msgstr ""
"{APT の調整による容量の節約}#tweaking-apt-to-save-space で説明しているよう"
"に、イメージが適切に機能するためには推奨パッケージを再びいくらか追加する必要"
"があるかもしれません。"

#. type: Plain text
#: en/examples.ssi:201
msgid "An easy way to list recommends is using /{apt-cache}/. For example:"
msgstr ""
"推奨パッケージ一覧を調べるための簡単な方法として /{apt-cache}/ の利用がありま"
"す。例えば:"

#. type: Plain text
#: en/examples.ssi:205
#, no-wrap
msgid " $ apt-cache depends live-config live-boot\n"
msgstr " $ apt-cache depends live-config live-boot\n"

#. type: Plain text
#: en/examples.ssi:209
msgid ""
"In this example we found out that we had to re-include several packages "
"recommended by live-config and live-boot: #{user-setup}# to make autologin "
"work and #{sudo}# as an essential program to shutdown the system. Besides, "
"it could be handy to add #{live-tools}# to be able to copy the image to RAM "
"and #{eject}# to eventually eject the live medium. So:"
msgstr ""
"この例では live-config 及び live-boot により推奨されるパッケージを複数、再び"
"収録する必要があることがわかっています: 自動ログインが機能するためには #"
"{user-setup}#、システムをシャットダウンするための不可欠なプログラムとして #"
"{sudo}#。他に、イメージを RAM にコピーできるようになる #{live-tools}# や "
"live メディアを最終的に取り出す #{eject}# を追加しておくと便利でしょう。それ"
"を反映すると:"

#. type: Plain text
#: en/examples.ssi:213
#, no-wrap
msgid " $ echo \"live-tools user-setup sudo eject\" > config/package-lists/recommends.list.chroot\n"
msgstr " $ echo \"live-tools user-setup sudo eject\" > config/package-lists/recommends.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:217
msgid ""
"After that, create the directory #{/etc/skel}# in #{config/includes.chroot}# "
"and put a custom #{.xsession}# in it for the default user that will launch /"
"{metacity}/ and start /{xvncviewer}/, connecting to port #{5901}# on a "
"server at #{192.168.1.2}#:"
msgstr ""
"その後ディレクトリ #{/etc/skel}# を #{config/includes.chroot}# に作成し、その"
"中にデフォルトユーザ向けの独自の #{.xsession}# を置きます。このファイルは /"
"{metacity}/ を立ち上げて /{xvncviewer}/ を起動し、#{192.168.1.2}# にあるサー"
"バのポート #{5901}# に接続します:"

#. type: Plain text
#: en/examples.ssi:223
#, no-wrap
msgid ""
" $ mkdir -p config/includes.chroot/etc/skel\n"
" $ cat > config/includes.chroot/etc/skel/.xsession << EOF\n"
" #!/bin/sh\n"
msgstr ""
" $ mkdir -p config/includes.chroot/etc/skel\n"
" $ cat > config/includes.chroot/etc/skel/.xsession << EOF\n"
" #!/bin/sh\n"

#. type: Plain text
#: en/examples.ssi:226
#, no-wrap
msgid ""
" /usr/bin/metacity &\n"
" /usr/bin/xvncviewer 192.168.1.2:1\n"
msgstr ""
" /usr/bin/metacity &\n"
" /usr/bin/xvncviewer 192.168.1.2:1\n"

#. type: Plain text
#: en/examples.ssi:229
#, no-wrap
msgid ""
" exit\n"
" EOF\n"
msgstr ""
" exit\n"
" EOF\n"

#. type: Plain text
#: en/examples.ssi:233
msgid "Build the image:"
msgstr "イメージをビルドします:"

#. type: Plain text
#: en/examples.ssi:241
msgid "Enjoy."
msgstr "楽しみましょう。"

#. type: Plain text
#: en/examples.ssi:243
msgid "2~ A base image for a 128MB USB key"
msgstr "2~ 128MB USB メモリ向けの基本イメージ"

#. type: Plain text
#: en/examples.ssi:245
#, no-wrap
msgid "*{Use case:}* Create a default image with some components removed in order to fit on a 128MB USB key with a little space left over to use as you see fit.\n"
msgstr "*{事例:}* 128MB USB メモリに収まるように構成要素をいくらか削除して、収まることがわかるように容量を少し空けたデフォルトのイメージの作成。\n"

#. type: Plain text
#: en/examples.ssi:247
msgid ""
"When optimizing an image to fit a certain media size, you need to understand "
"the tradeoffs you are making between size and functionality. In this "
"example, we trim only so much as to make room for additional material within "
"a 128MB media size, but without doing anything to destroy the integrity of "
"the packages contained within, such as the purging of locale data via the /"
"{localepurge}/ package, or other such \"intrusive\" optimizations. Of "
"particular note, we use #{--debootstrap-options}# to create a minimal system "
"from scratch."
msgstr ""
"特定のメディア容量に収まるようにイメージを最適化する場合、イメージのサイズと"
"機能はトレードオフになることを理解する必要があります。この例では削るだけにし"
"ているので 128MB のメディアサイズ内に何か追加する余地をできるだけ残しています"
"が、/{localepurge}/ パッケージによるロケールの完全削除や収録しているパッケー"
"ジ内の一貫性は何も壊していません。また、その他の「押し付ける」ような最適化も"
"していません。特に注目すべきなのは、最小限のシステムを最初から作成するために "
"#{--debootstrap-options}# を利用している点です。"

#. type: Plain text
#: en/examples.ssi:252
#, no-wrap
msgid ""
" $ lb init\n"
" $ lb config -k 486 --apt-indices false --apt-recommends false --debootstrap-options \"--variant=minbase\" --firmware-chroot false --memtest none\n"
msgstr ""
" $ lb init\n"
" $ lb config -k 486 --apt-indices false --apt-recommends false --debootstrap-options \"--variant=minbase\" --firmware-chroot false --memtest none\n"

#. type: Plain text
#: en/examples.ssi:256
msgid ""
"To make the image work properly, we must re-add, at least, two recommended "
"packages which are left out by the #{--apt-recommends false}# option. See "
"{Tweaking APT to save space}#tweaking-apt-to-save-space"
msgstr ""
"イメージを適切に機能させるためには、最低でも #{--apt-recommends false}# オプ"
"ションにより外されていた推奨パッケージを2つ追加しなおす必要があります。{APT "
"の調整による容量の節約}#tweaking-apt-to-save-space を見てください。"

#. type: Plain text
#: en/examples.ssi:260
#, no-wrap
msgid " $ echo \"user-setup sudo\" > config/package-lists/recommends.list.chroot\n"
msgstr " $ echo \"user-setup sudo\" > config/package-lists/recommends.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:264
msgid "Now, build the image in the usual way:"
msgstr "ここで、普通の方法でイメージをビルドしてみます:"

#. type: Plain text
#: en/examples.ssi:272
msgid ""
"On the author's system at the time of writing this, the above configuration "
"produced a 77MB image. This compares favourably with the 177MB image "
"produced by the default configuration in {Tutorial 1}#tutorial-1."
msgstr ""
"これを書いている時点の著者のシステムでは、上記の設定により 77MB のイメージが"
"できました。これを{チュートリアル 1}#tutorial-1 のデフォルト設定で作成された "
"177MB のイメージと都合良く比較してみましょう。"

#. type: Plain text
#: en/examples.ssi:274
msgid ""
"The biggest space-saver here, compared to building a default image on an #"
"{i386}# architecture system, is to select only the #{486}# kernel flavour "
"instead of the default #{-k \"486 686-pae\"}#. Leaving off APT's indices "
"with #{--apt-indices false}# also saves a fair amount of space, the tradeoff "
"being that you need to do an #{apt-get update}# before using /{apt}/ in the "
"live system. Dropping recommended packages with #{--apt-recommends false}# "
"saves some additional space, at the expense of omitting some packages you "
"might otherwise expect to be there. #{--debootstrap-options \"--"
"variant=minbase\"}# bootstraps a minimal system from the start. Not "
"automatically including firmware packages with #{--firmware-chroot false}# "
"saves some space too. And finally, #{--memtest none}# prevents the "
"installation of a memory tester."
msgstr ""
"#{i386}# アーキテクチャシステム上でデフォルトのイメージをビルドするのと比較し"
"て、ここで最もスペースの節約になったのはカーネルのアーキテクチャの種類をデ"
"フォルトの #{-k \"486 686-pae\"}# に代えて #{486}# だけを選択することでした。"
"#{--apt-indices false}# により APT の索引を省くことでもかなりの容量を節約して"
"いますが、その代わりに live システムで /{apt}/ を使う前に #{apt-get update}# "
"を実行する必要があります。#{--apt-recommends false}# により推奨パッケージを除"
"外することで、本来あるはずのパッケージをいくらか除外する代わりにいくらか追加"
"で容量を節約します。#{--debootstrap-options \"--variant=minbase\"}# で最初か"
"ら最小限のシステムを構成します。#{--firmware-chroot false}# でファームウェア"
"パッケージを自動的に収録しないようにすることでもさらに容量をいくらか節約しま"
"す。そして最後に、#{--memtest none}# によりメモリテスターのインストールを抑制"
"します。"

#. type: Plain text
#: en/examples.ssi:276
#, no-wrap
msgid "*{Note:}* A minimal system can also be achieved using hooks, like for example the #{stripped.hook.chroot}# hook found in #{/usr/share/doc/live-build/examples/hooks}#. It may shave off additional small amounts of space and produce an image of 62MB. However, it does so by removal of documentation and other files from packages installed on the system. This violates the integrity of those packages and that, as the comment header warns, may have unforeseen consequences. That is why using a minimal /{debootstrap}/ is the recommended way of achieving this goal.\n"
msgstr "*{注意:}* 最小限のシステムの構成はフックを使って、例えば #{/usr/share/doc/live-build/examples/hooks}# にある #{stripped.hook.chroot}# でも実現できます。これは容量をさらに少し減らし、62MB のイメージを生成します。しかしこれはその実現のために、システムにインストールしたパッケージから文書その他のファイルを削除しています。これはそうしたパッケージの完全性を破壊し、ヘッダで警告しているように思わぬ結果をもたらすかもしれません。それが、この目標のために推奨するのが最小限の /{debootstrap}/ を利用する方法になっている理由です。\n"

#. type: Plain text
#: en/examples.ssi:278
msgid "2~ A localized GNOME desktop and installer"
msgstr "2~ 地域化した GNOME デスクトップとインストーラ"

#. type: Plain text
#: en/examples.ssi:280
#, no-wrap
msgid "*{Use case:}* Create a GNOME desktop image, localized for Switzerland and including an installer.\n"
msgstr "*{事例:}* GNOME デスクトップのイメージを作成し、スイス用の地域化とインストーラを収録する\n"

#. type: Plain text
#: en/examples.ssi:282
msgid ""
"We want to make an iso-hybrid image for i386 architecture using our "
"preferred desktop, in this case GNOME, containing all of the same packages "
"that would be installed by the standard Debian installer for GNOME."
msgstr ""
"好みのデスクトップを使った i386 アーキテクチャ向けの iso-hybrid イメージを作"
"りたい。ここでは GNOME を使用して、GNOME 用の標準の Debian インストーラにより"
"インストールされるのと同一のパッケージを全て収録します。"

#. type: Plain text
#: en/examples.ssi:284
msgid ""
"Our initial problem is the discovery of the names of the appropriate "
"language tasks. Currently, live-build cannot help with this. While we might "
"get lucky and find this by trial-and-error, there is a tool, #{grep-dctrl}#, "
"which can be used to dig it out of the task descriptions in tasksel-data, so "
"to prepare, make sure you have both of those things:"
msgstr ""
"最初の問題は適切な言語用タスクの名前を判断する方法です。現在 live-build はこ"
"れを支援できません。運良くこれを試行錯誤で見つけられるかもしれませんが、その"
"ためのツールがあります。#{grep-dctrl}# を利用して tasksel-data にあるタスクの"
"説明を見つけることができます。そのため、準備としてこの両方が揃っていることを"
"確認してください:"

#. type: Plain text
#: en/examples.ssi:288
#, no-wrap
msgid " # apt-get install dctrl-tools tasksel-data\n"
msgstr " # apt-get install dctrl-tools tasksel-data\n"

#. type: Plain text
#: en/examples.ssi:292
msgid "Now we can search for the appropriate tasks, first with:"
msgstr "これで適切なタスクを検索できるようになりました。まず、"

#. type: Plain text
#: en/examples.ssi:297
#, no-wrap
msgid ""
" $ grep-dctrl -FTest-lang de /usr/share/tasksel/descs/debian-tasks.desc -sTask\n"
" Task: german\n"
msgstr ""
" $ grep-dctrl -FTest-lang de /usr/share/tasksel/descs/debian-tasks.desc -sTask\n"
" Task: german\n"

#. type: Plain text
#: en/examples.ssi:301
msgid ""
"By this command, we discover the task is called, plainly enough, german. Now "
"to find the related tasks:"
msgstr ""
"というコマンドにより、呼ばれたタスクが、簡単に言うとここではドイツだというこ"
"とがわかります。次は関連タスクを見つけます:"

#. type: Plain text
#: en/examples.ssi:307
#, no-wrap
msgid ""
" $ grep-dctrl -FEnhances german /usr/share/tasksel/descs/debian-tasks.desc -sTask\n"
" Task: german-desktop\n"
" Task: german-kde-desktop\n"
msgstr ""
" $ grep-dctrl -FEnhances german /usr/share/tasksel/descs/debian-tasks.desc -sTask\n"
" Task: german-desktop\n"
" Task: german-kde-desktop\n"

#. type: Plain text
#: en/examples.ssi:311
msgid ""
"At boot time we will generate the *{de_CH.UTF-8}* locale and select the *{ch}"
"* keyboard layout. Now let's put the pieces together. Recalling from {Using "
"metapackages}#using-metapackages that task metapackages are prefixed #{task-}"
"#, we just specify these language boot parameters, then add standard "
"priority packages and all our discovered task metapackages to our package "
"list as follows:"
msgstr ""
"ブート時に *{de_CH.UTF-8}* ロケールを生成して *{ch}* のキーボードレイアウトを"
"選択します。一緒に見ていきましょう。{メタパッケージの利用}#using-"
"metapackages から、タスクのメタパッケージには先頭に #{task-}# が付くことを思"
"いだしてください。こういった言語のブートパラメータを指定し、それから優先度が"
"標準のパッケージと発見したタスクの全メタパッケージをパッケージ一覧に追加する"
"だけです:"

#. type: Plain text
#: en/examples.ssi:325
#, no-wrap
msgid ""
" $ mkdir live-gnome-ch\n"
" $ cd live-gnome-ch\n"
" $ lb init\n"
" $ lb config \\\n"
"     -a i386 \\\n"
"     -k 486 \\\n"
"     --bootappend-live \"boot=live components locales=de_CH.UTF-8 keyboard-layouts=ch\" \\\n"
"     --debian-installer live\n"
" $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot\n"
" $ echo task-gnome-desktop task-german task-german-desktop >> config/package-lists/desktop.list.chroot\n"
" $ echo debian-installer-launcher >> config/package-lists/installer.list.chroot\n"
msgstr ""
" $ mkdir live-gnome-ch\n"
" $ cd live-gnome-ch\n"
" $ lb init\n"
" $ lb config \\\n"
"     -a i386 \\\n"
"     -k 486 \\\n"
"     --bootappend-live \"boot=live components locales=de_CH.UTF-8 keyboard-layouts=ch\" \\\n"
"     --debian-installer live\n"
" $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot\n"
" $ echo task-gnome-desktop task-german task-german-desktop >> config/package-lists/desktop.list.chroot\n"
" $ echo debian-installer-launcher >> config/package-lists/installer.list.chroot\n"

#. type: Plain text
#: en/examples.ssi:328
msgid ""
"Note that we have included the debian-installer-launcher package to launch "
"the installer from the live desktop, and have also specified the 486 flavour "
"kernel, as it is currently necessary to make the installer and live system "
"kernels match for the launcher to work properly."
msgstr ""
"のようになります。インストーラを live デスクトップから立ち上げるために "
"debian-installer-launcher パッケージを収録し、さらに 486 用のカーネルを指定し"
"ていることに注意してください。これは現在、インストーラを立ち上げる機能が適切"
"に動作するためにはインストーラと live システムのカーネルを一致させる必要があ"
"るためです。"
