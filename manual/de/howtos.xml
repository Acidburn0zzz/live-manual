<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY % commondata SYSTEM "../entities/common.ent">
]>
<chapter id="howtos">
  <title>Howtos</title>
  <sect1 id="iso">
    <title>ISO</title>
    <para> Generating a Debian Live CD is very simple. You need to have <filename>
live-helper </filename>(package available in Debian sid and lenny), and
<filename> Debootstrap </filename>(or cdebootstrap) from etch or newer. </para>
    <variablelist>
      <varlistentry>
        <term>Install live-helper</term>
        <listitem> . <screen>apt-get install live-helper</screen> </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>Configure the current working directory with lh_config</term>
        <listitem>. <para><screen>lh_config -b iso -a $ARCH</screen></para> <para> where <filename>$ARCH</filename> is the intended architecture (i.e. - i386
or amd64). </para> <para><filename>-b</filename> flag is used to be sure to obtain image in ISO
format. </para> </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>Build the image with lh_build</term>
        <listitem>Execute lh_build as root: <para><screen>lh_build</screen></para> <para> The command above will create the basic image, containing just the Debian
standard system (with no X at all). </para> <para> If you want to have any of the <ulink
url="http://wiki.debian.org/DesktopEnvironment">Desktop_environments</ulink>
on your livecd, <filename>ls /usr/share/live-helper/lists </filename> will
show a number of available package Lists to choose from,
e.g. <filename>lh_config -p gnome-desktop</filename> </para> <para> More examples are listed at DebianLive/Examples. FIXME LINK </para> <para> See <xref linkend="packages"/> for help configuring a local Debian Mirror
and other aspects of the live system. </para> </listitem>
      </varlistentry>
    </variablelist>
    <variablelist>
      <varlistentry>
        <term>Test the image</term>
        <listitem> If you have qemu installed, you can boot the image with: <para><screen>qemu -cdrom binary.iso</screen></para> <para> If you have also <ulink url="http://wiki.debian.org/QEMU"> kqemu </ulink>
installed, you can add <filename> -kernel-kqemu</filename> </para> </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 id="iso_multiarch">
    <title>ISO_(multiarch)</title>
    <para> Multiple machine boot CDs can be created with the following manual
procedure. This procedure has been successfully used to create a single CD
which is bootable on alpha, i386, pmax, and sparc. It should be possible to
also make the CD bootable on macppc, vax and on sun2, sun3 and sun3x. </para>
    <para> To create a CD which is bootable by multiple architectures, use the
following steps in this order. Please note that the order is critical. </para>
    <para> Make sure you have all the required files including the various kernels and
boot programs listed in the individual machine sections. </para>
    <para> Include a directory somewhere in the cdsources directory called mdec.pmax
and include the pmax bootxx_cd9660 file there. For example,
<filename>/cdsources/usr/mdec.pmax/bootxx_cd9660.</filename> </para>
    <para> Include a directory somewhere in the cdsources directory called mdec.vax and
include the vax xxboot file there. For example,
<filename>/cdsources/usr/mdec.vax/xxboot.</filename> </para>
    <para> Include the macppc ofwboot.xcf bootloader in /cdsources. </para>
    <para> Create an i386 bootable image. <screen>sh mkisofs -v -v -o output.iso -b i386/installation/floppy/boot-big.fs \ -c boot.catalog -l -J -r -L /cdsources 2 &amp;1 | tee /tmp/mkisofs.log exit</screen> </para>
    <para>
      <note> The appearance of the -v flag twice is required. If you are making a
bootable CD for an Open Firmware 3 macppc model, make sure to include -hfs
-part in the parameters for mkisofs. </note>
    </para>
    <para> Run <filename>mksunbootcd </filename>on a NetBSD/sparc machine to install
sparc and sun2/sun3 bootblocks. Alternatively, install the
<filename>sysutils/mksunbootcd</filename> package on your favorite NetBSD
machine. <screen>mksunbootcd output.iso boot-sun4.fs boot-sun4c.fs boot-sun4m.fs boot-sun3.fs</screen> </para>
    <para> Run the installboot(8) program targeted for NetBSD/pmax to install the pmax
bootblocks. Note that in order to coexist with other NetBSD boot blocks, the
pmax boot block is appended to the end of the ISO file system. </para>
    <screen>installboot -m pmax -v -o append,sunsum output.iso /tmp/mdec.pmax/bootxx_cd9660</screen>
    <para> The -o append,sunsum option appends the first stage boot block to the end of
the ISO file system, and restores the checksum used when booting on a sun. </para>
    <para> Run the installboot(8) program targeted for NetBSD/vax to install the vax
bootblocks. Note that in order to coexist with other NetBSD boot blocks, the
vax boot block is appended to the end of the ISO file system. </para>
    <para> installboot -m vax -v -o append,sunsum output.iso /tmp/mdec.vax/xxboot </para>
    <para> (See the pmax entry above for an explanation of the flags). </para>
    <para> Run the installboot(8) program targeted for NetBSD/alpha to install the
alpha bootblocks. </para>
    <screen>installboot -m alpha -v -o append,sunsum output.iso /tmp/mdec.alpha/bootxx_cd9660</screen>
    <para>
      <note> The alpha installboot must occur after the others, because currently
it's the only machine dependent back-end for installboot(8) that can
calculate the alpha checksum. (See the pmax entry above for an explanation
of the flags). </note>
    </para>
  </sect1>
</chapter>
