:B~ About this manual

1~ About this manual

The main goal of this manual is to serve as a single access point to all
documentation related to the Debian Live project. It does not include
end-user documentation for using a Debian Live system as far as things are
live specific.

Some of the commands mentioned in the text must be executed with superuser
privileges which can be obtained by becoming the root user via #{su}# or by
using #{sudo}#. To distinguish between commands which may be executed by an
unprivileged user and those requiring superuser privileges, commands are
prepended by #{$}# or #{#}# respectively. This symbol is not a part of the
command.

2~ For the impatient

While we believe that everything in this manual is important to at least
some of our users, we realize it is a lot of material to cover and that you
may wish to experience early success using the software before delving into
the details. Therefore, we have provided three tutorials in the
{Examples}#examples section designed to teach you image building and
customization basics. Read {Using the examples}#using-the-examples first,
followed by {Tutorial 1: A standard image}#tutorial-1, {Tutorial 2: A web
browser utility}#tutorial-2 and finally {Tutorial 3: A personal travelling
companion}#tutorial-3. By the end of these tutorials, you will have a taste
of what can be done with Debian Live. We encourage you to return to more
in-depth study of the manual, perhaps next reading {The basics}#the-basics,
skimming or skipping {Building a netboot image}#building-netboot-image, and
finishing by reading the {Customization overview}#customization-overview and
the chapters that follow it. By this point, we hope you are thoroughly
excited by what can be done with Debian Live and motivated to read the rest
of the manual, cover-to-cover.

2~terms Terms

_* *{Live system}*: An operating system that can boot without installation
to a hard drive. Live systems do not alter local operating system(s) or
file(s) already installed on the computer hard drive unless instructed to do
so. Live systems are typically booted from media such as CDs, DVDs or USB
sticks. Some may also boot over the network.

_* *{Debian Live}*: The Debian sub-project which maintains the live-boot,
live-build, live-config, and live-manual packages.

_* *{Debian Live system}*: A live system that uses software from the Debian
operating system that may be booted from CDs, DVDs, USB sticks, over the
network (via netboot images), and over the Internet (via boot parameter
#{fetch=URL}#).

_* *{Host system}*: The environment used to create the live system.

_* *{Target system}*: The environment used to run the live system.

_* *{live-boot}*: A collection of scripts used to boot live
systems. live-boot was formerly a part of live-initramfs.

_* *{live-build}*: A collection of scripts used to build customized Debian
Live systems. live-build was formerly known as live-helper, and even earlier
known as live-package.

_* *{live-config}*: A collection of scripts used to configure a live system
during the boot process. live-config was formerly a part of live-initramfs.

_* *{live-manual}*: This document is maintained in a package called
live-manual.

_* *{Debian Installer (d-i)}*: The official installation system for the
Debian distribution.

_* *{Boot parameters}*: Parameters that can be entered at the bootloader
prompt to influence the kernel or live-config.

_* *{chroot}*: The chroot program, #{chroot(8)}#, enables us to run
different instances of the GNU/Linux environment on a single system
simultaneously without rebooting.

_* *{Binary image}*: A file containing the live system, such as binary.iso
or binary.img.

_* *{Target distribution}*: The distribution upon which your live system
will be based. This can differ from the distribution of your host system.

_* *{Squeeze/Wheezy/Sid (stable/testing/unstable)}*: Debian codenames for
releases. At the time of writing, Squeeze is the current *{stable}* release
and Wheezy is the current *{testing}* release. Sid will always be a synonym
for the *{unstable}* release. Throughout the manual, we tend to use
codenames for the releases, as that is what is supported by the tools
themselves.

The *{stable}* distribution contains the latest officially released
distribution of Debian. The *{testing}* distribution is the staging area for
the next *{stable}* release. A major advantage of using this distribution is
that it has more recent versions of software relative to the *{stable}*
release. The *{unstable}* distribution is where active development of Debian
occurs. Generally, this distribution is run by developers and those who like
to live on the edge.

2~ Authors

A list of authors (in alphabetical order):

_* Ben Armstrong

_* Brendan Sleight

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~ Contributing to this document

This manual is intended as a community project and all proposals for
improvements and contributions are extremely welcome. The preferred way to
submit a contribution is to send it to the mailing list. Please see
{Contact}#contact for more information.

When submitting a contribution, please clearly identify its copyright holder
and include the licensing statement. Note that to be accepted, the
contribution must be licensed under the same license as the rest of the
document, namely, GPL version 3 or later.

The sources for this manual are maintained using the Git version control
system. You can checkout the latest copy by executing:

code{

$ git clone git://live.debian.net/git/live-manual.git

}code

Prior to submission of your contribution, please preview your work. To
preview the live-manual, ensure the packages needed for building are
installed by executing:

code{

# apt-get install make po4a sisu-complete

}code

You may build the live-manual from the top level directory of your git
checkout by executing:

code{

$ make build

}code

Since it takes a while to build the manual in all supported languages, you
may find it convenient when proofing to build for only one language, e.g. by
executing:

code{

$ make build LANGUAGES=en

}code

3~ Applying patches

Directly commiting to the repository is possible by anyone. However, we ask
you to send bigger changes to the mailing list to discuss them first. In
order to push to the repository, the following steps are required.

_* Fetch the public commit key:

code{

$ mkdir -p ~/.ssh/identity.d
$ wget http://live.debian.net/other/keys/gitosis@live.debian.net \
	-O ~/.ssh/identity.d/live.debian.net
$ wget http://live.debian.net/other/keys/gitosis@live.debian.net.pub \
	-O ~/.ssh/identity.d/live.debian.net.pub
$ chmod 0600 ~/.ssh/identity.d/live.debian.net*

}code

_* Add the following section to your openssh-client config:

code{

$ cat >> ~/.ssh/config << EOF
Host live.debian.net
        Hostname live.debian.net
        User gitosis
        IdentityFile ~/.ssh/identity.d/gitosis@live.debian.net
EOF

}code

_* Checkout a clone of the manual through ssh:

code{

$ git clone gitosis@live.debian.net:/live-manual.git

}code

_* After editing the files in manual/en/, please call the 'commit' target in
the top level directory to sanitize the files and update the translation
files:

code{

$ make commit

}code

_* After sanitizing commit the changes. Write commit messages, that consist
of full useful sentences, starting with a capital letter and ending with a
full stop. Usually starting with the form
'Fixing/Adding/Removing/Correcting/':

code{

$ git commit -a

}code

_* Push the commit to the server:

code{

$ git push

}code

3~ Translation

Submitting a translation for a new language is recommended in two steps:

_* Translate the about_manual.ssi.pot, about_project.ssi.pot and
index.html.in.pot files to your language with your favourite editor (such as
poedit). Send translated files to the mailing list. It will then be included
and autobuild for that language enabled.

_* Once the new language is added, you can randomly start translating all
other pot files.
