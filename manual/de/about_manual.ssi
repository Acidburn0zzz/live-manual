:B~ Über dieses Handbuch

1~about-manual Über dieses Handbuch

Dieses Handbuch dient als zentraler Einstiegspunkt für die gesamte
Dokumentation des Debian Live Projekts, insbesondere zur Software die für
Debian 7.0 "wheezy" erstellt wurde. Eine aktualisierte Version dieses
Handbuches befindet sich auf http://live.debian.net/.

Obwohl live-manual primär das Ziel hat beim Bau eines Live Systems zu helfen
und nicht Anwenderfragen zu beantworten, können Benutzer einige nützliche
Informationen in den folgenden Abschnitten finden: {Die
Grundlagen}#the-basics deckt das Herunterladen und Vorbereiten von
vorgefertigten Images ab, um diese von Medien oder über das Netzwerk zu
starten, sowohl durch Benutzung des Web Builders als auch von live-build
direkt. Die {Anpassung des
Laufzeitverhalten}#customizing-run-time-behaviours beschreibt einige
Optionen welche als Startparameter benutzt werden können, z.B. die Auswahl
des Tastaturlayouts und der Systemsprache oder Persistenz.

Einige der erwähnten Befehle im Text müssen als Superuser ausgeführt
werden. Dies kann entweder dadurch erreicht werden, indem zuerst auf den
root Benutzer gewechselt wird mittels #{su}# oder durch die Benutzung von
#{sudo}#. Um die Befehle welche als unprivilegierter Benutzer ausgeführt
werden können und diesen welche Superuser Rechte benötigen, sind den
Befehlen #{$}# respektive #{#}# vorangestellt. Dieses Symbol ist nicht Teil
des Befehls.

2~ Für die Ungeduldigen

Obowhl wir denken dass alles in diesem Handbuch mehr oder weniger für die
einen oder anderen Benutzer wichtig ist, sind wir uns bewusst, dass es sich
um viel Material handelt. Für ein schnelles Erfolgserlebnis in der Anwendung
dieser Software schlagen wir die folgende Reihenfolge vor, bevor sie sich
mit den Details befassen: 

First, read this chapter, {About this manual}#about-manual, from the
beginning and ending with the {Terms}#terms section. Next, skip to the three
tutorials at the front of the {Examples}#examples section designed to teach
you image building and customization basics. Read {Using the
examples}#using-the-examples first, followed by {Tutorial 1: A default
image}#tutorial-1, {Tutorial 2: A web browser utility}#tutorial-2 and
finally {Tutorial 3: A personalized image}#tutorial-3. By the end of these
tutorials, you will have a taste of what can be done with Debian Live.

We encourage you to return to more in-depth study of the manual, perhaps
next reading {The basics}#the-basics, skimming or skipping {Building a
netboot image}#building-netboot-image, and finishing by reading the
{Customization overview}#customization-overview and the chapters that follow
it. By this point, we hope you are thoroughly excited by what can be done
with Debian Live and motivated to read the rest of the manual,
cover-to-cover.

2~terms Begriffe

_* *{Live system}*: An operating system that can boot without installation
to a hard drive. Live systems do not alter local operating system(s) or
file(s) already installed on the computer hard drive unless instructed to do
so. Live systems are typically booted from media such as CDs, DVDs or USB
sticks. Some may also boot over the network.

_* *{Debian Live}*: The Debian sub-project which maintains, among others,
the live-boot, live-build, live-config, live-tools and live-manual packages.

_* *{Debian Live system}*: A live system that uses software from the Debian
operating system that may be booted from CDs, DVDs, USB sticks, over the
network (via netboot images), and over the Internet (via boot parameter
#{fetch=URL}#).

_* *{Host system}*: The environment used to create the live system.

_* *{Target system}*: The environment used to run the live system.

_* *{live-boot}*: A collection of scripts used to boot live systems.

_* *{live-build}*: A collection of scripts used to build customized Debian
Live systems.

_* *{live-config}*: A collection of scripts used to configure a live system
during the boot process.

_* *{live-tools}*: A collection of additional scripts used to perform useful
tasks within a running live system.

_* *{live-manual}*: This document is maintained in a package called
live-manual.

_* *{Debian Installer (d-i)}*: The official installation system for the
Debian distribution.

_* *{Boot parameters}*: Parameters that can be entered at the bootloader
prompt to influence the kernel or live-config.

_* *{chroot}*: The /{chroot}/ program, #{chroot(8)}#, enables us to run
different instances of the GNU/Linux environment on a single system
simultaneously without rebooting.

_* *{Binary image}*: A file containing the live system, such as binary.iso
or binary.img.

_* *{Target distribution}*: The distribution upon which your live system
will be based. This can differ from the distribution of your host system.

_* *{stable/testing/unstable}*: The *{stable}* distribution contains the
latest officially released distribution of Debian. The *{testing}*
distribution is the staging area for the next *{stable}* release. A major
advantage of using this distribution is that it has more recent versions of
software relative to the *{stable}* release. The *{unstable}* distribution
is where active development of Debian occurs. Generally, this distribution
is run by developers and those who like to live on the edge. Throughout the
manual, we tend to use codenames for the releases, such as wheezy or sid, as
that is what is supported by the tools themselves.

2~ Autoren

Liste der Autoren (in alphabetischer Reihenfolge):

_* Ben Armstrong

_* Brendan Sleight

_* Carlos Zuferri

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~how-to-contribute Contributing to this document

This manual is intended as a community project and all proposals for
improvements and contributions are extremely welcome. Please see the section
{Contributing to the project}#contributing-to-project for detailed
information on how to fetch the commit key and make good commits.

3~ Applying changes

In order to make changes to the English manual you have to edit the right
files in #{manual/en/}# but prior to the submission of your contribution,
please preview your work. To preview the live-manual, ensure the packages
needed for building it are installed by executing:

code{

 # apt-get install make po4a ruby ruby-nokogiri sisu-complete texlive-generic-recommended

}code

You may build the live-manual from the top level directory of your Git
checkout by executing:

code{

 $ make build

}code

Since it takes a while to build the manual in all supported languages, you
may find it convenient when proofing to build for only one language, e.g. by
executing:

code{

 $ make build LANGUAGES=en

}code

It is also possible to build by document type, e.g:

code{

 $ make build FORMATS=pdf

}code

Or combine both, e.g:

code{

 $ make build LANGUAGES=de FORMATS=html

}code

After revising your work and making sure that everything is fine, do not use
#{make commit}# unless you are updating translations in the commit, and in
that case, do not mix changes to the English manual and translations in the
same commit, but use separate commits for each. See the
{Translation}#translation section for more details.

3~translation Translation

To start a translation for a new language, follow these steps:

_* Translate the *{about_manual.ssi.pot}*, *{about_project.ssi.pot}* and
*{index.html.in.pot}* files to your language with your favourite editor
(such as /{poedit}/). Send the translated #{.po}# files to the mailing list
so that the translation team can check their integrity.

_* To enable a new language in the autobuild it is enough to add the initial
translated files to #{manual/po/${LANGUAGE}/}# and run #{make commit}#. And
then edit #{manual/_sisu/home/index.html}#.

_* Once the new language is added, you can randomly continue translating the
remaining po files in #{manual/po/}#.

_* Don't forget that you need #{make commit}# to ensure the translated
manuals are updated from the po files and then you can review your changes
launching #{make build}# before #{git add .}#, #{git commit -m
"Translating..."}# and #{git push}#.

After running #{make commit}# you will see some text scroll by. These are
basically informative messages about the processing status and also some
hints about what can be done in order to improve live-manual. Unless you see
a fatal error, you usually can proceed and submit your contribution.

live-manual comes with two utilities that can greatly help translators to
find untranslated and changed strings. The first one is "make translate". It
launches an script that tells you in detail how many untranslated strings
there are in each po file. The second one, the "make fixfuzzy" target, only
acts upon changed strings but it helps you to find and fix them one by one.

Keep in mind that even though these utilities might be really helpful to do
translation work on the command like, the use of an specialized tool like
/{poedit}/ is the recommended way to do the task. It is also a good idea to
read the Debian localization (l10n) documentation and, specifically to
live-manual, the {Guidelines for translators}#guidelines-translators.

*{Note:}* You can use #{make clean}# to clean your git tree before pushing. This step is not compulsory thanks to the .gitignore file but it is a good practice to avoid committing files involuntarily.
