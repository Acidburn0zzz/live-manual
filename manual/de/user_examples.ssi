:B~ Beispiele

1~examples Examples

This chapter covers example builds for specific use cases with Debian
Live. If you are new to building your own Debian Live images, we recommend
you first look at the three tutorials in sequence, as each one teaches new
techniques that will help you use and understand the remaining examples.

2~using-the-examples Using the examples

To use these examples you need a system to build them on that meets the
requirements listed in {Requirements}#requirements and has live-build
installed as described in {Installing live-build}#installing-live-build.

Note that, for the sake of brevity, in these examples we do not specify a
local mirror to use for the build. You can speed up downloads considerably
if you use a local mirror. You may specify the options when you use #{lb
config}#, as described in {Distribution mirrors used at build
time}#distribution-mirrors-build-time, or for more convenience, set the
default for your build system in #{/etc/live/build.conf}#. Simply create
this file and in it, set the corresponding #{LB_MIRROR_*}# variables to your
preferred mirror. All other mirrors used in the build will be defaulted from
these values. For example:

code{

 LB_MIRROR_BOOTSTRAP="http://mirror/debian"
 LB_MIRROR_CHROOT_SECURITY="http://mirror/debian-security"
 LB_MIRROR_CHROOT_BACKPORTS="http://mirror/debian-updates"

}code

2~tutorial-1 Tutorial 1: A standard image

*{Use case:}* Create a simple first image, learning the basics of live-build.

In this tutorial, we will build a default ISO hybrid Debian Live image
containing only base packages (no Xorg) and some Debian Live support
packages, as a first exercise in using live-build.

You can't get much simpler than this:

code{

 $ mkdir tutorial1 ; cd tutorial1 ; lb config

}code

Examine the contents of the #{config/}# directory if you wish. You will see
stored here a skeletal configuration, ready to customize or, in this case,
use immediately to build a default image.

Now, as superuser, build the image, saving a log as you build with #{tee}#.

code{

 # lb build 2>&1 | tee build.log

}code

Assuming all goes well, after a while, the current directory will contain
#{binary.hybrid.iso}#. This ISO hybrid image can be booted directly in a
virtual machine as described in {Testing an ISO image with
Qemu}#testing-iso-with-qemu and {Testing an ISO image with
virtualbox-ose}#testing-iso-with-virtualbox, or else imaged onto optical
media or a USB flash device as described in {Burning an ISO image to a
physical medium}#burning-iso-image and {Copying an ISO hybrid image to a USB
stick}#copying-iso-hybrid-to-usb, respectively.

2~tutorial-2 Tutorial 2: A web browser utility

*{Use case:}* Create a web browser utility image, learning how to apply customizations.

In this tutorial, we will create an image suitable for use as a web browser
utility, serving as an introduction to customizing Debian Live images.

code{

 $ mkdir tutorial2
 $ cd tutorial2
 $ lb config -p lxde
 $ echo iceweasel >> config/package-lists/my.list.chroot

}code

Our choice of LXDE for this example reflects our desire to provide a minimal
desktop environment, since the focus of the image is the single use we have
in mind, the web browser. We could go even further and provide a default
configuration for the web browser in
#{config/includes.chroot/etc/iceweasel/profile/}#, or additional support
packages for viewing various kinds of web content, but we leave this as an
exercise for the reader.

Build the image, again as superuser, keeping a log as in {Tutorial
1}#tutorial-1:

code{

 # lb build 2>&1 | tee build.log

}code

Again, verify the image is OK and test, as in {Tutorial 1}#tutorial-1.

2~tutorial-3 Tutorial 3: A personalized image

*{Use case:}* Create a project to build a personalized image, containing your favourite software to take with you on a USB stick wherever you go, and evolving in successive revisions as your needs and preferences change.

Since we will be changing our personalized image over a number of revisions,
and we want to track those changes, trying things experimentally and
possibly reverting them if things don't work out, we will keep our
configuration in the popular #{git}# version control system. We will also
use the best practice of autoconfiguration via #{auto}# scripts as described
in {Managing a configuration}#managing-a-configuration.

3~ First revision

code{

 $ mkdir -p tutorial3/auto
 $ cp /usr/share/doc/live-build/examples/auto/* tutorial3/auto/
 $ cd tutorial3

}code

Edit #{auto/config}# to read as follows:

code{

 #!/bin/sh

 lb config noauto \
     --architectures i386 \
     --linux-flavours 686-pae \
     --package-lists lxde \
     "${@}"

}code

Perform #{lb config}# to generate the config tree, using the #{auto/config}#
script you just created:

code{

 $ lb config

}code

Now populate your local package list:

code{

 $ echo "iceweasel xchat" >> config/package-lists/my.list.chroot

}code

First, #{--architectures i386}# ensures that on our #{amd64}# build system,
we build a 32-bit version suitable for use on most machines. Second, we use
#{--linux-flavours 686-pae}# because we don't anticipate using this image on
much older systems. Third, we've chosen the /{lxde}/ package list to give us
a minimal desktop. And finally, we have added two initial favourite
packages: /{iceweasel}/ and /{xchat}/.

Now, build the image:

code{

 # lb build

}code

Note that unlike in the first two tutorials, we no longer have to type
#{2>&1 | tee build.log}# as that is now included in #{auto/build}#.

Once you've tested the image (as in {Tutorial 1}#tutorial-1) and are
satisfied it works, it's time to initialize our #{git}# repository, adding
only the auto scripts we just created, and then make the first commit:

code{

 $ git init
 $ git add auto
 $ git commit -a -m "Initial import."

}code

3~ Second revision

In this revision, we're going to clean up from the first build, add the
/{vlc}/ package to our configuration, rebuild, test and commit.

The #{lb clean}# command will clean up all generated files from the previous
build except for the cache, which saves having to re-download packages. This
ensures that the subsequent #{lb build}# will re-run all stages to
regenerate the files from our new configuration.

code{

 # lb clean

}code

Now append the /{vlc}/ package to our local package list in
#{config/package-lists/my.list.chroot}#:

code{

 $ echo vlc >> config/package-lists/my.list.chroot

}code

Build again:

code{

# lb build

}code

Test, and when you're satisfied, commit the next revision:

code{

 $ git commit -a -m "Adding vlc media player."

}code

Of course, more complicated changes to the configuration are possible,
perhaps adding files in subdirectories of #{config/}#. When you commit new
revisions, just take care not to hand edit or commit the top-level files in
#{config}# containing #{LB_*}# variables, as these are build products, too,
and are always cleaned up by #{lb clean}# and re-created with #{lb config}#
via their respective #{auto}# scripts.

We've come to the end of our tutorial series. While many more kinds of
customization are possible, even just using the few features explored in
these simple examples, an almost infinite variety of different images can be
created. The remaining examples in this section cover several other use
cases drawn from the collected experiences of users of Debian Live.

2~ A VNC Kiosk Client

*{Use case:}* Create an image with live-build to boot directly to a VNC server.

Make a build directory and create a skeletal configuration in it built
around the standard-x11 list, including /{gdm3}/, /{metacity}/ and
/{xvnc4viewer}/, disabling recommends to make a minimal system:

code{

 $ mkdir vnc_kiosk_client
 $ cd vnc_kiosk_client
 $ lb config -a i386 -k 686-pae -p standard-x11 \
     --apt-recommends false
 $ echo "gdm3 metacity xvnc4viewer" >> config/package-lists/my.list.chroot

}code

Create the directory #{/etc/skel}# and put a custom #{.xsession}# in it for
the default user that will launch /{metacity}/ and start /{xvncviewer}/,
connecting to port #{5901}# on a server at #{192.168.1.2}#:

code{

 $ mkdir -p config/includes.chroot/etc/skel
 $ cat > config/includes.chroot/etc/skel/.xsession << END
 #!/bin/sh

 /usr/bin/metacity &
 /usr/bin/xvncviewer 192.168.1.2:1

 exit
 END

}code

Build the image:

code{

 # lb build

}code

Enjoy.

2~ A base image for a 128M USB key

*{Use case:}* Create a standard image with some components removed in order to fit on a 128M USB key with space left over to use as you see fit.

When optimizing an image to fit a certain media size, you need to understand
the tradeoffs you are making between size and functionality. In this
example, we trim only so much as to make room for additional material within
a 128M media size, but without doing anything to destroy integrity of the
packages contained within, such as the purging of locale data via the
/{localepurge}/ package, or other such "intrusive" optimizations. Of
particular note, you should not use #{--bootstrap-flavour minimal}# unless
you really know what you're doing, as omitting priority *{important}*
packages will most likely produce a broken live system.

code{

 $ lb config -k 486 -p minimal --apt-indices false \
     --memtest none --apt-recommends false --includes none

}code

Now, build the image in the usual way:

code{

 # lb build 2>&1 | tee build.log

}code

On the author's system at time of writing, the above configuration produced
a 78Mbyte image. This compares favourably with the 166Mbyte image produced
by the default configuration in {Tutorial 1}#tutorial-1.

The biggest space-saver here, compared to building a standard image on an
#{i386}# architecture system, is to select only the #{486}# kernel flavour
instead of the default #{-k "486 686-pae"}#. Leaving off APT's indices with
#{--apt-indices false}# also saves a fair amount of space, the tradeoff
being that you need to #{apt-get update}# before using apt in the live
system. Choosing the #{minimal}# package list leaves out the large
#{locales}# package and associated utilities. Dropping recommended packages
with #{--apt-recommends false}# saves some additional space, at the expense
of omitting some packages you might otherwise expect to be there, such as
/{firmware-linux-free}/ which may be needed to support certain hardware. The
remaining options shave off additional small amounts of space. It's up to
you to decide if the functionality that is sacrificed with each optimization
is worth the loss in functionality.

2~ A localized KDE desktop and installer

*{Use case:}* Create a KDE desktop image, localized for Brazilian Portuguese and including an installer.

We want to make an iso-hybrid image for i386 architecture using our
preferred desktop, in this case KDE, containing all of the same packages
that would be installed by the standard Debian installer for KDE.

Our initial problem is the discovery of the names of the appropriate
language tasks. Currently, live-build cannot help with this. While we might
get lucky and find this by trial-and-error, there is a tool, #{grep-dctrl}#,
which can be used to dig it out of the task descriptions in tasksel-data, so
to prepare, make sure you have both of those things:

code{

 # apt-get install dctrl-tools tasksel-data

}code

Now we can search for the appropriate tasks, first with:

code{

 $ grep-dctrl -FTest-lang pt_BR /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: brazilian-portuguese

}code

By this command, we discover the task is called, plainly enough,
brazilian-portuguese. Now to find the related tasks:

code{

 $ grep-dctrl -FEnhances brazilian-portuguese /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: brazilian-portuguese-desktop
 Task: brazilian-portuguese-kde-desktop

}code

At boot time we will generate the pt_BR.UTF-8 locale and select the
pt-latin1 keyboard layout. We will also need to preseed our desktop choice,
"kde" so that tasksel will install the correct desktop task, as it differs
from the default (see {Desktop and languages
tasks}#desktop-and-language-tasks). Now let's put the pieces together:

code{

 $ mkdir live-pt_BR-kde
 $ cd live-pt_BR-kde
 $ lb config \
     -a i386 \
     -k 486 \
     --bootappend-live "locales=pt_BR.UTF-8 keyboard-layouts=pt-latin1" \
     --debian-installer live
 $ echo kde-desktop brazilian-portuguese brazilian-portuguese-desktop \
     brazilian-portuguese-kde-desktop >> config/task-lists/my.list.chroot
 $ echo debian-installer-launcher >> config/package-lists/my.list.chroot
 $ echo tasksel tasksel/desktop multiselect kde >> config/preseed/my.preseed.chroot

}code

Note that we have included the debian-installer-launcher package to launch
the installer from the live desktop, and have also specified the 486 flavour
kernel, as it is currently necessary to make the installer and live system
kernels match for the launcher to work properly.
