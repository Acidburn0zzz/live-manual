:B~ Przykłady

1~examples Przykłady

This chapter covers example builds for specific use cases with live
systems. If you are new to building your own live system images, we
recommend you first look at the three tutorials in sequence, as each one
teaches new techniques that will help you use and understand the remaining
examples.

2~using-the-examples Używanie przykładów

To use these examples you need a system to build them on that meets the
requirements listed in {Requirements}#requirements and has live-build
installed as described in {Installing live-build}#installing-live-build.

Note that, for the sake of brevity, in these examples we do not specify a
local mirror to use for the build. You can speed up downloads considerably
if you use a local mirror. You may specify the options when you use #{lb
config}#, as described in {Distribution mirrors used at build
time}#distribution-mirrors-build-time, or for more convenience, set the
default for your build system in #{/etc/live/build.conf}#. Simply create
this file and in it, set the corresponding #{LB_MIRROR_*}# variables to your
preferred mirror. All other mirrors used in the build will be defaulted from
these values. For example:

code{

 LB_MIRROR_BOOTSTRAP="http://mirror/debian/"
 LB_MIRROR_CHROOT_SECURITY="http://mirror/debian-security/"
 LB_MIRROR_CHROOT_BACKPORTS="http://mirror/debian-backports/"

}code

2~tutorial-1 Samouczek 1: Domyślny obraz

*{Przykład użycia:}* Stwórz pierwszy prosty obraz aby nauczyć się podstaw live-build.

In this tutorial, we will build a default ISO hybrid live system image
containing only base packages (no Xorg) and some live system support
packages, as a first exercise in using live-build.

Nie można tego zrobić łatwiej niż tak:

code{

 $ mkdir samouczek1 ; cd samouczek1 ; lb init ; lb config

}code

Examine the contents of the #{config/}# directory if you wish. You will see
stored here a skeletal configuration, ready to customize or, in this case,
use immediately to build a default image.

A teraz jako super-użytkownik, zbuduj obraz zapisując przy tym log podczas
budowania używając #{tee}#.

code{

 # lb build 2>&1 | tee build.log

}code

Assuming all goes well, after a while, the current directory will contain
#{binary.hybrid.iso}#. This ISO hybrid image can be booted directly in a
virtual machine as described in {Testing an ISO image with
Qemu}#testing-iso-with-qemu and {Testing an ISO image with
VirtualBox}#testing-iso-with-virtualbox, or else imaged onto optical media
or a USB flash device as described in {Burning an ISO image to a physical
medium}#burning-iso-image and {Copying an ISO hybrid image to a USB
stick}#copying-iso-hybrid-to-usb, respectively.

2~tutorial-2 Samouczek 2: Narzędzie przeglądarka

*{Przykład użycia:}* Stwórz obraz z przeglądarką internetową, ucząc się jak wprowadzać modyfikacje.

In this tutorial, we will create an image suitable for use as a web browser
utility, serving as an introduction to customizing live system images.

code{

 $ mkdir samouczek2
 $ cd samouczek2
 $ echo "task-lxde-desktop iceweasel" >> config/package-lists/my.list.chroot

}code

Our choice of LXDE for this example reflects our desire to provide a minimal
desktop environment, since the focus of the image is the single use we have
in mind, the web browser. We could go even further and provide a default
configuration for the web browser in
#{config/includes.chroot/etc/iceweasel/profile/}#, or additional support
packages for viewing various kinds of web content, but we leave this as an
exercise for the reader.

Zbuduj ponownie obraz jako super-użytkownik, zachowując log jak to opisano w
{Samouczku 1}#tutorial-1:

code{

 # lb build 2>&1 | tee build.log

}code

Jeszcze raz, zweryfikuj czy obraz jest OK i przetestuj go jak to opisano w
{Samouczku 1}#tutorial-1.

2~tutorial-3 Samouczek 3: Spersonalizowany obraz

*{Przykład użycia:}* Stwórz projekt spersonalizowanego obrazu zawierającego twoje ulubione oprogramowanie tak abyś mógł go zabrać ze sobą gdziekolwiek pójdziesz i zapisujący sukcesywnie zmiany, kiedy tego potrzebujesz oraz zmiany w konfiguracji.

Since we will be changing our personalized image over a number of revisions,
and we want to track those changes, trying things experimentally and
possibly reverting them if things don't work out, we will keep our
configuration in the popular #{git}# version control system. We will also
use the best practice of autoconfiguration via #{auto}# scripts as described
in {Managing a configuration}#managing-a-configuration.

3~ Pierwsza zmiana

code{

 $ mkdir -p samouczek3/auto
 $ cp /usr/share/doc/live-build/examples/auto/* samouczek3/auto/
 $ cd samouczek3

}code

Edtuj #{auto/config}# tak, aby zawierał:

code{

 #!/bin/sh

 lb config noauto \
     --architectures i386 \
     --linux-flavours 686-pae \
     "${@}"

}code

Wykonaj #{lb config}# aby wygenerować drzewo konfiguracyjne, używając
właśnie utworzonego skryptu w #{auto/config}#:

code{

 $ lb config

}code

Teraz uzupełnij swoją lokalną listę pakietów:

code{

 $ echo "task-lxde-desktop iceweasel xchat" >> config/package-lists/my.list.chroot

}code

First, #{--architectures i386}# ensures that on our #{amd64}# build system,
we build a 32-bit version suitable for use on most machines. Second, we use
#{--linux-flavours 686-pae}# because we don't anticipate using this image on
much older systems. Third, we have chosen the /{lxde}/ task metapackage to
give us a minimal desktop. And finally, we have added two initial favourite
packages: /{iceweasel}/ and /{xchat}/.

A teraz, zbuduj obraz:

code{

 # lb build

}code

Należy zauważyć, że w przeciwieństwie do dwóch pierwszych samouczków, nie
musimy już wpisywać #{2>&1 | tee build.log}# bo jest to obecnie zawarte w
#{auto/build}#.

Po tym jak przetestowaliśmy obraz (jak to jest w {Samouczku 1}#tutorial-1) i
jesteśmy zadowoleni, że działa, to jest to czas, aby zainicjować nasze
repozytorium #{git}#, dodając tylko automatyczne skrypty przed chwilą
stworzone, a następnie dokonać pierwszych zmian:

code{

 $ git init
 $ cp /usr/share/doc/live-build/examples/gitignore .gitignore
 $ git add .
 $ git commit -m "Initial import."

}code

3~ Druga zmiana

W tej zmianie, będziemy sprzątać nasz pierwszy zbudowany obrazu, dodawać
pakiet /{vlc}/ do naszej konfiguracji, budować ponownie, testować i
potwierdzać zmiany.

Polecenie #{lb clean}# oczyści wszystkie wygenerowane pliki z poprzedniej
kompilacji z wyjątkiem pamięci podręcznej (cache), co oszczędza konieczności
ponownego pobierania pakietów. To gwarantuje, że kolejne polecenie #{lb
build}# ponownie uruchomić wszystkie etapy regeneracji pliki z naszej nowej
konfiguracji.

code{

 # lb clean

}code

Teraz dołączpakiet  /{vlc}/ do naszej lokalnej listy pakietów w
#{config/package-list/my.list.chroot}#:

code{

 $ echo vlc >> config/package-lists/my.list.chroot

}code

Zbuduj ponownie:

code{

# lb build

}code

Przetestuj i jeżeli jesteś usatysfakcjonowany wprowadź następną zmianę:

code{

 $ git commit -a -m "Adding vlc media player."

}code

Oczywiście, możliwe są bardziej skomplikowane zmiany w konfiguracji,
prawdopodobnie dodające pliki w podkatalogach #{config/}#. Kiedy wprowadzasz
nowe zmiany , tylko uważaj, aby nie edytować ręcznie lub zmieniać plików
najwyższego poziomu w #{config}# zawierających zmienną #{LB_*}#, ponieważ są
to także efekty budowania i są zawsze sprzątane przez #{lb clean}# i
tworzone ponownie przez #{lb config}# przez odpowiednie #{automatyczne}#
skrypty.

Doszliśmy do końca naszej serii samouczka. Chociaż możliwe jest o wiele
więcej rodzajów personalizacji, nawet tylko za pomocą kilku funkcji
pokazanych w tych prostych przykładach, może być stworzona niemal
nieskończona różnorodność obrazów. Pozostałe przykłady w tym rozdziale
obejmuje kilka innych przypadków użycia zaczerpnięte z zebranych doświadczeń
użytkowników systemów live.

2~ Kiosk-klient serwera VNC

*{Przykład użycia:}* Stwórz obraz za pomocą live-build, który podczas uruchamiania, łączy się automatycznie z serwerem VNC.

Make a build directory and create an skeletal configuration inside it,
disabling recommends to make a minimal system. And then create two initial
package lists: the first one generated with a script provided by live-build
named #{Packages}# (see {Generated package lists}#generated-package-lists),
and the second one including /{xorg}/, /{gdm3}/, /{metacity}/ and
/{xvnc4viewer}/.

code{

$ mkdir vnc-kiosk-client
 $ cd vnc-kiosk-client
 $ lb init
 $ lb config -a i386 -k 686-pae --apt-recommends false
 $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot
 $ echo "xorg gdm3 metacity xvnc4viewer" > config/package-lists/my.list.chroot

}code

As explained in {Tweaking APT to save space}#tweaking-apt-to-save-space you
may need to re-add some recommended packages to make your image work
properly.

Najprostszym sposobem na wypisane listy rekomendowanych pakietów jest u
życie /{apt-cache}/. Na przykład:

code{

 $ apt-cache depends live-config live-boot

}code

In this example we found out that we had to re-include several packages
recommended by live-config and live-boot: #{user-setup}# to make autologin
work and #{sudo}# as an essential program to shutdown the system. Besides,
it could be handy to add #{live-tools}# to be able to copy the image to RAM
and #{eject}# to eventually eject the live medium. So:

code{

 $ echo "live-tools user-setup sudo eject" > config/package-lists/recommends.list.chroot

}code

After that, create the directory #{/etc/skel}# in #{config/includes.chroot}#
and put a custom #{.xsession}# in it for the default user that will launch
/{metacity}/ and start /{xvncviewer}/, connecting to port #{5901}# on a
server at #{192.168.1.2}#:

code{

 $ mkdir -p config/includes.chroot/etc/skel
 $ cat > config/includes.chroot/etc/skel/.xsession << EOF
 #!/bin/sh

 /usr/bin/metacity &
 /usr/bin/xvncviewer 192.168.1.2:1

 exit
 EOF

}code

Zbuduj obraz:

code{

 # lb build

}code

Korzystaj.

2~Bazowy obraz dla nośnika USB z 128MB pamięci.

*{Przykład użycia:}*  Stwórz domyślny obraz z usuniętymi niektórymi komponentami tak, aby zmieścił się on na nośniku USB z 128MB pamięci z pozostawieniem niewielkiej przestrzeni do wykorzystania według potrzeb.

When optimizing an image to fit a certain media size, you need to understand
the tradeoffs you are making between size and functionality. In this
example, we trim only so much as to make room for additional material within
a 128MB media size, but without doing anything to destroy the integrity of
the packages contained within, such as the purging of locale data via the
/{localepurge}/ package, or other such "intrusive" optimizations. Of
particular note, we use #{--debootstrap-options}# to create a minimal system
from scratch.

code{

 $ lb init
 $ lb config -k 486 --apt-indices false --apt-recommends false --debootstrap-options "--variant=minbase" --firmware-chroot false --memtest none

}code

To make the image work properly, we must re-add, at least, two recommended
packages which are left out by the #{--apt-recommends false}# option. See
{Tweaking APT to save space}#tweaking-apt-to-save-space

code{

 $ echo "user-setup sudo" > config/package-lists/recommends.list.chroot

}code

Teraz, zbuduj obraz w typowy sposób:

code{

 # lb build 2>&1 | tee build.log

}code

On the author's system at the time of writing this, the above configuration
produced a 77MB image. This compares favourably with the 177MB image
produced by the default configuration in {Tutorial 1}#tutorial-1.

The biggest space-saver here, compared to building a default image on an
#{i386}# architecture system, is to select only the #{486}# kernel flavour
instead of the default #{-k "486 686-pae"}#. Leaving off APT's indices with
#{--apt-indices false}# also saves a fair amount of space, the tradeoff
being that you need to do an #{apt-get update}# before using /{apt}/ in the
live system. Dropping recommended packages with #{--apt-recommends false}#
saves some additional space, at the expense of omitting some packages you
might otherwise expect to be there. #{--debootstrap-options
"--variant=minbase"}# bootstraps a minimal system from the start. Not
automatically including firmware packages with #{--firmware-chroot false}#
saves some space too. And finally, #{--memtest none}# prevents the
installation of a memory tester.

*{Note:}* A minimal system can also be achieved using hooks, like for example the #{stripped.hook.chroot}# hook found in #{/usr/share/doc/live-build/examples/hooks}#. It may shave off additional small amounts of space and produce an image of 62MB. However, it does so by removal of documentation and other files from packages installed on the system. This violates the integrity of those packages and that, as the comment header warns, may have unforeseen consequences. That is why using a minimal /{debootstrap}/ is the recommended way of achieving this goal.

2~ Pulpit GNOME w lokalnym języku oraz instalator

*{Przykład użycia:}* Stwórz obraz z pulpitem GNOME i lokalizacją dla Szwajcarii wraz z instalatorem.

Chcemy stworzyć obraz ISO-hybrydy dla architektury i386 z naszym
preferowanym pulpitem, w tym przypadku GNOME, zawierającą wszystkie pakiety,
które byłyby zainstalowane przez standardowy instalator Debiana dla GNOME.

Naszym początkowym problem jest odkrycie nazw odpowiednich zadań
językowych. Obecnie, live-build nie może nam w tym pomóc. Chociaż możemy
mieć szczęście i znaleźć to metodą prób i błędów, to jest narzędzie,
#{grep-dctrl}#, które może być użyte do ustalenia to z opisów zadań w
tasksel-data tak więc, aby przygotować się upewnij się, że masz obie te
rzeczy:

code{

 # apt-get install dctrl-tools tasksel-data

}code

Teraz możemy rozpocząć wyszukiwanie odpowiedniego zadania. najpierw:

code{

 $ grep-dctrl -FTest-lang de /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: german

}code

Dzięki temu poleceniu dowiadujemy się, że zadanie nazywa się po prostu
german (niemiecki). Teraz aby znaleźć podobne zadania:

code{

 $ grep-dctrl -FEnhances german /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: german-desktop
 Task: german-kde-desktop

}code

W czasie startu systemu będziemy generować lokalizację *{de_CH.UTF-8}* i
wybierać układ klawiatury *{ch}*. Teraz poskładajmy kawałki
razem. Przypominamy sobie  {Korzystanie z metapakietów}#using-metapackages
że metapakiety są poprzedzone przedrostkiem #{task-}#, po prostu określimy
te parametry rozruchowe dotyczące języka, a następnie dodamy standardowe
pakiety priorytetowe i wszystkie wykryte metapakiety zadań do naszej listy
pakietów w następujący sposób:

code{

$ mkdir live-gnome-ch
 $ cd live-gnome-ch
 $ lb init
 $ lb config \
     -a i386 \
     -k 486 \
     --bootappend-live "boot=live components locales=de_CH.UTF-8 keyboard-layouts=ch" \
     --debian-installer live
 $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot
 $ echo task-gnome-desktop task-german task-german-desktop >> config/package-lists/desktop.list.chroot
 $ echo debian-installer-launcher >> config/package-lists/installer.list.chroot

}code

Należy pamiętać, że mamy załączony pakiet debian-installer-launcher, aby
uruchomić instalator z pulpitu live, a także wybraną architekturę 486 jądra
kernela, jak to jest obecnie konieczne, aby instalator i jądro systemu live
zgadzały się aby instalator działał prawidłowo.
