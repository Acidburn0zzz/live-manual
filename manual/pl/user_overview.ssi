:B~ Przegląd narzędzi

1~overview-of-tools Przegląd narzędzi

Ten rozdział zawiera przegląd trzech głównych narzędzi stosowanych w budowie
systemów live: live-build, live-boot i live-config.

2~live-build Pakiet live-build

Iive-build to zbiór skryptów do budowania systemów live. Skrypty te są
również określane jako "polecenia".

The idea behind live-build is to be a framework that uses a configuration
directory to completely automate and customize all aspects of building a
Live image.

Wiele pojęć jest podobnych do tych używanych do budowania pakietów Debiana z
użyciem /{debhelper}/'a:

_* The scripts have a central location for configuring their operation. In
/{debhelper}/, this is the #{debian/}# subdirectory of a package tree. For
example, dh_install will look, among others, for a file called
#{debian/install}# to determine which files should exist in a particular
binary package. In much the same way, live-build stores its configuration
entirely under a #{config/}# subdirectory.

_* Skrypty są niezależne - to znaczy, że zawsze jest bezpieczne uruchomienie
poszczególnych poleceń.

Unlike /{debhelper}/, live-build provides the tools to generate a skeleton
configuration directory. This could be considered to be similar to tools
such as /{dh-make}/. For more information about these tools, read on, since
the remainder of this section discuses the four most important
commands. Note that the preceding #{lb}# is a generic wrapper for live-build
commands.

_* *{lb init}*: Responsible for initializing a Live system configuration
directory. See {The lb init command}#lb-init for more information.

_* *{lb config}*: Responsible for applying a configuration on top of an
already initialized configuration directory. See {The lb config
command}#lb-config for more information.

_* *{lb build}*: Responsible for starting a Live system build. See {The lb
build command}#lb-build for more information.

_* *{lb clean}*: Odpowiedzialny za czyszczenie kompilacji systemu
live. Zobacz {Polecenie lb clean}#lb-clean aby uzyskać więcej informacji.

3~lb-init Polecenie #{lb init}#

As discussed in {live-build}#live-build, the scripts that make up live-build
read their configuration with the #{source}# command from a single directory
named #{config/}#. As constructing this directory by hand would be
time-consuming and error-prone, the #{lb init}# command can be used to
create the initial skeleton configuration tree.

The #{lb init}# command creates the following directories inside
#{config/}#: #{hooks/}#, #{includes/}#, several other includes
subdirectories for each stage of the build process and
#{package-lists/}#. The latter includes a list of several important live
packages like live-boot, live-config and live-config-sysvinit.

3~lb-config Polecenie #{lb config}#

Issuing #{lb config}# without any arguments completes the #{config/}#
subdirectory which it populates with some default settings in configuration
files, and two skeleton trees named #{auto/}# and #{local/}#.

code{

 $ lb config
 [2014-04-25 17:14:34] lb config
 P: Updating config tree for a debian/wheezy/i386 system

}code

Using #{lb config}# without any arguments would be suitable for users who
need a very basic image, or who intend to provide a more complete
configuration via #{auto/config}# later (see {Managing a
configuration}#managing-a-configuration for details).

Normalnie, pewnie będziesz chciał określić niektóre opcje. Na przykład, aby
określić, którą dystrybucję chcesz zbudować użyj jej nazwy kodowej:

code{

 $ lb config --distribution sid

}code

Jest możliwe ustalenie wielu opcji, takich jak:

code{

 $ lb config --binary-images netboot --bootappend-live "boot=live components hostname=live-host username=live-user" ...

}code

Pełna lista opcji dostępna jest w podręczniku man pakietu #{lb_config}#.

3~lb-build Polecenie #{lb build}#

Polecenie #{lb build}# czyta konfigurację z katalogu #{config/}#. A
następnie uruchamia polecenia niższego poziomu potrzebne do budowy Twojego
systemu live.

3~lb-clean Polecenie #{lb clean}#

Zadaniem polecenia #{lb clean}#, jest to aby usunąć różne części kompilacji
tak aby można było zacząć od czystego stanu. Domyślnie etapy #{chroot}#,
#{binary}# and #{source}# są sprzątane, ale cache pozostaje
nienaruszone. Ponadto, tylko poszczególne etapy mogą być oczyszcane. Na
przykład, jeśli zostały wprowadzone zmiany, które wpływają tylko na etap
binarny, należy użyć #{lb clean --binary}# przed budowaniem nowych plików
binarnych. Jeśli zmiany unieważniają proces bootstrap i/lub zmieniają cache
pakietów, np. po zmianie opcji #{--mode}#, #{--architecture}#, lub
#{--bootstrap}#, trzeba użyć  #{lb clean --purge}#. Zobacz podręcznik man
pakietu #{lb_clean}# aby uzyskać listę wszystkich opcji.

2~live-boot Pakiet live-boot

live-boot to zbiór skryptów zapewniających haki do /{initramfs-tools}/,
wykorzystywane do wytwarzania plików initramfs, które są w stanie uruchomić
system live, takich jak te stworzone przez live-build. Obejmuje to obrazy
ISO systemów live, archiwa netboot i obrazów dysku USB.

W czasie rozruchu będzie szukać nośników tylko do odczytu zawierających
katalog #{/live/}#, gdzie jest przechowywany system plików (często
skompresowany obraz systemu plików jak SquashFS). Jeśli znajdzie takowy,
stworzy zapisywalne środowisko, stosując aufs, dla systemów takich jak
Debian, aby z niego wystartować.

Więcej informacji na temat początkowych plików ramfs w Debianie można
znaleźć w Podręczniku Debiana Linux Kernel na
http://kernel-handbook.alioth.debian.org/ w rozdziale initramfs.

2~live-config Pakiet live-config

live-config zawiera skrypty, które są uruchamiane przy starcie systemu live
po live-boot, tak aby automatycznie skonfigurować system live. Obsługuje on
takie zadania jak ustawienie nazwy hosta, lokalizacji i strefy czasowej,
tworzenie użytkownika live, zatrzymywanie zadań crona i autologowanie
użytkownika live.
