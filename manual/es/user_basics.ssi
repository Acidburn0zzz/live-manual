:B~ Conceptos básicos

1~the-basics Conceptos básicos

This chapter contains a brief overview of the build process and instructions
for using the three most commonly used image types. The most versatile image
type, #{iso-hybrid}#, may be used on a virtual machine, optical media or USB
portable storage device. In certain special cases, as explained later, the
#{hdd}# type may be more suitable. The chapter finishes with instructions
for building and using a #{netboot}# type image, which is a bit more
involved due to the setup required on the server. This is an slightly
advanced topic for anyone who is not familiar already with netbooting, but
it is included here because once the setup is done, it is a very convenient
way to test and deploy images for booting on the local network without the
hassle of dealing with image media.

Throughout the chapter, we will often refer to the default filenames
produced by live-build. If you are {downloading a prebuilt
image}#downloading-prebuilt-images instead, the actual filenames may vary.

2~what-is-live ¿Qué es un sistema en vivo?

Por lo general, un sistema en vivo se refiere a un sistema operativo que
arranca en un equipo desde un medio extraíble, como un CD-ROM, dispositivo
USB, o desde una red, listo para usar sin ningún tipo de instalación en la
unidad de costumbre, con configuración automática en tiempo de ejecución
(Ver {Términos}#terms).

Debian Live, es un sistema Debian GNU/Linux, creado para una de las
arquitecturas soportadas (actualmente amd64 y i386). Se compone de las
siguientes partes:

_* *{Imágen del kernel de Linux}*, normalmente llamada #{vmlinuz*}#

_* *{Imagen del Disco RAM inicial (initrd)}*: Un Disco RAM configurado para
el arranque de Linux, que incluya los módulos posiblemente necesarios para
montar la imagen del sistema y algunos scripts para ponerlo en marcha.

_* *{Imagen del sistema}*: La imagen del sistema de ficheros raíz. Por lo
general, se utiliza un sistema de ficheros comprimido SquashFS para reducir
al mínimo el tamaño de la imagen de Debian Live. Hay que tener en cuenta que
es de sólo lectura. Por lo tanto, durante el arranque del sistema Debian
Live se utiliza un disco RAM y un mecanismo de «unión» que permite escribir
ficheros en el sistema en funcionamiento. Sin embargo, todas las
modificaciones se perderán al apagar el equipo a menos que se use de modo
opcional la persistencia (ver {Persistencia}#persistence).

_* *{Gestor de arranque}*: Una pequeña pieza de código diseñada para
arrancar desde el medio de almacenamiento escogido, posiblemente mostrando
un menú o un indicador de arranque para permitir la selección de
opciones/configuración. Carga el kernel de Linux y su initrd para funcionar
con un sistema de ficheros asociado. Se pueden usar soluciones diferentes,
dependiendo del medio de almacenamiento de destino y el formato del sistema
de ficheros que contenga los componentes mencionados anteriormente: isolinux
para arrancar desde un CD o DVD en formato ISO9660, syslinux para arrancar
desde el disco duro o unidad USB desde una partición VFAT, extlinux para
formatos ext2/3/4 y particiones btrfs, pxelinux para arranque de red PXE,
GRUB para particiones ext2/3/4 , etc.

Se puede usar live-build  para crear la imagen del sistema a partir de
ciertas especificaciones, incluir un kernel de Linux, su initrd y un gestor
de arranque para ponerlos en funcionamiento, todo ello en un formato que
depende del medio de almacenamiento elegido (imagen ISO9660, imagen de
disco, etc.)

2~downloading-prebuilt-images Downloading prebuilt images

While the focus of this manual is developing and building your own live
images, you may simply wish to try one of our prebuilt images, either as an
introduction to their use or instead of building your own. These images are
built using our {live-images git repository}#clone-configuration-via-git and
official stable releases are published at http://www.debian.org/CD/live/. In
addition, older and upcoming releases, and unofficial images containing
non-free firmware and drivers are available at
http://live.debian.net/cdimage/release/.

2~using-web-builder Using the web live image builder

As a service to the community, we run a web-based live image builder service
at http://live-build.debian.net/. This site is maintained on a best effort
basis. That is, although we strive to keep it up-to-date and operational at
all times, and do issue notices for significant operational outages, we
cannot guarantee 100% availability or fast image building, and the service
may occasionally have issues that take some time to resolve. If you have
problems or questions about the service, please {contact us}#contact,
providing us with the link to your build.

3~ Web builder usage and caveats

The web interface currently makes no provision to prevent the use of invalid
combinations of options, and in particular, where changing an option would
normally (i.e. using live-build directly) change defaults of other options
listed in the web form, the web builder does not change these defaults. Most
notably, if you change #{--architectures}# from the default #{i386}# to
#{amd64}#, you must change the corresponding option #{--linux-flavours}#
from the default #{486}# to #{amd64}#. See the #{lb_config}# man page for
the version of live-build installed on the web builder for more details. The
version number of live-build is listed at the bottom of the web builder
page.

The time estimate given by the web builder is a crude estimate only and may
not reflect how long your build actually takes. Nor is the estimate updated
once it is displayed. Please be patient. Do not refresh the page you land on
after submitting the build, as this will resubmit a new build with the same
parameters. You should {contact us}#contact if you don't receive
notification of your build only once you are certain you've waited long
enough and verified the notification e-mail did not get caught by your own
e-mail spam filter.

The web builder is limited in the kinds of images it can build. This keeps
it simple and efficient to use and maintain. If you would like to make
customizations that are not provided for by the web interface, the rest of
this manual explains how to build your own images using live-build.

2~building-iso-hybrid Primeros pasos: creación de una imagen ISO híbrida

Independientemente del tipo de imagen, cada vez se tendrá que realizar los
mismos pasos básicos para construir una imagen. Como primer ejemplo, crear
un directorio de trabajo, cambiar a ese directorio y ejecutar la siguiente
secuencia de comandos live-build para crear una imagen ISO híbrida básica
que contiene sólo el sistema por defecto de Debian sin X.org. Es adecuada
para grabarla en un CD o DVD y también para copiarla en un dispositivo USB. 

El nombre del directorio de trabajo es indiferente, pero si se da un vistazo
a los ejemplos utilizados en live-manual, es una buena idea utilizar un
nombre que ayude a identificar la imagen con la que está trabajando en cada
directorio, especialmente si se está trabajando o experimentando con
distintos tipos de imágenes. En este caso, vamos a construir un sistema
utilizando los valores por defecto, así que lo vamos a llamar, por ejemplo,
live-default.

code{

 $ mkdir live-default && cd live-default

}code

Entonces, se ejecuta el comando #{lb config}#. Esto creará una jerarquía
«config/» en el directorio actual que será usada por otros comandos:

code{

 $ lb config

}code

Al no pasar ningún parámetro a #{lb config}#, se indica que se quiere
utilizar todas las opciones por defecto. Ver{El comando lb config}#lb-config
para más detalles.

Ahora que existe un jerarquía «config/», se puede crear la imagen con el
comando #{lb build}#:

code{

 # lb build

}code

This process can take a while, depending on the speed of your computer and
your network connection. When it is complete, there should be a
#{binary.hybrid.iso}# image file, ready to use, in the current directory.

2~using-iso-hybrid Usar una imagen ISO híbrida

Después de construir o descargar una imagen ISO híbrida, las cuales se
pueden obtener en http://www.debian.org/CD/live/,  el siguiente paso
habitual es preparar los medios de almacenamieto, ya sean medios ópticos
CD-R(W) o DVD-R(W) o llaves USB.

3~burning-iso-image Grabar una imagen ISO en un medio físico.

Grabar una imagen ISO es fácil. Simplemente instalar xorriso y usarlo desde
el intérprete de comandos para grabar la imagen. Por ejemplo: 

code{

 # apt-get install xorriso

 $ xorriso -as cdrecord -v dev=/dev/sr0 blank=as_needed binary.hybrid.iso

}code

3~copying-iso-hybrid-to-usb Copiar una imagen ISO híbrida a un dispositivo
USB

Las imágenes ISO preparadas con #{xorriso}#, pueden sencillamente copiarse a
una llave USB con #{dd}# o con un programa  equivalente. Insertar una llave
USB con un tamaño suficiente para la imagen y determinar qué dispositivo es,
al cual nos referiremos de ahora en adelante como #{${USBSTICK}}#. Este
nombre de «dispositivo» se refiere a la llave entera como por ejemplo
#{/dev/sdb}# y ¡No a una partición como #{/dev/sdb1}#! Se puede encontrar el
nombre del dispositivo correcto mirando la salida de #{dmesg}# después de
conectar la llave, o mejor aún ejecutando #{ls -l /dev/disk/by-id}#.

Cuando se esté seguro de tener el nombre del dispositivo correcto, usar el
comando #{dd}# para copiar la imagen a la llave. *{¡Esto borrará de forma
definitiva cualquier contenido previo en la llave!}*

code{

 $ dd if=binary.hybrid.iso of=${USBSTICK}

}code

3~using-usb-extra-space Usar el espacio libre en el dispositivo USB

Si se desea usar el espacio libre después de haber instalado la imagen
#{binary.hybrid.iso}# en una llave USB, se puede usar un programa de
particionado como /{gparted}/ o /{parted}/ para crear una partición nueva en
el dispositivo. La primera partición será usada por el sistema Debian en
vivo.

code{

 # gparted ${USBSTICK}

}code

Después de crear la partición, dónde #{${PARTITION}}# es el nombre de la
partición, por ejemplo #{/dev/sdb2}# se tiene que crear un sistema de
ficheros en él. Una opción posible sería ext4.

code{

 # mkfs.ext4 ${PARTITION}

}code

*{Nota:}* Si se desea usar el espacio extra con Windows, segun parece, ese sistema operativo no puede acceder normalmente a otra partición más que a la primera. Se han comentado algunas soluciones a este problema en nuestra {lista de correo}#contact pero según parece no hay una solución fácil.

*{Recordar: Cada vez que se instale una nueva binary.hybrid.iso en el dispositivo, todos los datos del dispositivo se perderán debido a que la tabla de particiones se sobrescribe con el contenido de la imagen, así pues, realizar primero una copia de seguridad de la partición para poder restaurarla trás actualizar la imagen en vivo.}*

3~booting-live-media Arrancar los medios en vivo

La primera vez que se arranque desde los medios de almacenamiento en vivo,
ya sea CD, DVD, llave USB, o de arranque en red PXE, primero puede ser
necesario algún tipo de configuración en la BIOS de la máquina. Dado que las
BIOS varían mucho en sus características y combinaciones de teclas, no se
puede entrar en el tema en profundidad aquí. Algunas BIOS proporcionan una
tecla para abrir un menú de dispositivos de arranque que es la manera más
fácil de hacerlo si se encuentra disponible en el sistema.

Una vez que se haya arrancado desde los medios de almacenamiento externos,
se accede a un menú de arranque. Si se pulsa la tecla «enter»,  el sistema
arrancará usando el modo por defecto #{Live}# y las opciones
predeterminadas. Para obtener más información acerca de las opciones de
arranque, ver la opción  «help» del menú y también las páginas del manual de
live-boot y live-config que se encuentran en el sistema en vivo.

Assuming you've selected #{Live}# and booted a default desktop live image,
after the boot messages scroll by, you should be automatically logged into
the #{user}# account and see a desktop, ready to use. If you have booted a
console-only image, such as #{standard}# or #{rescue}# flavour {prebuilt
images}#downloading-prebuilt-images, you should be automatically logged in
on the console to the #{user}# account and see a shell prompt, ready to use.

2~using-virtual-machine Usar una máquina virtual para pruebas

Ejecutar las imágenes en vivo en una máquina virtual (VM) puede ser un gran
ahorro de tiempo para su desarrollo. Esto no está exento de advertencias:

_* Para ejecutar una máquina virtual se requiere tener suficiente memoria
RAM para el sistema operativo huésped y el anfitrión y se recomienda una CPU
con soporte de hardware para la virtualización.

_* Existen algunas limitaciones inherentes a la ejecución en una máquina
virtual, por ejemplo, rendimiento de video pobre o limitada gama de hardware
emulado.

_* Cuando se desarrolla para un hardware específico, no hay sustituto mejor
que el propio hardware.

_* A veces hay errores causados únicamente por la ejecución en una máquina
virtual. En caso de duda, probar la imagen directamente en el hardware.

Siempre que se pueda trabajar dentro de estas limitaciones, mirar que
software VM hay disponible y elegir uno que sea adecuado según las
necesidades.

3~testing-iso-with-qemu Probar una imagen ISO con QEMU

La máquina virtual más versátil en Debian es QEMU. Si el procesador tiene
soporte de hardware para virtualización, utilizar el paquete
/{qemu-kvm}/. En la descripción del paquete /{qemu-kvm}/ se enumera
brevemente la lista de requisitos.

En primer lugar, instalar #{qemu-kvm}# si el procesador lo soporta. Si no es
así, instalar #{qemu}#, en cuyo caso el nombre del programa será #{qemu}# en
vez de #{kvm}# en los siguientes ejemplos. El paquete /{qemu-utils}/ también
es útil para la creación de imágenes virtuales de disco con #{qemu-img}#.

code{

 # apt-get install qemu-kvm qemu-utils

}code

Arrancar una imagen ISO es sencillo:

code{

 $ kvm -cdrom binary.hybrid.iso

}code

Consultar las páginas del manual para más detalles.

3~testing-iso-with-virtualbox  Probar una imagen ISO con virtualbox

Para probar una imagen ISO con /{virtualbox}/:

code{

 # apt-get install virtualbox virtualbox-qt virtualbox-dkms

 $ virtualbox

}code

Crear una nueva máquina virtual, cambiar la configuración de almacenamiento
para utilizar #{binary.hybrid.iso}# como dispositivo CD/DVD y arrancar la
máquina.

*{Nota:}* Para probar los sistemas en vivo con soporte X.org en /{virtualbox}/, se puede incluir el paquete del driver de VirtualBox X.org, /{virtualbox-guest-dkms/ y /{virtualbox-guest-x11}/, en la configuración de live-build. De lo contrario, la resolución se limita a 800x600.

code{

 $ echo "virtualbox-guest-dkms virtualbox-guest-x11" >> config/package-lists/my.list.chroot

}code

In order to make the dkms package work, also the kernel headers for the
kernel flavour used in your image need to be installed. Instead of manually
listing the correct /{linux-headers}/ package in above created package list,
the selection of the right package can be done automatically by live-build.

code{

  $ lb config --linux-packages "linux-image linux-header"

}code

2~using-hdd-image Construir y utilizar una imágen HDD

Crear una imagen HDD es similar a una de tipo ISO híbrida en todos los
aspectos, con la diferencia de que hay que especificar #{-b hdd}# y de que
el nombre de la imagen final es #{binary.img}# que no se puede copiar en
medios ópticos. Es adecuada para el arranque desde dispositivos USB, discos
duros USB y otros sistemas de almacenamiento portátil. Normalmente, se puede
utilizar para este propósito una imagen ISO híbrida, pero es posible que la
BIOS no maneje adecuadamente las imágenes híbridas, entonces es mejor
utilizar una imagen hdd.

*{Nota:}* si se ha creado una imagen ISO híbrida con el ejemplo anterior, se tendrá que limpiar el directorio de trabajo con el comando #{lb clean}# (ver {El comando lb clean}#lb-clean):

code{

 # lb clean --binary

}code

Ejecutar el comando #{lb config}# como antes pero esta vez especificando el
tipo de imagen HDD:

code{

 $ lb config -b hdd

}code

Crear ahora la imagen con el comando #{lb build}#:

code{

 # lb build

}code

Cuando termine el proceso de creación, debe haber un fichero llamado
#{binary.img}# en el directorio actual .

La imagen binaria generada contiene una partición VFAT y el gestor de
arranque syslinux, lista para ser copiada directamente en un dispositivo
USB. De nuevo, dado que utilizar una imagen HDD es igual a usar una imagen
ISO híbrida en un USB, seguir las instrucciones de {Usar una imagen ISO
híbrida}#using-iso-hybrid con la diferencia de usar el nombre #{binary.img}#
en lugar de #{binary.hybrid.iso}#.

Del mismo modo, para probar una imagen HDD con Qemu, instalar /{qemu}/ como
se describe más arriba en {Probar una imágen ISO con
QEMU}#testing-iso-with-qemu. A continuación, ejecutar #{kvm}# o #{qemu}#,
según qué versión necesita el sistema anfitrión y especificando
#{binary.img}# como primer disco duro.

code{

 $ kvm -hda binary.img

}code

2~building-netboot-image Creación de una imagen de arranque en red

La siguiente secuencia de comandos creará una imagen de arranque en red
básica que contendrá el sistema por defecto de Debian sin X.org. Se puede
usar para el arranque en red.

*{Nota:}* si se ha seguido algúno de los ejemplos anteriores, se tendrá que limpiar el directorio de trabajo con el comando #{lb clean}#:

code{

 # lb clean

}code

In this specific case, a #{lb clean --binary}# would be not enough to clean
up the necessary stages. The cause for this is that in netboot setups, a
different initramfs configuration needs to be used which live-build
performes automatically when building netboot images. Since the initramfs
creation belongs to the chroot stage, switching to netboot in an existing
build directory means to rebuild the chroot stage too. Therefore, #{lb
clean}# (which will remove the chroot stage, too) needs to be used.

Ejecutar el comando #{lb config}# de la siguiente manera para configurar la
imagen de arranque en red:

code{

 $ lb config -b netboot --net-root-path "/srv/debian-live" --net-root-server "192.168.0.1"

}code

In contrast with the ISO and HDD images, netbooting does not, itself, serve
the filesystem image to the client, so the files must be served via
NFS. Different network filesystems can be chosen through lb config. The
#{--net-root-path}# and #{--net-root-server}# options specify the location
and server, respectively, of the NFS server where the filesytem image will
be located at boot time. Make sure these are set to suitable values for your
network and server.

Crear ahora la imagen con el comando #{lb build}#:

code{

 # lb build

}code

En un arranque en red, el cliente ejecuta una pequeña pieza de software que
generalmente se encuentra en la EPROM de la tarjeta Ethernet. Este programa
envía una solicitud de DHCP para obtener una dirección IP e información
sobre qué hacer a continuación. Por lo general, el siguiente paso es
conseguir un gestor de arranque de alto nivel a través del protocolo
TFTP. Este gestor podría ser PXELINUX, GRUB, o incluso arrancar directamente
un sistema operativo como Linux.

For example, if you unpack the generated #{binary.netboot.tar}# archive in
the #{/srv/debian-live}# directory, you'll find the filesystem image in
#{live/filesystem.squashfs}# and the kernel, initrd and pxelinux bootloader
in #{tftpboot/debian-live/i386}#.

Ahora se debe configurar tres servicios en el servidor para que arranque en
red: el servidor DHCP, el servidor TFTP y el servidor NFS.

3~ Servidor DHCP

Hay que configurar el servidor DHCP de red para asegurar que proporciona una
dirección IP al cliente, y para anunciar la ubicación del gestor de arranque
PXE.

He aquí un ejemplo que puede servir de inspiración. Fue escrito para el
servidor ISC DHCP #{isc-dhcp-server}# en su fichero de configuración
#{/etc/dhcp/dhcpd.conf}#:

code{

 # /etc/dhcp/dhcpd.conf - fichero de configuración para isc-dhcp-server

 ddns-update-style none;

 option domain-name "example.org";
 option domain-name-servers ns1.example.org, ns2.example.org;

 default-lease-time 600;
 max-lease-time 7200;

 log-facility local7;

 subnet 192.168.0.0 netmask 255.255.255.0 {
   range 192.168.0.1 192.168.0.254;
   next-server servername;
   filename "pxelinux.0";
}

}code

3~ Servidor TFTP

Se encarga de suministrar el kernel y el Disco RAM inicial para el sistema.

Se debe instalar el paquete /{tftpd-hpa}/. Este servidor podrá suministrar
todos los ficheros contenidos de un directorio raíz, normalmente
#{/srv/tftp}#. Para permitirle que pueda servir los ficheros de
#{/srv/debian-live/tftpboot}#, se debe ejecutar el siguiente comando con
privilegios de superusuario:

code{

 # dpkg-reconfigure -plow tftpd-hpa

}code

y escribir el directorio del nuevo servidor tftp cuando sea requerido.

3~ Servidor NFS 

Una vez el equipo cliente ha descargado y arrancado el kernel de Linux junto
a su initrd, intentará montar el sistema de archivos de la imagen en vivo a
través de un servidor NFS.

Se debe instalar el paquete /{nfs-kernel-server}/.

Entonces, se debe hacer que la imagen del sistema de archivos esté
disponible a través de NFS añadiendo una línea como la siguiente para
#{/etc/exports}#:

code{

 /srv/debian-live *(ro,async,no_root_squash,no_subtree_check)

}code

e informar al servidor NFS sobre esta nueva exportación con el siguiente
comando:

code{

 # exportfs -rv

}code

La configuración de estos tres servicios puede ser un poco difícil. Será
necesario un poco de paciencia para conseguir que todos ellos funcionen
juntos. Para obtener más información, ver el wiki de syslinux en
http://www.syslinux.org/wiki/index.php/PXELINUX o la sección sobre TFTP Net
Booting del Manual del Instalador de Debian en
http://d-i.alioth.debian.org/manual/en.i386/ch04s05.html Esto puede ser
útil, ya que sus procesos son muy similares.

3~ Cómo probar el arranque en red

Netboot image creation is made easy with live-build, but testing the images
on physical machines can be really time consuming.

Para hacer nuestra vida más fácil, se puede utilizar la virtualización. Hay
dos soluciones.

3~ Qemu

_* Instalar /{qemu}/, /{bridge-utils}/, /{sudo}/.

Se debe editar el fichero #{/etc/qemu-ifup}#:

code{

 #!/bin/sh
 sudo -p "Password for $0:" /sbin/ifconfig $1 172.20.0.1
 echo "Executing /etc/qemu-ifup"
 echo "Bringing up $1 for bridged mode..."
 sudo /sbin/ifconfig $1 0.0.0.0 promisc up
 echo "Adding $1 to br0..."
 sudo /usr/sbin/brctl addif br0 $1
 sleep 2

}code

Obtener o crear un #{grub-floppy-netboot}#.

Lanzar #{qemu}# con "#{-net nic,vlan=0 -net tap,vlan=0,ifname=tun0}#"
