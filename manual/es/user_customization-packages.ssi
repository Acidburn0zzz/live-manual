:B~ Personalización de la instalación de paquetes

1~customizing-package-installation Personalización de la instalación de
paquetes

Quizas, la tarea más básica de personalizacion en Debian Live es la
selección de paquetes que serán incluidos en la imagen. Este capítulo
orienta a través de las diferentes opciones de live-build que, en el momento
de la creación de la imagen, personalizan la instalación de paquetes. Las
opciones que seleccionan la distribucion base y las areas de archivo Debian
a utilizar son las que más influyen a la hora de conocer que paquetes
estarán disponibles para su instalación en la imagen. Para asegurar una
buena velocidad de descarga de paquetes, se debería elegir el repositorio
Debian más cercano. Se pueden añadir repositorios para paquetes backports,
experimentales, paquetes personalizados o incluir ficheros de paquetes
directamente. Se pueden definir listas de paquetes a incluir personalizadas,
utilizar listas predefinidas en live-build, seleccionar tareas de
#{tasksel}# o una combinación de los tres métodos. Por último existen varias
opciones que dan algún control sobre cuando son instalados los paquetes por
la herramienta apt o la herramienta aptitude, según sea la elegida. Estas
opciones pueden ser útiles si se utiliza un proxy, se quiere desactivar la
instalación de paquetes recomendados para ahorrar espacio o se necesita
controlar las versiones de los paquetes a instalar mediante APT pinning, por
nombrar algunas posibilidades.

2~ Origen de los paquetes

3~ Distribución, areas de archivo y modo

La distribución seleccionada tiene gran impacto en qué paquetes están
disponibles para incluir en la imagen. Se debe indicar el nombre en clave de
la distribución, que por defecto es #{squeeze}# para la versión Squeeze de
live-build. Se puede especificar cualquier nombre de distribución disponible
en los repositorios Debian indicando su nombre en clave. (Para más detalles
ver {Terminos}#terms). La opcion #{--distribution}# no solamente influencia
la fuente de los paquetes dentro del archivo Debian, sino que instruye a
#{live-build}# a comportarse tal y como se necesita para construir cada una
de las distribuciones. Por ejemplo, para construir contra la versión
*inestable*, Sid, se debe indicar: 

code{

 $ lb config --distribution sid

}code

Las areas de archivo Debian son la principal división de paquetes dentro de
una distribución dada. En Debian las areas de archivo establecidas son
#{main}#, #{contrib}# y #{non-free}#. Solamente los paquetes contenidos en
#{main}# son parte oficial de la distribución Debian. Esta es el area
definida por defecto en live-build. Se pueden indicar uno o más valores tal
y como se muestra en el siguiente ejemplo:

code{

 $ lb config --archive-areas "main contrib"

}code

Experimentalmente hay soporte para alguna distribución derivada de Debian
mediante la opción #{--mode}#. Por defecto, esta opción toma el valor de
#{debian}# incluso si live-build se está ejecutando en un sistema no
Debian. Si se especifica #{--mode ubuntu}# o #{--mode emdebian}# se
utilizará el nombre de la distribución y las areas de archivos específicas
de la distribución derivada en lugar de los propios de Debian y live-build
modificará su comportamiento para adecuarlo al modo seleccionado.

*Nota:* El soporte de las distribuciones utilizadas con estos modos son responsabilidad de los desarrolladores de dichas distribuciones. El proyecto Debian Live soporta su creación de la mejor manera posible, basándose en la información recogida de dichas distribuciones derivadas a pesar de que no desarrolla ni da soporte a las mismas.

3~ Réplicas de Distribución Debian

Los repositorios de Debian están replicados en una gran red alrededor del
mundo, de manera que se puede seleccionar la réplica más cercana con el fin
de obtener la mejor velocidad de descarga. Cada una de las opciones
#{--mirror-*}# gobierna que réplica de repositorio Debian se utiliza en las
diferentes etapas de creación. Si se recuerda de {Etapas de la
creación}#stages-of-the-build, en la etapa de *preinstalación (bootstrap)*
es cuando se crea el directorio chroot y se rellena con un sistema mínimo
mediante  la herramienta debootstrap, y en la etapa *chroot* es cuando el
directorio chroot es completado con los paquetes necesarios para crear el
sistema de ficheros que será utilizado en el sistema en vivo. A cada una de
estas etapas le corresponde su propia opción #{--mirror-*}#. Posteriormente,
en la etapa *binary* se utilizarán las réplicas Debian indicadas en los
valores de las opciones #{--mirror-binary}# y #{--mirror-binary-security}#
en lugar de utilizar los indicados para las etapas anteriores.

3~distribution-mirrors-build-time Réplicas de Distribution utilizadas
durante la creación

Para indicar que réplicas deben ser utilizadas en el momento de crear la
imágen es suficiente con utilizar las opciones #{--mirror-bootstrap}# y
#{--mirror-chroot-security}# como se muestra a continuación.

code{

 $ lb config --mirror-bootstrap http://localhost/debian/ \
             --mirror-chroot-security http://localhost/debian-security/

}code

El valor indicado en #{--mirror-chroot}# es utilizado como valor por defecto
para la opción #{--mirror-bootstrap}# si esta no es indicada.

3~ Réplicas de distribución Debian utilizadas en la ejecución.

Las opciones #{--mirror-binary*}# gobiernan las réplicas configuradas en la
imagen binaria que serán utilizadas para instalar paquetes adicionales
mientras se ejecuta el sistema en vivo. Por defecto se utiliza
#{cdn.debian.net}#, que es un servicio que selecciona la réplica más cercana
basándose en el número de IP. Es una elección bastante acertada siempre que
no se pueda predecir que réplica será la mejor para todos los
usuarios. También se puede especificar valores personalizados como se
muestra en el siguiente ejemplo. Una imágen construida con esta
configuración solamente sería accesible a los usuarios de una red donde
"#{mirror}#" fuese alcanzable.

code{

 $ lb config --mirror-binary http://mirror/debian/ \
             --mirror-binary-security http://mirror/debian-security/

}code

3~additional-repositories Repositorios adicionales

Se pueden añadir más repositorios, ampliando la lista de paquetes
seleccionables más alla de aquellos disponibles para la distribución
indicada, como pueden ser paquetes de backport, paquetes experimentales o
personalizados. Para configurar repositorios adicionales se debe crear los
ficheros #{config/chroot_sources/your-repository.chroot}#, y/o
#{config/chroot_sources/your-repository.binary}#. Al igual que en las
opciones #{--mirror-*}#, estos ficheros gobiernan los repositorios
utilizados en las etapa *chroot* y *binary* respectivamente, esto es, los
repositorios que serán utilizados cuando se ejecute el sistema en vivo.

Por ejemplo, #{config/chroot_sources/live.chroot}# permite instalar paquetes
del repositorio Debian Live Snapshot en el momento de crear la imagen.

code{

 deb http://live.debian.net/ sid-snapshots main contrib non-free

}code

Si se añade la misma línea a #{config/chroot_sources/live.binary}#, el
repositorio será añadido al directorio #{/etc/apt/sources.list.d/}# del
sistema en vivo.

Estos ficheros serán utilizados automáticamente si existen.

Se debería también incluir en el fichero
#{config/chroot_sources/your-repository.{binary,chroot}.gpg}# la clave GPG a
utilizar para firmar dicho repositorio.

Nota: Existen algunos repositorios de paquetes ya preconfigurados para
facilitar la selección mediante la opción #{--repository}#. Por ejemplo,
para utilizar los repositorios de  Live Snapshots, sería suficiente con
activarlo mediante:

code{

 $ lb config --repository live.debian.net

}code

2~choosing-packages-to-install Selección de los paquetes a instalar

Hay varias maneras de seleccionar qué paquetes serán instalados por
live-build en la imagen que cubren una variedad de necesidades diversas. Se
puede nombrar un paquete individual para que sea instalado o se pueden
nombrar unos pocos paquetes mediante la opción #{--packages}#, o incluso se
puede indicar un gran número de paquetes mediante una lista. También se
puede seleccionar listas de paquetes predefinidos o incluso utilizar tareas
de APT. Por último, también se pueden utilizar ficheros de paquetes de test
o experimentales obtenidos antes de que aparezcan en los repositorios
oficiales simplemente depositando estos ficheros directamente en el árbol de
directorios #{config/}#.

3~ Selección de unos pocos paquetes

Cuando el número de paquetes a añadir es pequeño pueden indicarse mediante
la opción #{--pauqetes}#. Por ejemplo:

code{

 $ lb config --packages "package1 package2 package3"

}code

El comportamiento de live-build cuando se especifica un paquete que no
existe es determinado por lo que se haya configurado en la utilidad
APT. Para más detalles ver {Seleccionar apt o
aptitude}#choosing-apt-or-aptitude .

Si se necesita especificar un gran número de paquetes o se necesita cierta
flexibilidad a la hora de indicar que paquetes se necesitan instalar se
puede utilizar las listas de paquetes tal y como se indica en la sección,
{Listas de paquetes}#package-lists.

3~package-lists Listas de paquetes

Las listas de paquetes proporcionan una potente forma de expresar qué
paquetes deberían ser instalados. La sintaxis de la lista soporta la
inclusión de ficheros y secciones condicionales, que facilitan la creación
de listas a partir de otras listas, adaptando su utilización a diversas
configuraciones. También pueden utilizarse listas de paquetes predefinidas,
dando una manera modular a la selección de paquetes para cada uno de los
diferentes entornos de escritorios y algunas listas de propósito especial
basadas en otras listas de propósito general. Puede utilizarse listas
propias o una combinación de listas propias y listas predefinidas.

3~ Listas de paquetes predefinidas

La forma más simple de utilizar listas de paquetes es especificar una o más
listas predefinidas mediante la opción #{--packages-lists}#, por ejemplo:

code{

 $ lb config --packages-lists "gnome-core rescue"

}code

Además de estas listas, live-build soporta cuatro listas de paquetes
virtuales, #{gnome-desktop}#, #{kde-desktop}#, #{lxde-desktop}# y
#{xfce-desktop}#, cada una de las cuales provee una selección de paquetes
extensiva que corresponde con los valores por defecto del Instalador de
Debian para estos entornos de escritorio. Para más información ver {Tareas
de Escritorio e Idioma}#desktop-and-language-tasks .

Nota: Existen imágenes listas para su descarga con los escritorios GNOME,
KDE, LXDE y XFCE en http://live.debian.net. Estas imágenes han sido creadas
utilizando la lista virtual #{*-desktop}# correspondiente.

La ubicación por defecto de los ficheros de lista en el sistema huesped es
#{/usr/share/live/build/lists/}#. Para determinar qué paquetes componen una
lista dada se debe leer el correspondiente fichero poniendo atención en los
ficheros incluidos y en las secciones condicionales como se describen a
continuación.

3~ Listas de paquetes locales

Se pueden añadir o reemplazar completamente las listas predefinidas
depositando listas de paquetes locales en el directorio
#{config/chroot_local-packageslists/}#.

Para que sean procesadas, las listas de paquetes que existan en dicho
directorio deben tener la extensión #{.list}#. Las listas de paquetes
locales se superponen a las listas predefinidas por live-build. Esto puede
causar efectos no deseados de manera que se recomienda utilizar nombres
únicos para las listas de paquetes locales, que no coincidan con los nombres
de listas de paquetes predefinidas.

3~ Listas de paquetes locales para binary

En caso de que se desee incluir algún paquete .deb en el directorio
#{pool/}# del medio de instalación sin instalarlo en la imágen del sistema
en vivo se pueden utilizar las listas de paquetes locales para binary
depositando dichas listas en el directoro
#{config/binary_local-packageslists/}#, de manera que el medio de
instalación pueda ser utilizado como un medio de instalación personalizado
para instalaciones sin red local (modo offline).

Para que sean procesadas, las listas de paquetes que se depositen en este
directorio deben tener la extensión #{.list}#.

3~ Extensión de una lista de paquetes dada mediante «includes»

Las listas de paquetes predefinidas en live-build hacen un uso intensivo de
las directiva «include». Los ficheros existentes en el directorio
#{/usr/share/live/build/lists/}# pueden servir como buen ejemplo de como
escribir listas de paquetes.

Por ejemplo, para hacer una lista de paquetes que incluya la lista de
paquetes predefinida #{gnome}# y añadir el paquete iceweasel se puede crear
un fichero llamado #{config/chroot_local-packageslists/mygnome.list}# con el
siguiente contenido:

code{

 #include <gnome>
 iceweasel

}code

3~ Utilización de condiciones dentro de las listas de paquetes

En las sentencias condicionales de las listas de paquetes pueden utilizarse
cualquier variable disponible en #{config/*}# (excepto las que tienen el
prefijo #{LB_}#). En general esto significa que puede utilizarse cualquier
opción válida para #{lb config}# cambiando las letras minúsculas por
mayúsculas y los guiones por subrayados. En la práctica solamente tiene
sentido utilizar aquellas variables relacionadas con la selección de
paquetes, como pueden ser #{DISTRIBUTION}#, #{ARCHITECTURE}# o
#{ARCHIVE_AREAS}#.

Por ejemplo, para instalar el paquete #{ia32-libs}# si se ha especificado la
arquitectura amd64 (#{--architecture amd64}#) se puede utilizar:

code{

 #if ARCHITECTURE amd64
 ia32-libs
 #endif

}code

En la expresión condicional pueden utilizarse varios valores. Por ejemplo
para instalar el paquete #{memtest86+}# si la arquitecturaes i386
(#{--architecture i386}#) o es amd64 (#{--architecture amd64}#) se puede
especificar:

code{

 #if ARCHITECTURE i386 amd64
 memtest86+
 #endif

}code

En la expresión condicional también pueden utilizarse variables que pueden
contener más de un valor. Por ejemplo para instalar #{vrms}# si se utilizan
las areas de archivo #{contrib}# o #{non-free}# mediante la opción
#{--archive-areas}# se puede indicar:

code{

 #if ARCHIVE_AREAS contrib non-free
 vrms
 #endif

}code

Es habitual que una condición incluya una directiva «include»:

code{

 #if ARCHITECTURE amd64
 #include <gnome-full>
 #endif

}code

No se permite el anidamiento de estructuras condicionales.

3~ Tareas

El Instalador de Debian ofrece al usuario un conjunto de opciones con una
lista de paquetes preseleccionada enfocadas a configurar un tipo de sistema
o configurar el sistema para realizar una tarea como puede ser "Entorno de
escritorio gráfico", "Servidor de correo", "Portátil", etc. Estas listas son
llamadas "tareas" y son soportadas por APT mediante el campo "Task:". Se
puede especificar a live-build que seleccione estas tareas mediante la
opción #{--task}# tal y como se muestra en el siguiente ejemplo:

code{

 $ lb config --tasks "mail-server file-server"

}code

Una vez ha sido arrancado el sistema en vivo puede conocerse que tareas
primarias están disponibles en el Instalador de Debian mediante la orden
#{tasksel --list-tasks}#. La lista de paquetes contenidos en cualquier tarea
(incluidas aquiellas que no aparecen en la lista de tareas primarias) puede
obtenerse mediante la orden #{tasksel --task-packages}#.

3~desktop-and-language-tasks Tareas de Escritorio e Idioma

Las tareas de escritorio y de idioma son casos especiales. Si el medio de
instalación fue preparado para una clase particular de entorno de
escritorio, el Instalador de Debian instalará automáticamente la tarea de
entorno de escritorio correspondiente. Para ello existen las tareas
#{gnome-desktop}#, #{kde-desktop}#, #{lxde-desktop}# y #{xfce-desktop}# pero
ninguna de ellas son presentadas en el menú de #{tasksel}#. De igual forma,
las tareas para idiomas tampoco son presentadas en el menú de #{tasksel}#,
pero la selección del idioma, al inicio de la instalación repercute la
selección de la correspondiente tarea de idioma.

En live-build estos casos especiales también son tratados de manera
especial, pero en el momento de escribir este manual, hay tres notables
diferencias.

Primero, no se ha previsto, todavía, la instalación automática de tareas de
idiomas, aunque se incluye un subconjunto de estos paquetes si se especifica
un idioma mediante #{lb config --language}#. Se puede especificar en la
configuración de live-build la utilización de estas tareas, que incluyen
cosas específicas del idioma, como pueden ser paquetes tipos de letra y
métodos de introducción. Por ejemplo:

code{

 $ lb config --tasks "japanese japanese-desktop japanese-gnome-desktop"

}code

Segundo, live-build soporta la lista de paquetes virtuales #{*-desktop}#
para cada clase de escritorio mencionado anteriormente. Esto seleccionará la
lista de paquetes predefinida #{standard-x11}#, la correspondiente tarea de
escritorio #{*-desktop}#  y tres tareas adicionales #{desktop}#,
#{standard}# y #{laptop}#. Así, por ejemplo, si se especifica
#{--packages-lists gnome-desktop}#, será equivalente a especificar
#{--packages debian-installer-launcher --packages-lists standard-x11 --tasks
"gnome-desktop desktop standard laptop"}#.

Tercero, si se selecciona cualquier tarea de escritorio, explicitamente a
través de #{--tasks}# o implicitamente mediante #{--packages-lists}#,
live-build preconfigurará (preseed) en el Instalador de Debian (si es
incluido) el escritorio correspondiente para asegurar que sigue sus propias
reglas cuando sea instalado.

*{Nota:}* Existe también la opción experimental #{--language}# cuyo propósito se solapa con las tareas de idioma. Se instalarán los paquetes de soporte #{*-l10n}# siempre que existan y que se especifique un idioma mediante la opción #{--language}#. Además, si existe, se utilizará, en lugar de las plantillas por defecto en ingles, cualquier plantilla para #{syslinux}# del  idioma indicado mediante esta opción. La selección de paquetes realizada mediante la opción #{--language}# es una pobre aproximación a las tareas de idiomas. Las tareas de idiomas son un método más completo y flexible que la utilización de la opción #{--language}# que requiere que la lista de paquetes a incluir por idioma sea mantenida internamente en live-build. Sin embargo el tratamiento de las plantillas de #{syslinux}# es útil. Por esto, si se utiliza la opción #{--bootloader syslinux}# y plantillas para un idioma existente en #{/usr/share/live/build/templates/syslinux/}# o #{config/templates/syslinux/}#, esta opción es un punto a tener en cuenta, posiblemente en combinación con las tareas de idiomas para asegurar la instalación de los paquetes adecuados. Por ejemplo:

code{

 $ lb config --language es

}code

Esta opción solamente soporta un idioma y un gestor de arranque. Por todas
estas razones, el futuro de esta opción está bajo revisión y posiblemente
será reemplazada por algo completamente diferente en la proxima revisión
general de live-build.

2~installing-modified-or-third-party-packages Instalación de paquetes
personalizados o paquetes de terceros

Si bien está encontra de la filosofía de Debian Live, en ocasiones es
necesario crear un sistema en vivo con versiones de paquetes modificados a
partir de los disponibles en el repositorio de Debian. Estos paquetes pueden
modificar características existentes o dar soporte a características
adicionales, idiomas y derivados (branding), o eliminar elementos existentes
en los paquetes que no son de interes. De manera similar, se pueden incluir
paquetes "de terceros" para añadir funcionalidades a medida o propietarias.

En esta sección no se describe la creación o mantenimiento de paquetes
personalizados. Puede ser interesante una lectura del método descrito por
Joachim Breitner 'How to fork privately' en
http://www.joachim-breitner.de/blog/archives/282-How-to-fork-privately.html.
La guía del nuevo desarrollador de Debian en
http://www.debian.org/doc/maint-guide/ describe la creación de paquetes a
medida.

Existen dos formas de instalar paquetes personalizados:

_* #{chroot_local-packages}#

_* Utilizando un repositorio APT personalizado

El método #{chroot_local-packages}# es el más simple para añadir paquetes
personalizados. Es muy útil para personalizaciones "rápidas" (one-off) pero
tiene tiene unos cuantos inconvenientes mientras que la utilización de un
repositorio APT personalizado es más lento de poner en marcha.

3~ Método #{chroot_local-packages}# para instalar paquetes personalizados

Para instalar paquetes personalizados solamente hay que copiar el paquete en
el directorio #{config/chroot_local-packages/}#. Los paquetes contenidos en
este directorio serán automáticamente instalados en el sistema en vivo
durante el proceso de creación. No es necesario especificar de donde se
deben obtener los paquetes.

Los paquetes *{deben}* nombrarse de la forma prescrita. La forma más simple
es usar #{dpkg-name}#.

El método #{chroot_local-packages}# para la instalación de paquetes
personalizados tiene desventajas:

_* No es posible utilizar APT seguro.

_* Se deben depositar todos los paquetes necesarios para cumplir
dependencias en el directorio #{config/chroot_local-packages/}#.

_* No es adecuado para almacenar configuraciones de Debian Live en un
control de versiones.

3~ Método de repositorio APT para instalar paquetes personalizados

Al contrario del método #{chroot_local-packages}#, cuando se utiliza el
método de repositorio APT personalizado se debe asegurar que se especifica
donde se deben buscar los paquetes a instalar. Para más información ver
{Elegir los paquetes a instalar}#choosing-packages-to-install.

Aunque crear un repositorio APT para instalar paquetes personalizados puede
parecer un esfuerzo innecesaro, la infraestructurar puede ser fácilmente
reutilizada posteriormente para ofrecer nuevas versiones de los paquetes.

3~ Paquetes personalizados y APT

live-build utiliza APT para instalar todos los paquetes en el sistema en
vivo, así que hereda sus comportamientos. Un punto a resaltar es que
(asumiendo una configuración de APT por defecto) dado un paquete en dos
repositorios diferentes con diferentes números de versiones, APT
seleccionará para instalar el paquete con número de versión superior.

Esta sería una buena razón para incrementar el número de version en los
ficheros #{debian/changelog}# de los paquetes personalizados y así asegurar
que serán estos los paquetes instalados en lugar de los contenidos en los
repositorios oficiales de Debian. Esto puede también lograrse alterando las
preferencias de pinning de APT del sistema en vivo. Para más información ver
{APT pinning}#apt-pinning.

2~ Configurar APT en la creación

Se puede configurar APT mediante varias opciones que se aplicarán en el
momento de crear la imagen. (La configuración que APT utilizará cuando se
ejecute el sistema en vivo puede ser configurada de la manera que
habitualmente se utiliza para introducir contenidos del sistema en vivo,
esto es, incluyendo las configuraciones apropiadas en el directorio
#{config/chroot_local_includes/}#.) Se puede encontrar una lista completa de
las opciones para configurar APT en la página de manual de
#{lb_config}#. Son aquellas opciones que comienzan con #{apt}#.

3~choosing-apt-or-aptitude Utilizar apt o aptitude

Se puede seleccionar que herramienta se utilizará para instalar paquetes,
#{apt}# o #{aptitude}#, en el momento de crear la imagen mediante la opción
#{--apt}# de #{lb config}#. Esta selección definirá el comportamiento
preferido en la instalación de paquetes, siendo la mayor diferencia la
manera de tratar los paquetes no disponibles.

_* #{apt}#: Con este método, si se especifica un paquete no existente, la
instalación fallará. Es el comportamiento por defecto.

_* #{aptitude}#: Con este método, si se especifica un paquete no existente,
la instalación continuará sin error.

3~ Utilización de un proxy con APT

Un problema habitual en la configuración de APT es tratar con la creación de
una imagen desde detras de un proxy. Se puede especificar dicho proxy con
las opciones  #{--apt-ftp-proxy}# o #{--apt-http-proxy}#. Por ejemplo:

code{

 $ lb config --apt-http-proxy http://proxy/

}code

3~ Ajuste de APT para ahorrar espacio

En ocasiones será necesario ahorrar algún espacio en el medio de
instalación. Las dos opciones descritas a continuación pueden ser de
interes.

Si no se desea incluir los índices de APT en la imagen creada se puede
utilizar la siguiente opción:

code{

 $ lb config --binary-indices false

}code

Esto no modificará el comportamiento de las entradas definidas en
/etc/apt/sources.list, sino que solo afecta a si exitirán o no ficheros de
indice en el directorio /var/lib/apt. El compromiso viene de que APT
necesita estos ficheros indices para funcionar en el sistema en vivo, así
que, si no existen, el usuario deberá ejecutar la orden #{apt-get update}#
para crear estos indices antes de poder ejecutar una orden del tipo
#{apt-cache search}# o #{apt-get install}#.

Si la instalación de los paquetes recomendados aumenta demasiado el tamaño
de la imagen, se puede desactivar el valor por defecto de esta opción de APT
con:

code{

 $ lb config --apt-recommends false

}code

El compromiso viene de que, si no se instalan los paquetes recomendados para
un paquete dado, esto es "los paquetes que supuestamente deberían encontrase
intalados si un paquete ya lo está" (Debian Policy Manual, seccion 7.2),
algún paquete que supuestamente debería estar instalado será omitido. Por
otra parte, se sugiere que, si se desactiva esta opción, se revise las
recomendaciones hechas a la lista de paquetes indicada (ver el fichero
#{binary.packages}# generado por #{lb build}#) y que se incluya en la lista
cualquier paquete que deba ser instalado. Si se encuentra que el número de
paquetes descartado es pequeño, se recomienda que la opción se active y que
se utilice una prioridad negativa para el pin de APT en dichos paquetes y
así evitar que sean instalados tal y como se explica en {APT
pinning}#apt-pinning.

3~ Pasar opciones a apt o a aptitude

Si no existe utiliza ninguna opción de #{lb config}# para alterar el
comportamiento de APT tal y como se desea, se puede utilizar las opciones
#{--apt-options}# o #{--aptitude-options}# para pasar cualquier opción que
se desee a la herramienta APT. Para más información, ver las páginas de
manual de #{apt}# y #{aptitude}#.

3~apt-pinning APT pinning

Como información básica, sería recomendable leer la página de manual
#{apt_preferences(5)}#. APT pinning puede ser configurado o en tiempo de
creación de la imagen, creando el fichero #{config/chroot_apt/preferences}#
o en tiempo de ejecución del sistema en vivo creando el fichero
#{config/chroot_local-includes/etc/apt/preferences}#.

Supongamos que se está creando un sistema en vivo basado en Squeeze pero se
necesita instalar todos los paquetes #{live-*}# desde la versión inestable
"Sid" en el momento de crear la imagen. Se deberá añadir Sid a los orígenes
(sources) de APT y fijarlo (pin) de manera que solamente los paquetes
#{live-*}# sean instalados desde Sid mientras que el resto será obtenido
desde la distribución base, Squeeze. Esto se puede realizar de la siguiente
forma:

code{

 $ echo "deb http://mirror/debian sid main" > config/chroot_sources/sid.chroot
 $ cat >>config/chroot_apt/preferences <<END
 Package: live-*
 Pin: release n=sid
 Pin-Priority: 600

 Package: *
 Pin: release n=sid
 Pin-Priority: 1
 END

}code

Una prioridad negativa previene la instalación de un paquete, como puede ser
el caso de que no se desee que un paquete recomendado por otro sea instalado
al instalar el primero. Supongamos que se está creando una imagen LXDE
mediante la opción #{--packages-lists lxde}#, pero no se desea preguntar al
usuario si desea almacenar las claves wifi en el almacen de claves. La lista
lxde incluye #{gdm}#, la cual depende de #{gksu}# que a su vez recomienda
#{gnome-keyring}#. Así que el objetivo es omitir la instalación del paquete
#{gnome-keyring}#, que puede conseguirse añadiendo un fichero con el
siguiente contenido a #{config/chroot_apt/preferences}#:

code{

 Package: gnome-keyring
 Pin: version *
 Pin-Priority: -1

}code
