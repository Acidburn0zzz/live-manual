:B~ Personalización de contenidos

1~customizing-contents Personalización de contenidos

Este capítulo trata, no solamente de una mera descripción de cómo
seleccionar los paquetes a incluir en el sistema en vivo, sino que además
presenta cómo hacer el «ajuste fino» de la personalización de los contenidos
del propio sistema. Los «includes» permiten adjuntar o reemplazar cualquier
fichero en la imagen en vivo a crear, los scripts gancho (hooks) permiten
ejecutar cualquier orden en las diferentes etapas de creación y en el
momento del arranque y por último, la preconfiguración permite configurar
paquetes cuando son instalados, suministrando las respuestas a las preguntas
de debconf.

2~includes Includes

Idealmente, un sistema en vivo debería incluir solamente los ficheros
proporcionados por los paquetes sin modificar. Sin embargo, algunas veces es
conveniente incluir o modificar algún contenido mediante ficheros. La
utilización de includes posibilita la inclusión, modificación o cambio de
cualquier fichero en la imagen en vivo a crear. live-build utiliza dos
mecanismos:

_* Includes locales en chroot : Estos includes permiten incluir o reemplazar
ficheros en el sistema de ficheros chroot. Para más información ver
{Includes locales en Live/chroot}#live-chroot-local-includes

_* Includes locales en Binary: Estos includes permiten incluir o reemplazar
ficheros en la propia imagen binaria generada. Para más información ver
{Includes locales en Binary}#binary-local-includes

Para más infomación acerca de la diferencia entre las imágenes "Live" y
"binary" ver {Términos}#terms 

3~live-chroot-local-includes Includes locales en Live/chroot

Chroot local includes can be used to add or replace files in the chroot/Live
filesystem so that they may be used in the Live system. A typical use is to
populate the skeleton user directory (#{/etc/skel}#) used by the Live system
to create the live user's home directory. Another is to supply configuration
files that can be simply added or replaced in the image without processing;
see {Chroot local hooks}#chroot-local-hooks if processing is needed.

Para incluir ficheros solamente hace falta añadirlos al directorio de
configuración #{config/includes.chroot}#. Habrá una relación directa entre
este directorio y el directorio raíz #{/}# del sistema en vivo. Por ejemplo,
si se desea añadir un fichero para que sea el fichero
#{/var/www/index.html}# del sistema en vivo se puede hacer lo siguiente:

code{

 $ mkdir -p config/includes.chroot/var/www
 $ cp /path/to/my/index.html config/includes.chroot/var/www

}code

El directorio de configuración presentará la siguiente jerarquía:

code{

 -- config
    [...]
     |-- includes.chroot
     |   `-- var
     |       `-- www
     |           `-- index.html
    [...]

}code

Los includes locales en chroot serán instalados después de la instalación de
los paquetes de manera que los includes sobreescribirán cualquier fichero
que los paquetes puedan haber instalado.

3~binary-local-includes Includes locales en Binary 

Se puede incluir material como documentación, videos, etc en el sistema de
ficheros del medio (USB, CDROM, etc) donde se grabará la imagen de manera
que sea accesible nada más insertar el medio sin necesidad de arrancar el
sistema en vivo. Para esto se utilizan los includes locales en
Binary. Funciona de manera similar a los includes locales en chroot
comentados anteriormente. Por ejemplo, supongamos que en el medio de
instalación se desea añadir unos ficheros con videos de demostración
#{~/video_demo.*}# sobre el funcionamiento del sistema en vivo de manera que
el usuario pueda acceder a ellos a través de la página de indice
HTML. Simplemente se debe copiar el material en #{config/includes.binary/}#
de la siguiente manera:

code{

 $ cp ~/video_demo.* config/includes.binary/

}code

Los ficheros aparecerán ahora en el directorio raíz del medio en vivo.

2~hooks Scripts gancho (Hooks)

Hooks allow commands to be run in the chroot and binary stages of the build
in order to customize the image. Depending on whether you are building a
live image or a regular system image you have to place your hooks in
#{config/hooks/live}# or #{config/hooks/normal}# respectively. These are
frequently referred to as local hooks because they are executed inside the
build environment.

There are also boot-time hooks that allow you to run commands once the image
has already been built, during the boot process.

3~chroot-local-hooks Chroot local hooks

To run commands in the chroot stage, create a hook script with a
#{.hook.chroot}# suffix containing the commands either in the
#{config/hooks/live}# or #{config/hooks/normal}# directories. The hook will
run in the chroot after the rest of your chroot configuration has been
applied, so remember to ensure your configuration includes all packages and
files your hook needs in order to run. See the example chroot hook scripts
for various common chroot customization tasks provided in
#{/usr/share/doc/live-build/examples/hooks}# which you can copy or symlink
to use them in your own configuration.

3~ Scripts gancho locales en Binary

To run commands in the binary stage, create a hook script with a
#{.hook.binary}# suffix containing the commands either in the
#{config/hooks/live}# or #{config/hooks/normal}# directories. The hook will
run after all other binary commands are run, but before binary_checksums,
the very last binary command. The commands in your hook do not run in the
chroot, so take care not to modify any files outside of the build tree, or
you may damage your build system! See the example binary hook scripts for
various common binary customization tasks provided in
#{/usr/share/doc/live-build/examples/hooks}# which you can copy or symlink
to use them in your own configuration.

3~boot-time-hooks Scripts gancho en tiempo de arranque

Para ejecutar ordenes en el arranque del sistema en vivo, se puede
suministrar scripts gancho a live-config depositándolos en el directorio
#{config/includes.chroot/lib/live/config/}#, tal y como se explica en la
sección de "Personalización" de la página de manual de live-config. Es
interesante examinar los scripts gancho que trae de serie live-config que
pueden verse en #{/lib/live/config/}# y fijarse en la secuencia de
números. Cuando se vaya a utilizar scripts propios deben ser prefijados con
un número para indicar el orden de ejecución. Otra posibilidad es utilizar
un paquete personalizado tal y como se describe en {Instalar paquetes
modificados o de terceros}#installing-modified-or-third-party-packages.

2~ Preconfiguración de las preguntas de Debconf

Los ficheros del directorio #{config/preseed/}# con el sufijo #{.cfg}#
seguido por la etapa (#{.chroot}# o #{.binary}#) son ficheros de
preconfiguración para debconf. live-build instalará estos ficheros mediante
#{debconf-set-selections}# durante la etapa correspondiente.

Ver #{debconf(7)}# en el paquete /{debconf}/ para obtener más información
acerca de debconf.
