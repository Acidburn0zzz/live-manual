:B~ 収録内容の独自化

1~customizing-contents 収録内容の独自化

この章では収録するパッケージを単に選択だけにとどまらない、微調整まで含めた Live システムの収録内容の独自化について説明します。インクルードにより
Live
システムイメージの任意のファイルを追加、置換できるようになり、フックによりビルド時及びブート時の異なる段階で任意のコマンドを実行できるようになり、preseed
が debconf の質問に対する回答を提供することでパッケージのインストール時に設定できるようになります。

2~includes Includes

理想的なのは変更されていないパッケージにより提供されるファイルを Live
システムで完全に収録することではありますが、ファイルを使って内容をいくらか提供あるいは変更することが便利なこともあります。インクルードを使うと Live
システムイメージ中の任意のファイルを追加 (または置換) することができるようになります。live-build
ではこれを使う仕組みを2つ提供しています:

_* chroot ローカルインクルード: chroot/Live
ファイルシステムに対してファイルの追加や置換ができるようになります。さらなる情報については、{Live/chroot
ローカルインクルード}#live-chroot-local-includes を見てください。

_* バイナリローカルインクルード:
バイナリイメージ中のファイルの追加や置換ができるようになります。さらなる情報については、{バイナリローカルインクルード}#binary-local-includes
を見てください。

「Live」及び「バイナリ」イメージの違いについてのさらなる情報は、{用語}#terms を見てください。

3~live-chroot-local-includes Live/chroot ローカルインクルード

Chroot local includes can be used to add or replace files in the chroot/Live
filesystem so that they may be used in the Live system. A typical use is to
populate the skeleton user directory (#{/etc/skel}#) used by the Live system
to create the live user's home directory. Another is to supply configuration
files that can be simply added or replaced in the image without processing;
see {Chroot local hooks}#chroot-local-hooks if processing is needed.

ファイルを収録するには #{config/includes.chroot}# ディレクトリに単純に追加します。このディレクトリが Live
システムのルートディレクトリ #{/}# に対応します。例えば Live システムにファイル #{/var/www/index.html}#
を追加する場合:

code{

 $ mkdir -p config/includes.chroot/var/www
 $ cp /path/to/my/index.html config/includes.chroot/var/www

}code

それから設定は以下の配置になっているでしょう:

code{

 -- config
    [...]
     |-- includes.chroot
     |   `-- var
     |       `-- www
     |           `-- index.html
    [...]

}code

chroot
ローカルインクルードはパッケージがインストールされた後にインストールされるので、パッケージによりインストールされたファイルは上書きされます。

3~binary-local-includes バイナリローカルインクルード

文書やビデオ等の内容をメディアのファイルシステムに収録して、メディアを差し込んで Live
システムをブートしなくてもすぐにアクセスできるようにするのにバイナリローカルインクルードを使えます。これは chroot
ローカルインクルードと同様の方法で動作します。例えばファイル #{~/video_demo.*}# が Live システムの実演ビデオで、リンク先の
HTML 索引ページでそれを説明しているものと仮定しましょう。単純に内容を #{config/includes.binary/}# にコピーします:

code{

 $ cp ~/video_demo.* config/includes.binary/

}code

これでファイルは Live メディアの最上位ディレクトリに現れます。

2~hooks フック

Hooks allow commands to be run in the chroot and binary stages of the build
in order to customize the image. Depending on whether you are building a
live image or a regular system image you have to place your hooks in
#{config/hooks/live}# or #{config/hooks/normal}# respectively. These are
frequently referred to as local hooks because they are executed inside the
build environment.

There are also boot-time hooks that allow you to run commands once the image
has already been built, during the boot process.

3~chroot-local-hooks Chroot local hooks

To run commands in the chroot stage, create a hook script with a
#{.hook.chroot}# suffix containing the commands either in the
#{config/hooks/live}# or #{config/hooks/normal}# directories. The hook will
run in the chroot after the rest of your chroot configuration has been
applied, so remember to ensure your configuration includes all packages and
files your hook needs in order to run. See the example chroot hook scripts
for various common chroot customization tasks provided in
#{/usr/share/doc/live-build/examples/hooks}# which you can copy or symlink
to use them in your own configuration.

3~ バイナリローカルフック

To run commands in the binary stage, create a hook script with a
#{.hook.binary}# suffix containing the commands either in the
#{config/hooks/live}# or #{config/hooks/normal}# directories. The hook will
run after all other binary commands are run, but before binary_checksums,
the very last binary command. The commands in your hook do not run in the
chroot, so take care not to modify any files outside of the build tree, or
you may damage your build system! See the example binary hook scripts for
various common binary customization tasks provided in
#{/usr/share/doc/live-build/examples/hooks}# which you can copy or symlink
to use them in your own configuration.

3~boot-time-hooks ブート時フック

ブート時にコマンドを実行するために man ページの「独自化」節で説明されている live-config
フックを提供することができます。#{/lib/live/config/}# で提供している live-config
独自のフックを、実行順を示す頭の番号に注意して調べてください。それから自分のフックに実行順を示す適切な番号を頭に付けて、#{config/includes.chroot/lib/live/config/}#
内の chroot
ローカルインクルードか、{変更したあるいはサードパーティのパッケージのインストール}#installing-modified-or-third-party-packages
で説明している独自パッケージとして提供してください。

2~ Debconf 質問の preseed

#{config/preseed/}# ディレクトリにある、末尾が段階 (#{.chroot}# か #{.binary}#) に続いて
#{.cfg}# で終わるファイルは debconf の preseed ファイルと見なされ、対応する段階で live-build により
#{debconf-set-selections}# を使ってインストールされます。

debconf のさらなる情報については、/{debconf}/ パッケージの #{debconf(7)}# を見てください。
