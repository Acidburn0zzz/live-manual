:B~ 収録内容の独自化

1~customizing-contents 収録内容の独自化

この章では収録するパッケージを単に選択だけにとどまらない、微調整まで含めた Live システムの収録内容の独自化について説明します。インクルードにより
live
システムイメージの任意のファイルを追加、置換できるようになり、フックによりビルド時及びブート時の異なる段階で任意のコマンドを実行できるようになり、preseed
が debconf の質問に対する回答を提供することでパッケージのインストール時に設定できるようになります。

2~includes Includes

理想的なのは変更されていないパッケージにより提供されるファイルを Live
システムで完全に収録することではありますが、ファイルを使って内容をいくらか提供あるいは変更することが便利なこともあります。インクルードを使うと Live
システムイメージ中の任意のファイルを追加 (または置換) することができるようになります。live-build
ではこれを使う仕組みを2つ提供しています:

_* Chroot ローカルインクルード: chroot/Live
ファイルシステムに対してファイルの追加や置換ができるようになります。さらなる情報については、{Live/chroot
ローカルインクルード}#live-chroot-local-includes を見てください。

_* バイナリローカルインクルード:
バイナリイメージ中のファイルの追加や置換ができるようになります。さらなる情報については、{バイナリローカルインクルード}#binary-local-includes
を見てください。

「Live」及び「バイナリ」イメージの違いについてのさらなる情報は、{用語}#terms を見てください。

3~live-chroot-local-includes Live/chroot ローカルインクルード

Chroot ローカルインクルードを使って chroot/Live ファイルシステム中のファイルの追加や置換を行い、それを Live
システムで利用することができます。代表的な使い方として Live システムで利用するユーザディレクトリ (#{/etc/skel}#)
の骨格を構成させ、live
ユーザのホームディレクトリを作成するということがあります。別の使い方としては設定ファイルを提供し、そのまま加工せずイメージ中に追加または置換するということがあります。加工が必要な場合は
{Live/chroot ローカルフック}#live-chroot-local-hooks を見てください。

ファイルを収録するには #{config/includes.chroot}# ディレクトリに単純に追加します。このディレクトリが Live
システムのルートディレクトリ #{/}# に対応します。例えば Live システムにファイル #{/var/www/index.html}#
を追加する場合:

code{

 $ mkdir -p config/includes.chroot/var/www
 $ cp /path/to/my/index.html config/includes.chroot/var/www

}code

それから設定は以下の配置になっているでしょう:

code{

 -- config
    [...]
     |-- includes.chroot
     |   `-- var
     |       `-- www
     |           `-- index.html
    [...]

}code

Chroot
ローカルインクルードはパッケージがインストールされた後にインストールされるので、パッケージによりインストールされたファイルは上書きされます。

3~binary-local-includes バイナリローカルインクルード

文書やビデオ等の内容をメディアのファイルシステムに収録して、メディアを差し込んで Live
システムをブートしなくてもすぐにアクセスできるようにするのにバイナリローカルインクルードを使えます。これは chroot
ローカルインクルードと同様の方法で動作します。例えばファイル #{~/video_demo.*}# が live システムの実演ビデオで、リンク先の
HTML 索引ページでそれを説明しているものと仮定しましょう。単純に内容を #{config/includes.binary/}# にコピーします:

code{

 $ cp ~/video_demo.* config/includes.binary/

}code

これでファイルは live メディアのルートディレクトリに現れます。

2~hooks フック

フックではビルドの chroot 及び バイナリの段階でコマンドを実行し、イメージを独自化できます。

3~live-chroot-local-hooks Live/chroot ローカルフック

To run commands in the chroot stage, create a hook script with a
#{.hook.chroot}# suffix containing the commands in the #{config/hooks/}#
directory. The hook will run in the chroot after the rest of your chroot
configuration has been applied, so remember to ensure your configuration
includes all packages and files your hook needs in order to run. See the
example chroot hook scripts for various common chroot customization tasks
provided in #{/usr/share/doc/live-build/examples/hooks}# which you can copy
or symlink to use them in your own configuration.

3~boot-time-hooks ブート時フック

ブート時にコマンドを実行するために man ページの「独自化」節で説明されている live-config
フックを提供することができます。#{/lib/live/config/}# で提供している live-config
独自のフックを、実行順を示す頭の番号に注意して調べてください。それから自分のフックに実行順を示す適切な番号を頭に付けて、#{config/includes.chroot/lib/live/config/}#
内の chroot
ローカルインクルードか、{変更した、またはサードパーティのパッケージのインストール}#installing-modified-or-third-party-packages
で説明している独自パッケージとして提供してください。

3~ バイナリローカルフック

To run commands in the binary stage, create a hook script with a
#{.hook.binary}# suffix containing the commands in the #{config/hooks/}#
directory. The hook will run after all other binary commands are run, but
before binary_checksums, the very last binary command. The commands in your
hook do not run in the chroot, so take care to not modify any files outside
of the build tree, or you may damage your build system! See the example
binary hook scripts for various common binary customization tasks provided
in #{/usr/share/doc/live-build/examples/hooks}# which you can copy or
symlink to use them in your own configuration.

2~ Debconf 質問の preseed

#{config/preseed/}# ディレクトリにある、末尾が段階 (#{.chroot}# か #{.binary}#) に続いて
#{.cfg}# で終わるファイルは debconf の preseed ファイルと見なされ、対応する段階で live-build により
#{debconf-set-selections}# を使ってインストールされます。

debconf のさらなる情報については、/{debconf}/ パッケージの #{debconf(7)}# を見てください。
