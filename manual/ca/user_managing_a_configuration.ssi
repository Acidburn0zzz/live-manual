:B~ Gestió d'una configuració

1~managing-a-configuration Gestió d'una configuració

En aquest capítol s'explica com gestionar una configuració en viu des de la
creació inicial, a través de successives revisions i versions successives de
tant el programari live-build com la imatge en viu en si mateixa.

2~ Utilitzar auto per gestionar canvis de configuració

Les configuracions en viu poques vegades són perfectes al primer intent. És
probable que s'hagi de fer una sèrie de revisions fins quedar satisfet. No
obstant això, es poden introduir inconsistències a la configuració d'una
versió a la següent si no se'n te cura. El principal problema és, que una
vegada que a una variable se li assigna un valor per defecte, aquest valor
no es torna a calcular a partir d'altres variables que poden canviar en
revisions posteriors.

Per exemple, quan la distribució s'estableix per primer cop, a moltes de les
variables dependents se'ls assigna uns valors per defecte que s'adapten a
aquesta distribució. No obstant això, si més endavant es decideix canviar la
distribució, les variables dependents seguiran conservant els mateixos
valors que ja no són apropiats.

Un segon problema relacionat és que si s'executa #{lb config}# i després
s'actualitza a una versió nova de live-build que ha canviat un dels noms de
les variables, només es descobrirà això mitjantçant una revisió manual de
les variables als fitxers de #{config/*}# i que després s'haurà de tornar a
establir l'opció corresponent de nou.

Tot això seria una molestia terrible si no fos pels scripts auto/*, simples
embolcalls per les ordres #{lb config}#, #{lb build}# i #{lb clean}#
dissenyats per ajudar a gestionar una configuració. Només cal crear un
script auto/config que contingui totes les opcions que es desitgin, i un
auto/clean que elimina els fitxers que contenen diversos valors de variables
de configuració, cada vegada que s'executi #{lb config}# i #{lb clean}#,
aquests fitxers seran executats. Això assegurarà que la configuració guarda
una coherència interna d'una versió a una altra i d'una versió de live-build
a la següent (Tot i que encara s'haurà d'anar amb compte i llegir la
documentació quan s'actualitza live-build i fer els ajustos necessaris ).

2~ Scripts auto d'exemple

Es pot utilitzar scripts auto d'exemple com ara els següents com a punt de
partida per crear una nova configuració de live-build. Tenir en compte que
quan s'invoca l'ordre #{lb}# que embolcalla el script auto, s'ha
d'especificar #{noauto}# com a paràmetre per garantir que el script auto no
es torna a executar de forma recursiva. A més, assegurar-se que els scripts
són fitxers executables (e.g. #{chmod 755 auto/*}#).

#{auto/config}#

code{

 #!/bin/sh
 lb config noauto \
     --package-lists "standard" \
     "${@}"

}code

#{auto/clean}#

code{

 #!/bin/sh
 lb clean noauto "${@}"
 rm -f config/binary config/bootstrap \
     config/chroot config/common config/source
 rm -f build.log

}code

#{auto/build}#

code{

 #!/bin/sh
 lb build noauto "${@}" 2>&1 | tee build.log

}code

Ara incloem scripts auto d'exemple amb live-build basats en els exemples
anteriors. Es poden copiar com a punt de partida.

code{

 $ cp /usr/share/live/build/examples/auto/* auto/

}code

Editar #{auto/config}#, canviar o afegir qualsevol opció que millor hi
sembli. En l'exemple anterior s'estableix el valor per defecte,
#{--package-lists standard}#. Canviar això a qualsevol valor vàlid per la
pròpia imatge (o suprimir-ho si es vol utilitzar el valor per defecte) i
afegir opcions addicionals en les línies que segueixen a continuació.
