:B~ Gestió d'una configuració

1~managing-a-configuration Gestió d'una configuració

En aquest capítol s'explica com gestionar una configuració en viu des de la
seva creació inicial, a través de revisions i versions successives de tant
el programari live-build com de la imatge en viu en si mateixa.

2~ Utilitzar auto per gestionar canvis de configuració

Live configurations rarely are perfect on the first try. It may be fine to
pass #{lb config}# options from the command-line to perform a single build,
but it is more typical to revise those options and build again until you are
satisfied. To support these changes, you will need auto scripts which ensure
your configuration is kept in a consistent state.

3~ Why you need auto

The #{lb config}# command stores the options you pass to it in #{config/*}#
files along with many other options set to default values. If you run #{lb
config}# again, it will not reset any option that was defaulted based on
your initial options. So, for example, if you run #{lb config}# again with a
new value for #{--distribution}#, any dependent options that were defaulted
for the old distribution may no longer work with the new. Nor are these
files intended to be read or edited. They store values for over a hundred
options, so nobody, let alone yourself, will be able to see in these which
options you actually specified. And finally, if you run #{lb config}#, then
upgrade live-build and it happens to rename an option, #{config/*}# would
still contain variables named after the old option that are no longer valid.

 Per totes aquestes raons, els scripts #{auto/*}# ens fan la vida més
fàcil. Són simples embolcalls per les ordres #{lb config}#, #{lb build}# i
#{lb clean}# dissenyats per ajudar a gestionar una configuració. Només cal
crear un script #{auto/config}# que contingui totes les opcions que es
desitgin per a #{lb config}#, i un #{auto/clean}# que elimini els fitxers
que continguin diversos valors de variables de configuració, i el script
#{auto/build}# guarda un #{build.log}# de cada construcció. Cada vegada que
s'executi l'ordre #{lb}# corresponent, aquests fitxers seran executats
automàticament. L'ús d'aquests scripts assegurarà que la configuració sigui
més senzilla de llegir i que guardi una coherència interna d'una reversió a
una altra. A més a més serà més fàcil identificar i solucionar les opcions
que s'han de canviar al actualitzar d'una versió de live-build a la següent
després de llegir la documentació.

2~ Utilitzar scripts auto d'exemple

For your convenience, live-build comes with example auto shell scripts to
copy and edit. Start a new, default configuration, then copy the examples
into it:

code{

 $ mkdir mylive && cd mylive && lb config
 $ cp /usr/share/doc/live-build/examples/auto/* auto/

}code

Edit #{auto/config}#, adding any options as you see fit. For instance:

code{

 #!/bin/sh
 lb config noauto \
     --architectures i386 \
     --linux-flavours 686-pae \
     --binary-images hdd \
     --mirror-bootstrap http://ftp.es.debian.org/debian/ \
     --mirror-binary http://ftp.es.debian.org/debian/ \
     "${@}"

}code

Now, each time you use #{lb config}#, #{auto/config}# will reset the
configuration based on these options. When you want to make changes to them,
edit the options in this file instead of passing them to #{lb config}#. When
you use #{lb clean}#, #{auto/clean}# will clean up the #{config/*}# files
along with any other build products. And finally, when you use #{lb build}#,
a log of the build will be written by #{auto/build}# in #{build.log}#.

Note: A special #{noauto}# parameter is used here to suppress another call
to #{auto/config}#, thereby preventing infinite recursion. Make sure you
don't accidentally remove it when making edits. Also, take care to ensure
when you split the #{lb config}# command across multiple lines for
readability, as shown in the example above, that you don't forget the
backslash (\) at the end of each line that continues to the next.

2~ Clone a configuration published via Git

Utilitzar l'opció #{lb config --config}# opció per clonar un repositori Git
que contingui una configuració de Debian Live. Si es vol basar la
configuració en un repositori mantingut pel projecte Debian Live, mirar els
repositoris amb el prefix #{config-}# a http://live.debian.net/gitweb

Per exemple, per construir una imatge de rescat, utilitzar el repositori
#{config-rescue}# de la manera següent:

code{

 $ mkdir live-rescue && cd live-rescue
 $ lb config git://live.debian.net/git/config-rescue.git

}code

Editar #{auto/config}# i qualsevol altra cosa necessària dins l'arbre
#{config}# per satisfer les vostres necessitats.

Si es desitja, es pot definir una drecera en la configuració de Git, afegint
el següent a #{${HOME}/.gitconfig}#:

code{

 [url "git://live.debian.net/git/"]
     insteadOf = ldn:

}code

Això permet utilitzar #{ldn:}# en qualsevol lloc on cal especificar la
direcció d'un repositori git. També es pot omitir el sufix #{.git}#,
començar una nova imatge amb aquesta configuració és tan fàcil com:

code{

 $ lb config ldn:config-rescue

}code

