:B~ Gestire una configurazione

1~managing-a-configuration Gestire una configurazione

Questo capitolo spiega come gestire una configurazione per una live sin
dalla creazione iniziale, attraverso le successive revisioni e rilasci sia
del software live-build che della stessa immagine.

2~ Utilizzare auto per gestire i cambiamenti di configurazione

Le configurazioni live raramente sono perfette da riuscire al primo colpo,
servono una serie di revisioni prima di essere soddisfatti. Tuttavia, se non
si presta attenzione, possono verificarsi delle incoerenze tra una revisione
e l'altra se non si presta attenzione. Il problema principale è che una
volta assegnato un valore predefinito ad una variabile, tale valore non sarà
ricalcolato da altre variabili che possono cambiare in altre revisioni.

Per esempio, durante la prima configurazione della distribuzione, a molte
variabili 'dipendenti' vengono dati valori predefiniti che si adattino.Per
cui se in seguito si decide di cambiare distribuzione, quelle variabili
continueranno a mantenere vecchi valori non più appropriati.

Un secondo problema correlato è l'eseguire #{lb config}# e aggiornare alla
nuova versione di live-build il quale ha cambiato il nome di una delle
variabili, lo si può scoprire solamente con una revisione manuale delle
variabili nei file #{config/*}#, che sarà necessario utilizzare per
impostare nuovamente le opzioni appropriate.

All of this would be a terrible nuisance if it weren't for auto/* scripts,
simple wrappers to the #{lb config}#, #{lb build}# and #{lb clean}# commands
that are designed to help you manage your configuration. Simply create an
auto/config script containing #{lb config}# command with all desired
options, and an auto/clean that removes the files containing configuration
variable values, and each time you run #{lb config}# and #{lb clean}#, these
files will be executed. This will ensure that your configuration is kept
internally consistent from one revision to the next and from one live-build
release to the next (though you will still have to take care and read the
documentation when you upgrade live-build and make adjustments as needed).

2~ Esempi di script automatici

Usare esempi di script automatici come il seguente come punto di partenza
per una nuova configurazione di live-build. Si noti che quando si invoca il
comando #{lb}# incluso nello script, si deve specificare il parametro
#{noauto}# per essere certi che lo script stesso non venga richiamato
ricorsivamente. Non dimenticare, inoltre, di accertarsi che gli script siano
eseguibili (es. #{chmod 755 auto/*}#).

#{auto/config}#

code{

 #!/bin/sh
 lb config noauto \
     --package-lists "standard" \
     "${@}"

}code

#{auto/clean}#

code{

 #!/bin/sh
 lb clean noauto "${@}"
 rm -f config/binary config/bootstrap \
     config/chroot config/common config/source
 rm -f binary.log

}code

#{auto/build}#

code{

 #!/bin/sh
 lb build noauto "${@}" 2>&1 | tee binary.log

}code

Facciamo un esempio di script automatico per live-build basato sugli esempi
precedenti; si possono copiare come punto di partenza.

code{

 $ cp /usr/share/live/build/examples/auto/* auto/

}code

Modificare #{auto/config}# aggiungendo o togliendo le opzioni come meglio
credi. Nel precedente esempio, #{--package-lists standard}# è impostato al
valore predefinito; cambiarlo in un valore appropriato per l'immagine (o
cancellarlo se si desidera utilizzare un valore predefinito) e aggiungere
eventuali opzioni ulteriori in continuazione delle righe che seguono.
