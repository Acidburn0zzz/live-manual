:B~ Esempi

1~examples Esempi

Questo capitolo affronta alcune compilazioni di esempio per casi specifici
d'uso con Debian Live. Se si è nuovi nella costruzione di immagini Debian
Live, raccomandiamo di dare innanzitutto un'occhiata ai tre tutorial in
sequenza, dato che ciascuno insegna nuove tecniche che aiuteranno nell'uso e
nella comprensione degli esempi rimanenti.

2~using-the-examples Usare gli esempi

Per usare questi esempi è necessario un sistema per costruirveli sopra che
soddisfi i requisiti elencati in {Requisiti}#requirements e avere live-build
installato come descritto in {Installare live-build}#installing-live-build.

È da notare che per brevità in questi esempi non specifichiamo un mirror
locale da usare per la costruzione. Usando un mirror locale, si possono
accelerare considerevolmente i download. Si possono specificare le opzioni
quando si usa #{lb config}#, come descritto in {Mirror delle distribuzioni
usati in fase di compilazione}#distribution-mirrors-build-time o, più
convenientemente, impostare il predefinito per il proprio sistema in
#{/etc/live/build.conf}#. Si crei semplicemente questo file e si impostino
in esso le corrispondenti variabili #{LB_MIRROR_*}# per il mirror
desiderato. Tutti gli altri mirror utilizzati nella costruzione avranno
questi valori, ad esempio:

code{

 LB_MIRROR_BOOTSTRAP="http://mirror/debian/"
 LB_MIRROR_CHROOT_SECURITY="http://mirror/debian-security/"
 LB_MIRROR_CHROOT_BACKPORTS="http://mirror/debian-updates/"

}code

2~tutorial-1 Tutorial 1: A default image

*{Caso d'uso:}* creazione di una prima semplice immagine, imparando i fondamenti di live-build.

In questo tutorial genereremo un'immagine ISO ibrida di Debian Live
contenente solo pacchetti base (senza Xorg) e alcuni pacchetti Debian Live
di supporto, come primo esercizio sull'uso di live-build.

Non può essere più semplice:

code{

 $ mkdir tutorial1 ; cd tutorial1 ; lb config

}code

Esaminare i contenuti della directory #{config/}#; si noterà uno scheletro
di configurazione pronto per essere personalizzato o, in questo caso, usato
immediatamente per costruire un'immagine predefinita.

Ora, come utente root, generare l'immagine salvando un log con #{tee}#.

code{

 # lb build 2>&1 | tee build.log

}code

Presupponendo che tutto vada per il verso giusto, dopo un po' la directory
corrente conterrà #{binary.hybrid.iso}#. Questa immagine ISO ibrida può
essere avviata direttamente in una macchina virtuale come descritto in
{Provare un'immagine ISO con Qemu}#testing-iso-with-qemu e {Provare
un'immagine ISO con virtualbox-ose}#testing-iso-with-virtualbox, oppure
masterizzata su un supporto ottico o ancora su una chiavetta USB come
descritto rispettivamente in {Masterizzare un'immagine ISO su un supporto
fisico}#burning-iso-image e {Copiare un'immagine ISO ibrida su una penna
USB}#copying-iso-hybrid-to-usb.

2~tutorial-2 Tutorial 2: servizio browser web

*{Caso d'uso:}* creazione di un'immagine per servizio browser web, imparando come applicare le personalizzazioni.

In questo tutorial verrà creata un'immagine adatta all'uso come browser web,
che serve come introduzione alla personalizzazione delle immagini Debian
Live.

code{

 $ mkdir tutorial2
 $ cd tutorial2
 $ echo "task-lxde-desktop iceweasel" >> config/package-lists/my.list.chroot

}code

La scelta di LXDE per questo esempio riflette il desiderio di fornire un
ambiente desktop minimale, dato che il punto focale dell'immagine è il
singolo uso che abbiamo in mente, il browser web. Potremmo anche spingerci
oltre e fornire una configurazione predefinita per il browser web in
#{config/includes.chroot/etc/iceweasel/profile/}#, o pacchetti addizionali
di supporto per la fruizione di vari tipi di contenuti web, ma lasciamo
questo come esercizio per il lettore.

Generare l'immagine, ancora come utente root, conservando un log come in
{Tutorial 1}#tutorial-1:

code{

 # lb build 2>&1 | tee build.log

}code

Di nuovo, verificare che l'immagine sia a posto e collaudarla, come in
{Tutorial 1}#tutorial-1.

2~tutorial-3 Tutorial 3: un'immagine personalizzata

*{Caso d'uso:}* creazione di un progetto per costruire un'immagine personalizzata che contiene i pacchetti preferiti da portare con sé in una chiavetta USB ovunque si vada, e che evolve in revisioni successive allorché i bisogni o le preferenze cambino.

Dal momento che la nostra immagine personalizzata cambierà con le successive
revisioni e che vogliamo tener traccia di questi cambiamenti, andando per
tentativi ed eventualmente tornando indietro se qualcosa non funziona,
conserveremo la nostra configurazione nel popolare sistema di controllo di
versione #{git}#. Useremo anche le migliori pratiche di auto-configurazione
tramite gli script #{auto}# come descritto in {Gestire una
configurazione}#managing-a-configuration.

3~ Prima revisione

code{

 $ mkdir -p tutorial3/auto
 $ cp /usr/share/doc/live-build/examples/auto/* tutorial3/auto/
 $ cd tutorial3

}code

Modificare #{auto/config}# come segue:

code{

 #!/bin/sh

 lb config noauto \
     --architectures i386 \
     --linux-flavours 686-pae \
     "${@}"

}code

Eseguire #{lb config}# per generare l'albero di configurazione utilizzando
lo script #{auto/config}# appena creato:

code{

 $ lb config

}code

Popolare ora l'elenco locale dei pacchetti:

code{

 $ echo "task-lxde-desktop iceweasel xchat" >> config/package-lists/my.list.chroot

}code

Per prima cosa, #{--architectures i386}# assicura che sul nostro sistema
#{amd64}# costruiamo una versione a 32-bit utilizzabile sulla maggior parte
delle macchine. In secondo luogo, usiamo #{--linux-flavours 686-pae}# dato
che non prevediamo di usare questa immagine su sistemi troppo vecchi. Terzo,
abbiamo scelto il metapacchetto task /{lxde}/ per avere un desktop
minimale. Infine abbiamo aggiunto due pacchetti preferiti: /{iceweasel}/ e
/{xchat}/.

Costruire quindi l'immagine:

code{

 # lb build

}code

Notare che diversamente dai primi due tutorial non occorre più digitare
#{2>&1 | tee build.log}# dato che questo è ora incluso in #{auto/build}#.

Una volta che l'immagine è stata collaudata (come in {Tutorial
1}#tutorial-1) e che si è sicuri che funzioni correttamente, è il momento di
inizializzare il repository #{git}#, aggiungendo solo gli script auto appena
creati, e di fare poi il primo commit:

code{

 $ git init
 $ cp /usr/share/doc/live-build/examples/gitignore .gitignore
 $ git add .
 $ git commit -a -m "Initial import."

}code

3~ Seconda revisione

In questa revisione ripuliremo la prima compilazione, aggiungeremo il
pacchetto /{vlc}/ alla configurazione, dunque avverrà una ricompilazione,
verifica e commit.

Il comando #{lb clean}# ripulirà tutti i file ottenuti con la precedente
generazione eccetto la cache, che ci evita un nuovo download dei
pacchetti. Ciò assicura che il successivo #{lb build}# eseguirà di nuovo
tutti i passaggi per rigenerare i file dalla nuova configurazione.

code{

 # lb clean

}code

Ora inserire il pacchetto /{vlc}/ all'elenco locale dei pacchetti
#{config/package-lists/my.list.chroot}#:

code{

 $ echo vlc >> config/package-lists/my.list.chroot

}code

Rigenerare nuovamente:

code{

# lb build

}code

Verificare e, quando soddisfatti, eseguire il commit della revisione
successiva:

code{

 $ git commit -a -m "Adding vlc media player."

}code

Ovviamente sono possibili cambiamenti alla configurazione più complicati,
magari aggiungendo file in sottodirectory di #{config/}#. Quando si esegue
il commit di nuove revisioni, si faccia solo attenzione a non modificare
manualmente o fare un commit dei file al livello superiore di #{config}# che
contengono le variabili #{LB_*}#, giacché sono anche prodotti
dell'assemblaggio, e che sono sempre ripuliti da #{lb clean}# e ricreati con
#{lb config}# attraverso i loro rispettivi script #{auto}#.

Siamo arrivati alla fine di questa serie di tutorial. Mentre sono possibili
molti altri tipi di personalizzazioni, anche solo usando le poche
caratteristiche esplorate in questi semplici esempi, può essere creata una
varietà quasi infinita di immagini. Gli esempi rimanenti in questa sezione
coprono diversi altri casi d'uso estrapolati dalle esperienze raccolte degli
utenti Debian Live.

2~ Un client Kiosk VNC

*{Caso d'uso:}* creazione di un'immagine con live-build per avviare direttamente un server VNC.

Creare una directory per la compilazione e una configurazione di base al suo
interno disabilitando i raccomandati per ottenere un sistema
minimale. Quindi creare due elenchi di pacchetti: il primo generato con uno
script fornito da live-build chiamato #{Packages}# (vedere {Elenchi di
pacchetti generati}#generated-package-lists) e il secondo che include
/{xorg}/, /{gdm3}/, /{metacity}/ e /{xvnc4viewer}/.

code{

 $ mkdir vnc-kiosk-client
 $ cd vnc-kiosk-client
 $ lb config -a i386 -k 686-pae --apt-recommends false
 $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot
 $ echo "xorg gdm3 metacity xvnc4viewer" > config/package-lists/my.list.chroot

}code

Come spiegato in {Modificare APT per risparmiare
spazio}#tweaking-apt-to-save-space potrebbe essere necessario riaggiungere
alcuni pacchetti raccomandati al fine di far funzionare l'immagine
correttamente.

Un modo semplice per elencare i raccomandati è usare /{apt-cache}/, ad
esempio:

code{

 $ apt-cache depends live-config live-boot

}code

In this example we found out that we had to re-include several packages
recommended by live-config and live-boot: #{user-setup}# to make autologin
work and #{sudo}# as an essential program to shutdown the system. Besides,
it could be handy to add #{live-tools}# to be able to copy the image to RAM
and #{eject}# to eventually eject the live medium. So:

code{

 $ echo "live-tools user-setup sudo eject" > config/package-lists/recommends.list.chroot

}code

Successivamente creare la directory #{/etc/skel}# in
#{config/includes.chroot}# e inserirvi un #{.xsession}# personalizzato per
l'utente predefinito che lancerà /{metacity}/ e avvierà /{xvncviewer}/
connesso alla porta #{5901}# su un server con indirizzo #{192.168.1.2}#:

code{

 $ mkdir -p config/includes.chroot/etc/skel
 $ cat > config/includes.chroot/etc/skel/.xsession << EOF
 #!/bin/sh

 /usr/bin/metacity &
 /usr/bin/xvncviewer 192.168.1.2:1

 exit
 EOF

}code

Compilare l'immagine:

code{

 # lb build

}code

Buon divertimento.

2~ Un'immagine base per una chiavetta USB da 128MB

*{Use case:}* Create a default image with some components removed in order to fit on a 128MB USB key with a little space left over to use as you see fit.

When optimizing an image to fit a certain media size, you need to understand
the tradeoffs you are making between size and functionality. In this
example, we trim only so much as to make room for additional material within
a 128MB media size, but without doing anything to destroy the integrity of
the packages contained within, such as the purging of locale data via the
/{localepurge}/ package, or other such "intrusive" optimizations. Of
particular note, we use #{--debootstrap-options}# to create a minimal system
from scratch.

code{

 $ lb config -k 486 --apt-indices false --apt-recommends false --debootstrap-options "--variant=minbase" --firmware-chroot false --memtest none

}code

Affinché l'immagine funzioni correttamente dobbiamo riaggiungere almeno due
pacchetti raccomandati lasciati fuori dall'opzione #{--apt-recommends
false}#. Vedere {Modificare APT per risparmiare
spazio}#tweaking-apt-to-save-space

code{

 $ echo "user-setup sudo" > config/package-lists/recommends.list.chroot

}code

Costruire quindi l'immagine nel modo consueto:

code{

 # lb build 2>&1 | tee build.log

}code

All'autore del sistema al momento di scrivere, la seguente configurazione ha
prodotto un'immagine di 77MB. Comparabile favorevolmente con i 177MB
prodotta dalla configurazione predefinita nel {Tutorial 1}#tutorial-1.

The biggest space-saver here, compared to building a default image on an
#{i386}# architecture system, is to select only the #{486}# kernel flavour
instead of the default #{-k "486 686-pae"}#. Leaving off APT's indices with
#{--apt-indices false}# also saves a fair amount of space, the tradeoff
being that you need to do an #{apt-get update}# before using /{apt}/ in the
live system. Dropping recommended packages with #{--apt-recommends false}#
saves some additional space, at the expense of omitting some packages you
might otherwise expect to be there. #{--debootstrap-options
"--variant=minbase"}# bootstraps a minimal system from the start. Not
automatically including firmware packages with #{--firmware-chroot false}#
saves some space too. And finally, #{--memtest none}# prevents the
installation of a memory tester.

*{Note:}* A minimal system can also be achieved using hooks, like for example the #{stripped.chroot}# hook found in #{/usr/share/doc/live-build/examples/hooks}#. It may shave off additional small amounts of space and produce an image of 62MB. However, it does so by removal of documentation and other files from packages installed on the system. This violates the integrity of those packages and that, as the comment header warns, may have unforeseen consequences. That is why using a minimal /{debootstrap}/ is the recommended way of achieving this goal.

2~ Un desktop GNOME localizzato e l'installatore

*{Use case:}* Create a GNOME desktop image, localized for Switzerland and including an installer.

Si vuole creare un'immagine iso ibrida per architettura i386 usando il
nostro desktop preferito, in questo caso GNOME, contenente tutti gli stessi
pacchetti che verrebbero installati dall'installatore Debian standard per
GNOME.

Il problema iniziale è di scoprire i nomi dei task della lingua appropriati,
attualmente, live-build non aiuta in questo. Si può essere fortunati o
arrivarci con vari tentativi, ma c'è uno strumento #{grep-dctrl}# il quale
può essere utilizzato per scavare nelle descrizioni in tasksel-data, perciò
assicursi di avere entrambi questi pacchetti:

code{

 # apt-get install dctrl-tools tasksel-data

}code

Ora si possono cercare i task appropriati:

code{

 $ grep-dctrl -FTest-lang de /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: german

}code

Con questo comando, si è chiaramente scoperto che il task si chiama
german. Ora per trovare i task correlati:

code{

 $ grep-dctrl -FEnhances german /usr/share/tasksel/descs/debian-tasks.desc -sTask
 Task: german-desktop
 Task: german-kde-desktop

}code

Durante il boot verrà generata la localizzazione *{de_CH.UTF-8}* e
selezionato il layout di tastiera *{ch}, mettiamo ora insieme questi
pezzi. Ricordando che i metapacchetti task iniziano con #{task-}# (come
descritto in {Usare metapacchetti}#using-metapackages), specifichiamo questi
parametri d'avvio per la lingua, quindi aggiungiamo i pacchetti con priorità
standard e tutti i metapacchetti task al nostro elenco in questo modo:

code{

 $ mkdir live-gnome-ch
 $ cd live-gnome-ch
 $ lb config \
     -a i386 \
     -k 486 \
     --bootappend-live "boot=live config locales=de_CH.UTF-8 keyboard-layouts=ch" \
     --debian-installer live
 $ echo '! Packages Priority standard' > config/package-lists/standard.list.chroot
 $ echo task-gnome-desktop task-german task-german-desktop >> config/package-lists/desktop.list.chroot
 $ echo debian-installer-launcher >> config/package-lists/installer.list.chroot

}code

Notare che è stato incluso il pacchetto debian-installer-launcher in modo da
poter lanciare l'installer dal desktop della live, e che è stato anche
specificato il kernel 486, dato che attualmente è necessario che il kernel
dell'installer e quello del sistema live coincidano affinché il launcher
funzioni correttamente.
