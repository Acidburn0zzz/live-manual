:B~ Personalizzare l'installazione dei pacchetti

1~customizing-package-installation Personalizzare l'installazione dei
pacchetti

Forse la personalizzazione più di base di un sistema Debian Live è la scelta
dei pacchetti da includere nell'immagine. Questo capitolo vi guiderà tra le
varie opzioni della costruzione per personalizzare l'installazione dei
pacchetti del live-build. Le ampie scelte che influenzano quali pacchetti
possono essere installati sono le aree della distribuzione e degli
archivi. Per essere sicuri di avere una decente velocità di scarico,
dovreste usare un mirror a voi vicino. Si possono aggiungere i propri
repository per backports, experimental o pacchetti personali, o aggiungere
direttamente i pacchetti come file. È possibile definire una propria lista
di pacchetti da includere, usare una lista predefinita del live-build, usare
tasks #{tasksel}#, o una combinazione di tutti e tre. Infine una serie di
opzioni dà un certo controllo con apt. o se si preferisce aptitude, nella
fase di compilazione quando i pacchetti sono installati. Cio può tornare
utile se si usa un proxy, se si vuole disabilitare l'installazione dei
pacchetti raccomandati per risparmiare spazio o controllare quali versione
dei pacchetti sono installati con il pinning, giusto per citare alcune
possibilità.

2~ Sorgenti dei pacchetti

3~ Distribuzione, le area di archivio e le modalità

La distribuzione che viene scelta ha il più ampio impatto sui pacchetti
disponibili per essere inclusi nella immagine live. Specificando il nome in
codice, il predefinito è #{squeeze}# per la versione  Squeeze del
live-build. Qualsiasi attuale distribuzione mantenuta negli archivi Debian
può essere qui specificata dal suo nome in codice. (Vedere il glossario per
maggiori dettagli {Terms}#). L'opzione #{--distribution}# non solo influenza
la sorgente dei pacchetti dell'archivio, ma indica al #{live-build}# come
comportarsi per compilare ciascuna distribuzione supportata. Ad esempio se
si vuole compilare per un rilascio *unstable*, Sid, specificare:

code{

$ lb config --distribution sid

}code

All'interno dell'archivio della distribuzione, ci sono altre importanti
suddivisioni.In Debian queste sono #{main}#, #{contrib}# e
#{non-free}#. Soltanto #{main}# contiene il software che è parte ufficiale
della distribuzione Debian, da qui il fatto che sono i predefiniti. Devono
essere specificati una o più valori, es.

code{

$ lb config --archive-areas "main contrib"

}code

Un supporto sperimentale è disponibile per alcune derivate di Debian
attraverso l'opzione #{--mode}#. Per impostazione predefinita, questa
opzione è impostata su #{debian}#, anche se stai cercando di costruire un
sistema diverso da Debian. Se si specifica #{--mode ubuntu}# o #{--mode
emdebian}#, saranno suppottati i nomi delle distribuzione e le aree degli
archivi per la derivata specificata e non quelli di Debian. Le modalità
cambiano anche il comportamento di live-build per adattarlo alle derivate.

*Nota:* I progetti per i quali sono state aggiunte tali modalità sono i principali responsabili nel supportare gli utenti di queste opzioni. Il progetto Debian Live, a sua volta, fornisce sostegno allo sviluppo solamente sulla base best-effort, sulla base del feedback dei progetti derivati così come non sviluppiamo o sosteniamo queste derivate.

3~ Mirror delle distribuzioni

L'archivio Debian è replicato attraverso una grande rete di mirror per tutto
il mondo così che chiunque in qualsiasi Paese può selezionare il mirror più
vicino per la migliore velocità di scaricamento. Ciascuna delle opzioni
#{--mirror-*}# governa quale mirror della distribuzione è usato nei vari
stadi della compilazione. Ricordate dal {Stages of the build}# stadi della
compilazione che  lo stadio *bootstrap* è quando il chroot è inizialmente
popolato da debootstrap con un sistema minimo, e lo stadio *chroot* è quando
il chroot per costruire il file system del sistema live è compilato. Così,
sono usati i corrispondenti mirror per le varie fasi, ed in seguito, nella
fase *binary* sono usati i valori di #{--mirror-binary}# e
#{--mirror-binary-security}# sostituendo qualsiasi altro mirror usato nelle
fasi iniziali.

3~distribution-mirrors-build-time Mirror delle distribuzioni usati nelle
fasi di compilazione

Per impostare i mirror delle distribuzioni usati nelle fasi di compilazione
per puntare ad un mirror locale, è sufficiente impostare
#{--mirror-bootstrap}# #{--mirror-chroot-security}# come segue.

code{

$ lb config --mirror-bootstrap http://localhost/debian/ \
            --mirror-chroot-security http://localhost/debian-security/

}code

Il mirror chroot, specificato da #{--mirror-chroot}#, si prefigura al valore
di #{--mirror-bootstrap}#.

3~ Mirror delle distribuzioni usate al run time

L'opzione #{--mirror-binary*}# governa i mirror delle distribuzioni inseriti
nell'immagine binaria. Questi possono essere usati per installare pacchetti
addizionali mentre il sistema live è in funzione. Le impostazioni
predefinite impiegano #{cdn.debian.net}#, un servizio che sceglie un mirror
geograficamente vicino basandosi sul numero IP dell'utente. Questo è una
scelta conveniente quando non si può pronosticare quale sia il mirror
migliore per tutti gli utenti. Oppure si può specificare il proprio valore
come mostrato nel seguente esempio. Una immagine compilata con questa
configurazione è adatta, solamente, per gli utenti di una rete dove è
raggiungibile il "#{mirror}#".

code{

$ lb config --mirror-binary http://mirror/debian/ \
            --mirror-binary-security http://mirror/debian-security/

}code

3~additional-repositories Repository addizionali

Si possono aggiungere altri repository, ampliando così la scelta dei
pacchetti al di la di quelli disponibili per la distribuzione di
destinazione. Questi possono essere, per esempio, per i backports, per
experimental pacchetti personali. Per configurare repository addizionali,
creare i file #{config/chroot_sources/your-repository.chroot}#, e/o
#{config/chroot_sources/your-repository.binary}#. Come con le opzioni
#{--mirror-*}#, queste governeranno i repository usati nella fase *chroot*
quando si compila l'immagine, e nella fase *binary*, es. per usarli quando
il sistema live è avviato.

Per esempio, #{config/chroot_sources/live.chroot}# permette di installare
pacchetti dal repository debian live snapshot al sistema live .

code{

deb http://live.debian.net/ sid-snapshots main contrib non-free

}code

Se si aggiunge la stessa riga in #{config/chroot_sources/live.binary}#, il
repository verrà aggiunto alla directory del sistema live
#{/etc/apt/sources.list.d/}#.

Se il file esiste, saranno caricati automaticamente.

Si dovrebbe mettere la chiave GPG usata per firmare il repository in un file
#{config/chroot_sources/your-repository.{binary,chroot}.gpg}#.

Nota: alcuni repository di pacchetti preconfigurati sono disponibili per una
facile selezione attraverso l'opzione #{--repository}#, es. per abilitare
live snapshots, è sufficiente un semplice comando:

code{

$ lb config --repository live.debian.net

}code

2~choosing-packages-to-install Scegliere i pacchetti da installare

Ci sono diversi modi per scegliere quali pacchetti live-build installerà
nell'immagine, che coprono una vasta gamma di esigenze diverse.

3~ Scegliere pochi pacchetti

Quando il numero dei pacchetti d'aggiungere è piccolo, specificare
semplicemente #{--packages}#. Per esempio:

code{

$ lb config --packages "package1 package2 package3"

}code

Il comportamento di live-build quando si specifica un pacchetto che non
esiste è determinato dalla scelta delle utilità di APT. Vedere {Choosing apt
or aptitude}# scegliere apt o aptitude per ulteriori dettagli.

Se si necessita d'installare una quantità maggiore di pacchetti o si
desiderà flessibilità per quali pacchetti installare, usare le liste dei
pacchetti come discusso nella prossima sezione {Package lists}#liste dei
pacchetti.

3~package-lists Liste dei pacchetti

Le liste dei pacchetti sono un potente mezzo per esprimere quali pacchetti
devono essere installati. La sintassi della lista supporta i file inclusi e
sezioni condizionali che rende semplice la creazione di liste da altre liste
e adattarle per l'uso in configurazioni multiple. Si può usare la lista
predefinita, che prevede una selezione una soluzione modulari di pacchetti
scelti per ciascuno dei maggiori ambienti desktop e altre speciali liste,
così come liste standard e altre che vi ci sono basate sopra. È inoltre
possibile fornire le proprie liste di pacchetti, oppure usare una
combinazione di entrambi.

3~ Liste dei pacchetti predefinite

Il modo più semplice per usare le liste è di specificarne una o più con
l'opzione #{--packages-lists}#. Per esempio:

code{

$ lb config --packages-lists "gnome-core rescue"

}code

In aggiunta a queste liste, live-build supporta quattro liste dei pacchetti
virtuali: #{gnome-desktop}#, #{kde-desktop}#, #{lxde-desktop}# and
#{xfce-desktop}#, ciascuna delle quali provvede ad una maggiore selezione di
pacchetti che corrispondono a quelli predefiniti dal Debian Installer per
ciascun ambiente desktop. Vedere {Desktop and language
tasks}#desktop-and-language-tasks per ulteriori dettagli.

Nota: Le immagini pre-costruite di GNOME, KDE, LXDE e XFCE disponibili per
essere scaricate da http://live.debian.net sono costruite usando le
corrispondenti liste virtuali #{*-desktop}#.

La locazione predefinita per i lists file sul sistema è
#{/usr/share/live/build/lists/}#. Per determinare i pacchetti in una data
lista, leggi il file corrispondente, facendo attenzione ai file inclusi e
condizionali, come descritto nella sezioni seguenti.

3~ Liste dei pacchetti locale

Si possono integrare o sostituire del tutto le liste fornite usando le liste
dei pacchetti locali inserite in #{config/chroot_local-packageslists/}#.

Per essere processate, le liste dei pacchetti che si trovano nella
directory, devono avere il suffisso #{.list}#. Le liste dei pacchetti locali
sovrascrivono sempre quelle fornite con il live-build. Questo può causare
effetti indesiderati, perciò raccomandiamo di usare nomi univoci per le
liste dei pacchetti locale.

3~ Liste dei pacchetti binari locali

Nel caso in cui si desidera includere qualche pacchetto .deb ai media live
#{pool/}# (senza installarli sull'immagine live) bisogna usare le liste
usando le liste dei pacchetti binari locali inserite in
#{config/binary_local-packageslists/}#. Tali supporti possono essere
utilizzati come immagine di installazione personalizzata di Debian per
installazione fuori linea.

Per essere processate le liste dei pacchetti che si trovano nella directory
deve avere un suffisso #{.list}#.

3~ Estensione di una lista di pacchetti forniti usando includes

Le liste dei pacchetti che sono inclusi nel live-build fa un estensivo uso
di includes. Far riferimento a questi nella directory
#{/usr/share/live/build/lists/}#, in quanto servono come buoni esempi per
scrivere le proprie liste.

Per esempio, per creare una lista che includa la lista predefinita #{gnome}#
più iceweasel, creare {config/chroot_local-packageslists/mygnome.list}# con
i seguenti contenuti:

code{

#include <gnome> iceweasel

}code

3~ Usare condizioni all'interno delle liste dei pacchetti

Qualsiasi delle variabili di configurazione del live-build conservate in
#{config/*}# (meno quelli con il prefisso #{LB_}#) possono essere utilizzate
per istruzioni condizionali nella lista dei pacchetti. Generalmente, questo
significa che qualsiasi opzione #{lb config}# in lettera maiuscola e con
trattini cambia in trattino basso. Ma in pratica, è il solo che influenza la
selezione dei pacchetti che abbia senso, così come #{DISTRIBUTION}#,
#{ARCHITECTURE}# o #{ARCHIVE_AREAS}#.

Per esempio, per installare #{ia32-libs}# se è specificata #{--architecture
amd64}#:

code{

#if ARCHITECTURE amd64 ia32-libs #endif

}code

Si può provare per ognuno di una serie di valori, es. per installare
#{memtest86+}# sia per #{--architecture i386}# o #{--architecture amd64}#
come specificato:

code{

#if ARCHITECTURE i386 amd64 memtest86+ #endif

}code

Si può provare un'altra variabile che contenga più di un valore, es. per
installare #{vrms}# sia da #{contrib}# o da #{non-free}# come specificato
via #{--archive-areas}#:

code{

#if ARCHIVE_AREAS contrib non-free vrms #endif

}code

A conditional may surround an #{#include}# directive:

code{

#if ARCHITECTURE amd64 #include <gnome-full> #endif

}code

The nesting of conditionals is not supported.

3~ Tasks

Il Debian Installer offre all'utente la scelta di varie liste di pacchetti
pre-selezionate, ognuna delle quali focalizzata su un particolare tipo di
sistema, oppure i compiti del sitema possono essere utilizzati come
"Graphical desktop environment", "Mail server" o "Laptop". Queste liste sono
chiamate "tasks"e sono supportate da APT atraverso il campo"Task:". Si
possono specificare uno o più task nel live-build per mezzo dell'opzione
#{--tasks}#, come nell'esempio seguente.

code{

$ lb config --tasks "mail-server file-server"

}code

I principali task disponibili nel Debian installer possono essere elencati
nel sistema live con #{tasksel --list-tasks}#. I contenuti di ogni task,
inclusi quelli non inclusi in questa lista, possono essere esaminati con
#{tasksel --task-packages}#.

3~desktop-and-language-tasks Task per i desktop e  i linguaggi

I task per i desktop e i linguaggi sono un caso speciale. Nel Debian
Installer, se il media è stato preparato per un particolare ambiente
desktop, il corrispondente task verrà automaticamente installato. Perciò ci
sono i task #{gnome-desktop}#, #{kde-desktop}#, #{lxde-desktop}# and
#{xfce-desktop}#, nessuno dei quali è offerto nel menù #{tasksel}#. Allo
stesso modo, non c'è nessuna voce nel menù per i task dei linguaggi, ma la
scelta del linguaggio dell'utente durante l'installazione influenza la
selezione dei corrispondenti task dei linguaggi.

Perciò, nel live-build a questi casi speciali sono accordate speciali
considerazioni, ma con tre differenze notevoli al momento in cui si scrive.

Primo, non è stata fatta ancora nessuna previsione per i task dei linguaggi,
sebbene una sotto impostazione di questi pacchetti è inclusa specificando
#{lb config --language}#. Se servono questi task, i quali includono cose
come specifici caratteri per il linguaggio e i metodi di input dei
pacchetti, si deve specificare nella configurazione. Per esempio:

code{

$ lb config --tasks "japanese japanese-desktop japanese-gnome-desktop"

}code

Secondo, live-build supporta #{*-desktop}# liste virtuali di pacchetti per
ogni tipo di desktop come menzionato sopra, il quale seleziona la lista
predefinita #{standard-x11}#, il corrispondente task #{*-desktop}# e tre
task addizionali: #{desktop}#, #{standard}# and #{laptop}#. Così per
esempio, se si specifica #{--packages gnome-desktop}#, è l'equivalente di
specificare #{--packages standard-x11 --tasks "gnome-desktop desktop
standard laptop"}#.

Terzo, se sono selezionati qualsiasi dei task per i vari desktop, sia
esplicitamente con #{--tasks}#o implicitamente con #{--packages}#,
live-build pre-imposterà i corrispondenti valori desktop per il Debian
Installer (se esso è incluso) per garantire che segua le proprie regole per
l'installazione dei vari diversi desktop.

*{Note:}* There is also an experimental #{--language}# option that has an overlapping purpose with language tasks. For any language for which it is known that there are #{*-l10n}# packages, if #{--language}# is specified, those packages will be installed. Furthermore, if any #{syslinux}# templates matching the language are found, they will be used instead of the default English templates. The package selection done by #{--language}# is a poor approximation of language tasks, as it requires that the list of packages to include per language be maintained internally in live-build, and besides, language tasks are more comprehensive and flexible. However, the #{syslinux}# aspect is still useful. Thus, if you use #{--bootloader syslinux}# and templates for the specified language exist either in #{/usr/share/live/build/templates/syslinux/}# or #{config/templates/syslinux/}#, consider using this option, possibly in combination with tasks to ensure all relevant packages are installed. For example:

code{

$ lb config --language es

}code Even so, it is limited in that it only supports a single language and
a single bootloader. Therefore, for all of these reasons, the future of this
option is under review, possibly to be replaced with something entirely
different in the next major release of live-build.

2~installing-modified-or-third-party-packages Installing modified or
third-party packages

Whilst it is against the philosophy of Debian Live, it may sometimes be
necessary to build a Live system with modified versions of packages that are
in the Debian repository. This may be to modify or support additional
features, languages and branding, or even to remove elements of existing
packages that are undesirable. Similarly, "third-party" packages may be used
to add bespoke and/or proprietary functionality.

This section does not cover advice regarding building or maintaining
modified packages. Joachim Breitner's 'How to fork privately' method from
http://www.joachim-breitner.de/blog/archives/282-How-to-fork-privately.html
may be of interest, however. The creation of bespoke packages is covered in
the Debian New Maintainers' Guide at http://www.debian.org/doc/maint-guide/
and elsewhere.

There are two ways of installing modified custom packages:

_* #{chroot_local-packages}#

_* Using a custom APT repository

Using #{chroot_local-packages}# is simpler to achieve and useful for
"one-off" customizations but has a number of drawbacks, whilst using a
custom APT repository is more time-consuming to set up.

3~ Using #{chroot_local-packages}# to install custom packages

To install a custom package, simply copy it to the
#{config/chroot_local-packages/}# directory. Packages that are inside this
directory will be automatically installed into the live system during build
- you do not need to specify them elsewhere.

Packages *{must}* be named in the prescribed way. One simple way to do this
is to use #{dpkg-name}#.

Using #{chroot_local-packages}# for installation of custom packages has
disadvantages:

_* It is not possible to use secure APT.

_* You must install all appropriate packages in the
#{config/chroot_local-packages/}# directory.

_* It does not lend itself to storing Debian Live configurations in revision
control.

3~ Using an APT repository to install custom packages

Unlike using #{chroot_local-packages}#, when using a custom APT repository
you must ensure that you specify the packages elsewhere. See {Choosing
packages to install}#choosing-packages-to-install for details.

Whilst it may seem unnecessary effort to create an APT repository to install
custom packages, the infrastructure can be easily re-used at a later date to
offer updates of the modified packages.

3~ Custom packages and APT

live-build uses APT to install all packages into the live system so will
therefore inherit behaviours from this program. One relevant example is that
(assuming a default configuration) given a package available in two
different repositories with different version numbers, APT will elect to
install the package with the higher version number.

Because of this, you may wish to increment the version number in your custom
packages' #{debian/changelog}# files to ensure that your modified version is
installed over one in the official Debian repositories. This may also be
achieved by altering the live system's APT pinning preferences - see {APT
pinning}#apt-pinning for more information.

2~ Configuring APT at build time

You can configure APT through a number of options applied only at build
time. (APT configuration used in the running live system may be configured
in the normal way for live system contents, that is, by including the
appropriate configurations through #{config/chroot_local_includes/}#.) For a
complete list, look for options starting with #{apt}# in the #{lb_config}#
man page.

3~choosing-apt-or-aptitude Choosing apt or aptitude

You can elect to use either #{apt}# or #{aptitude}# when installing packages
at build time. Which utility is used is governed by the #{--apt}# argument
to #{lb config}#. Choose the method implementing the preferred behaviour for
package installation, the notable difference being how missing packages are
handled.

_* #{apt}#: With this method, if a missing package is specified, the package
installation will fail. This is the default setting.

_* #{aptitude}#: With this method, if a missing package is specified, the
package installation will succeed.

3~ Using a proxy with APT

One commonly required APT configuration is to deal with building an image
behind a proxy. You may specify your APT proxy with the #{--apt-ftp-proxy}#
or #{--apt-http-proxy}# options as needed, e.g.

code{

lb config --apt-http-proxy http://proxy/

}code

3~ Tweaking APT to save space

You may find yourself needing to save some space on the image media, in
which case one or the other or both of the following options may be of
interest.

If you don't want to include APT indices in the image, you can omit those
with:

code{

$ lb config --binary-indices false

}code

This will not influence the entries in /etc/apt/sources.list, but merely
whether /var/lib/apt contains the indices files or not. The tradeoff is that
APT needs those indices in order to operate in the live system, so before
performing #{apt-cache search}# or #{apt-get install}#, for instance, the
user must #{apt-get update}# first to create those indices.

If you find the installation of recommended packages bloats your image too
much, you may disable that default option of APT with:

code{

$ lb config --apt-recommends false

}code

The tradeoff here is that recommended packages are defined as "packages that
would be found together with this one in all but unusual installations"
(Debian Policy Manual, Â§7.2). This may lead to some packages that you
actually need being omitted, so we suggest you review the difference this
makes to your packages list (see the #{binary.packages}# file generated by
#{lb build}#) and re-include in your list any missing packages that you
still want installed.

3~ Passing options to apt or aptitude

If there is not an #{lb config}# option to alter APT's behaviour in the way
you need, use #{--apt-options}# or #{--aptitude-options}# to pass any
options through to your configured APT tool. See the man pages for #{apt}#
and #{aptitude}# for details.

3~apt-pinning APT pinning

For background, please first read the #{apt_preferences(5)}# man page. APT
pinning can be configured either for build time, or else for run time. For
the former, create #{config/chroot_apt/preferences}#. For the latter, create
#{config/chroot_local-includes/etc/apt/preferences}#.

Let's say you are building a Squeeze live system but need all #{live-*}#
packages to be installed from Sid at build time. You need to add Sid to your
APT sources and pin it so that only the packages you want are installed from
it at build time and all others are taken from the target system
distribution, Squeeze. The following will accomplish this:

code{

$ echo "deb http://mirror/debian sid main" >
config/chroot_sources/sid.chroot $ cat >>config/chroot_apt/preferences <<END
Package: live-* Pin: release n=sid Pin-Priority: 600

Package: * Pin: release n=sid Pin-Priority: 1 END

}code

