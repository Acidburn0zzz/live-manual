:B~ Nozioni di base

1~ nozioni di base Nozioni di base

Questo capitolo contiene una breve panoramica del processo di generazione e
le istruzioni per utilizzare i tre tipi di immagine più comunemente
utilizzati. Il tipo di immagine più versatile, # {iso-hybrid} #, può essere
usata su una macchina virtuale, supporto ottico o dispositivo di
archiviazione  portabile USB.  In alcuni casi particolari potrebbe essere
adatto per i dispositivi USB #{usb-hdd}#.Il capitolo termina con le
istruzioni per costruire e usare una immagine  # {net} #, la quale è un poco
più complessa per una installazione lato server. Questo è un concetto molto
avanzato per chi non ha familiarità con una installazione via rete, ma è
incluso qui dato che una volta che il setup è stato fatto è molto comodo
testare e distribuire le immagini per fare il boot dalla rete locale senza
il problema di avere immagini su supporti ottici.

2~ Cosa è un sistema live?

Per sistema live genericamente si intende un sistema operativo che può
essere avviato da un supporto rimovibile, come un CD-ROM, penna USB o via
rete pronto per essere usato senza installazione su hard disk, con una auto
configurazione fatta all'avvio (vedere {Terms}#terms).

Debian Live, è il sistema operativo Debian GNU/Linux, costruito per diverse
architetture ( attualmente amd64, i386, powerpc and sparc). Esso è
costituito dalle seguenti parti:

_* *{Linux kernel image}*, comunemente chiamato #{vmlinuz*}#

_* *{Initial RAM disk image (initrd)}*: Un disco RAM creato per il boot di
Linux, contiene i moduli necessari  e alcuni script per montare l'immagine
di sistema.

_* *{System image}*: Il file system del sistema operativo. Normalmente è
scelta una immagine del file system compressa come SquashFS, per ridurre le
dimensioni dell'immagine. Nota che essa è solo in lettura. Così, durante il
boot il sistema Debian Live userà un disco RAM e il meccanismo 'union' per
attivare i file di scrittura all'interno del sistema in esecuzione. Ad ogni
modo, tutte le modifiche verranno perse alla chiusura a meno che non si usi
l'opzione persistenza (see persistence).

% FIXME: <xref linkend="persistence"/>

_* *{Bootloader}*:  Una piccola porzione di codice predisposto per l'avvio
del supporto scelto, presenta un prompt o un menù per la selezione di
opzioni/configurazioni. Esso carica il kernel Linux ed il suo initrd per
eseguire il file system associato. Possono essere usate diverse soluzioni in
base al supporto di destinazione ed al tipo di file system contenenti le
componenti precedentemente citate: isolinux per il boot da CD o DVD nel
formato ISO9660, syslinux per supporti HDD o USB per il boot da una
partizione VFAT, extlinux per le partizioni ext/2/3/4 e btrfs, pxelinux per
il netboot PXE, Grub per partizioni ext2/3/4, etc.

È possibile usare live-builb per creare una immagine di sistema secondo le
vostre specifiche, scegliere un kernel Linux, il suo initrd ed un bootloader
per avviarlo, il tutto in un unico formato indipendente dal media. (ISO9660,
immagine del disco.etc.)

2~Primo passo: creare una immagine ISO

La seguente sequenza di comandi di live-build creerà una immagine ISO
standard di base contenente solamente il sistema Debian standard senza
Xorg. Esso è adatto per essere masterizzato su CD o DVD o anche copiato in
una penna USB (as per {Copying USB/HDD image to a USB
stick}#copying-usb-hdd-image, specifying ".iso" extension where ".img" is
indicated).

Per iniziare lanciare il comando #{lb config}# il quale creerà una struttura
gerarchica "config/" nella directory corrente che verrà utilizzata per gli
altri comandi:

code{

$ lb config

}code

Non passando nessun parametro a #{lb config}# verranno utilizzate le
impostazione predefinite  (vedere {The lb config command}#lb-config).

Ora che si ha la struttura gerarchica "/config/" si può creare l'immagine
con il comando lb build:

code{

# lb build

}code

Questo processo può richiedere un del tempo, in base alla velocità della
connessione di rete (vedere {The lb build command}#lb-build).

3~provare-una-iso-con-qemu Provare una immagine ISO con Qemu

Provare una ISO è semplice:

code{

# apt-get install qemu

$ qemu -cdrom binary.iso

}code

3~provare-una-iso-con-virtualbox Provare una immagine ISO con virtualbox-ose 

Al fine di provare la ISO con virtualbox-ose:

code{

# apt-get install virtualbox-ose virtualbox-ose-dkms

$ virtualbox

}code

Creare una nuova macchina virtuale, modificare le impostazione di
archiviazione in modo da usare binary.iso come dispositivo CD/DVD ed avviare
la macchina.

Nota: Se vuoi provare con virtualbox-ose un sistema-live con Xorg, devi
installare il pacchetto Virtualbox con i driver Xorg,
virtualbox-ose-guest-x11, nella configurazione di live-build. Altrimenti, la
risoluzione sarà limitata a 800x600.

code{

# lb config --packages virtualbox-ose-guest-x11

}code

3~masterizzare-una-immagine-iso Masterizzare una immagine ISO su un supporto
fisico

Masterizzare una immagine ISO è semplice:

code{

# apt-get install wodim

$ wodim binary.iso

}code

2~ Creare una immagine USB/HDD

La seguente sequenza di comandi creerà una immagine iniziale USB/HDD
contenente solamente un sistema Debian standard senza X.org. Adatta per fare
il boot da penna USB, disco rigido USB, e da svariati altri dispositivi di
archiviazione portatili. Normalmente, per questo scopo può essere usata una
immagine ibrida, ma se si ha un BIOS che non supporta le immagini ibride, o
si vuole usare lo spazio rimanente su un supporto per una partizione
persistente, allora occorre una immagine USB/HDD.

Nota: se si è creata una immagine ISO con gli esempi precedenti, occorre
pulire la directory di lavoro con il #{lb clean}# comando (vedere {The lb
clean command}#lb-clean):

code{

$ lb clean --binary

}code

Lanciare il #{lb config}# comando con i parametri per configurare la
struttura #{config/}# gerarchica per creare una immagine USB/HDD  digitare

code{

$ lb config -b usb-hdd

}code

Ora creare l'immagine con il #{lb build} comando:

code{

# lb build

}code

3~copiare-una-immagine-usb-hdd Copiare una immagine USB/HDD su una penna USB

L'immagine binaria generata contiene una partizione VFAT e il bootloader
syslinux, pronti per essere scritti direttamente su una penna USB. Inserire
una chiavetta USB con una dimensione maggiore di quella di binary.img e
digitare:

code{

$ dd if=binary.img of=${USBSTICK}

}code

dove${USBSTICK}}#è il nome del dispositivo,come#{/dev/sdb}# (non una
partizione come #{/dev/sdb1}#!); si può trovare il giusto nome del supporto
guardando l'output di #{dmesg}# dopo aver inserito la chiavetta USB, per
esempio, o meglio ancora, #{ls -l /dev/disk/by-id}#.

*{Questo sovrascriverà qualsiasi altro dato nella chiavetta!}*

Nota:Come disquisito in precedenza, questo stesso processo può essere usato
per #{iso-hybrid}# nome immagine,( col suffisso #{-hybrid.iso}#,) ma non
#{iso}#nome immagine.

3~provare-una-immagine-usb-hdd-con-qemu Provare una immagine USB/HDD con
Qemu

code{

# apt-get install qemu

$ qemu -hda binary.img

}code

3~ Usare lo spazio rimanente sulla penna USB

Se si vuole usare lo spazio libero che rimane dopo l'installazione di
binary.img si può usare uno strumento di partizionamento come #{gparted}# or
#{parted}# per creare una nuova partizione sulla penna.  La prima partizione
sarà usata dal sistema Debian Live.

code{

# gparted ${USBSTICK}

}code

Dopo la creazione della partizione, si deve creare il file system. Una
scelta potrebbe essere ext4.

code{

# mkfs.ext4 ${USBSTICK}

}code

Se si vuole usare questa partizione dati con windows, usare FAT32.

code{

# mkfs.vfat -F 32

}code

*{Ricorda: ogni volta che si installa una nuova binary.img nella penna, verranno persi tutti i dati, considerato che la partizione verrà sovrascritta con i contenuti della nuova immagine.}*

2~ creare-una-immagine-netboot Creare una immagine netboot

La seguente sequenza di comandi creerà una immagine netboot iniziale
contenete un sistema Debian standard senza X.org. Essa è adatta per il boot
via rete.

Nota: se è stato usato uno dei precedenti esempi, bisogna pulire la
directory di lavoro con il #{lb clean}# comando:

code{

$ lb clean --binary

}code

Lanciare il #{lb config}# comando con i parametri per configurare la
struttura "config/" gerarchica  per creare una immagine netboot:

code{

$ lb config -b net --net-root-path "/srv/debian-live" --net-root-server
"192.168.0.1"

}code

Diversamente dalle immagini nei formati ISO e USB/HDD, il boot via rete non
supporta l'accesso diretto come immagine sul client, ma occorre che venga
reso disponibile via NFS. Le opzioni net-root-path e  net-root-server
specificano, rispettivamente, il percorso e il server dove saranno
localizzate le immagini del server NFS per il boot.

Ceare l'immagine con il #{lb build}# comando:

code{

# lb build

}code

Nel boot via rete il client avvia un software minimo che normalmente risiede
nel EPROM della scheda ethernet.Questo programma invia una richiesta al DHCP
per ottenere un indirizzo IP e informazioni di quello che deve fare in
seguito. In genere, il passo successivo è ottenere un livello superiore del
bootloader per mezzo del protocollo TFTP. Questo potrebbe essere pxelinux,
GRUB, o fare perfino il boot direttamente di un sistema operativo come
Linux.

Per esempio, se si scompatta l'archivio binary-net.tar.gz nella directory
/srv/debian-live, si avrà l'immagine del file system in
live/filesystem.squashfs e il kernel, initrd e il bootloader pxelinux in
tftpboot/debian-live/i386.

Si devono configurare tre servizi sul server per abilitare il netboot.

3~ DHCP server

Si deve configurare il server DHCP della rete per essere sicuri di dare un
indirizzo IP per permettere il boot via rete al client, e notificare la
posizione del bootloader PXE.

Ecco un esempio, scritto per un server ISC DHCP #{isc-dhcp-server}# nel file
di configurazione /etc/dhcp/dhcpd.conf;

% FIXME

code{

subnet 192.168.1.0 netmask 255.255.255.0 {   # 192.168.1.0/24

  # IP addresses available for guests
  range 192.168.1.100 192.168.1.149;

  # allow booting from the net
  allow bootp;

  # for net booting, server where the first file to be loaded (by TFTP
  # protocol) ("filename" following definition) liesÂ : so the TFTP
  # server's name.
  next-server myserver;

  # net boot configuration for guests with a PXE clientÂ :
  if substring (option vendor-class-identifier, 0, 9) = "PXEClient" {
    # Note: all files for PXE are relatives to the TFTP server's root

    # PXE bootloader (first program to be loaded, by TFTP)
    filename "pxelinux.0";

  }
}

}code

3~ TFTP server

Questo fornisce il kernel e il ramdisk iniziale per l'avvio del sistema.

Deve essere installato il pacchetto tftpd. Esso mette a disposizione tutti i
file contenuti in una direcotory root, comunemente /srv/tftp. Per permettere
l'uso dei file in /srv/debian-live/tftpboot, lanciare come root il seguente
comando:

code{

dpkg-reconfigure -plow tftpd-hpa

}code

e metterli nella nuova directory del server tftp quando viene richiesto.

3~ NFS server

Una volta che il computer ospite ha scaricato e fatto il boot del kernel
Linux e caricato il suo initrd, esso cercherà di montare l'immagine del file
system Live via il server NFS.

Bisogna installare il pacchetto nfs-kernel-server

In seguito rendere disponibile l'immagine del file system aggiungendo la
seguente riga in /etc/exports:

code{

/srv/debian-live *(ro,async,no_root_squash,no_subtree_check)

}code

e dire al server NFS del nuovo exports con il seguente comando:

code{

# exportfs -rv

}code

configurare questi tre servizi può essere un poco problematico. Serve un
poco di pazienza per farli funzionare assieme. La sezione TFTP Net Booting
del manuale Debian Installer
http://d-i.alioth.debian.org/manual/en.i386/ch04s05.html può essere d'aiuto
dato che il processo è molto simile.

3~ Come provare una netboot

La creazione dell'immagine netboot è semplice con live-build magic, ma
provare l'immagine su una macchina reale può essere dispendioso in termini
di tempo.

Per rendere la vita semplice, si può usare la virtualizzazione. Ci sono due
soluzioni.

3~ Qemu

_* installare qemu, bridge-utils, sudo.

Editare /etc/qemu-ifup:

code{

#!/bin/sh sudo -p "Password for $0:" /sbin/ifconfig $1 172.20.0.1 echo
"Executing /etc/qemu-ifup" echo "Bringing up $1 for bridged mode..." sudo
/sbin/ifconfig $1 0.0.0.0 promisc up echo "Adding $1 to br0..." sudo
/usr/sbin/brctl addif br0 $1 sleep 2

}code

Procurare. o creare grub-floppy-netboot (nel svn).

Lanciare qemu con "-net nic,vlan=0 -net tap,vlan=0,ifname=tun0"

3~ VMWare Player

_* Installare VMWare Player ("edizione "free as a beer")

_* Creare una directory PXETester, e crearvi un file di testo nominandolo
pxe.vmx

_* Copiarci questo testo:

code{

#!/usr/bin/vmware config.version = "8" virtualHW.version = "4" memsize =
"512" MemAllowAutoScaleDown = "FALSE"

ide0:0.present = "FALSE" ide1:0.present = "FALSE" floppy0.present = "FALSE"
sound.present = "FALSE" tools.remindInstall = "FALSE"

ethernet0.present = "TRUE" ethernet0.addressType = "generated"

displayName = "Test Boot PXE" guestOS = "other"

ethernet0.generatedAddress = "00:0c:29:8d:71:3b" uuid.location = "56 4d 83
72 5c c4 de 3f-ae 9e 07 91 1d 8d 71 3b" uuid.bios = "56 4d 83 72 5c c4 de
3f-ae 9e 07 91 1d 8d 71 3b" ethernet0.generatedAddressOffset = "0"

}code

_* Si può modificare questo file di configurazione (es. cambiando il limite
della memoria a 256)

_* Doppio click su questo file ( o avviare il player VMWare e seleziona
questo file).

_* Quando è in esecuzione premere spazio se viene posta qualche strana
domanda...
