:B~ About this manual

1~about-manual About this manual

This manual serves as a single access point to all documentation related to the Debian Live project and in particular applies to the software produced by the project for the Debian 7.0 "wheezy" release. An up-to-date version can always be found at http://live.debian.net/

While live-manual is primarily focused on helping you build a live system and not on end-user topics, an end-user may find some useful information in these sections: {The Basics}#the-basics covers preparing images to be booted from media or the network, and {Customizing run time behaviours}#customizing-run-time-behaviours describes some options that may be specified at the boot prompt, such as selecting a keyboard layout and locale, and using persistence.

Some of the commands mentioned in the text must be executed with superuser privileges which can be obtained by becoming the root user via #{su}# or by using #{sudo}#. To distinguish between commands which may be executed by an unprivileged user and those requiring superuser privileges, commands are prepended by #{$}# or #{#}# respectively. This symbol is not a part of the command.

2~ For the impatient

While we believe that everything in this manual is important to at least some of our users, we realize it is a lot of material to cover and that you may wish to experience early success using the software before delving into the details. Therefore, we suggest reading in the following order.

First, read this chapter, {About this manual}#about-manual, from the beginning and ending with the {Terms}#terms section. Next, skip to the three tutorials at the front of the {Examples}#examples section designed to teach you image building and customization basics. Read {Using the examples}#using-the-examples first, followed by {Tutorial 1: A standard image}#tutorial-1, {Tutorial 2: A web browser utility}#tutorial-2 and finally {Tutorial 3: A personalized image}#tutorial-3. By the end of these tutorials, you will have a taste of what can be done with Debian Live.

We encourage you to return to more in-depth study of the manual, perhaps next reading {The basics}#the-basics, skimming or skipping {Building a netboot image}#building-netboot-image, and finishing by reading the {Customization overview}#customization-overview and the chapters that follow it. By this point, we hope you are thoroughly excited by what can be done with Debian Live and motivated to read the rest of the manual, cover-to-cover.

2~terms Terms

_* *{Live system}*: An operating system that can boot without installation to a hard drive. Live systems do not alter local operating system(s) or file(s) already installed on the computer hard drive unless instructed to do so. Live systems are typically booted from media such as CDs, DVDs or USB sticks. Some may also boot over the network.

_* *{Debian Live}*: The Debian sub-project which maintains, among others, the live-boot, live-build, live-config and live-manual packages.

_* *{Debian Live system}*: A live system that uses software from the Debian operating system that may be booted from CDs, DVDs, USB sticks, over the network (via netboot images), and over the Internet (via boot parameter #{fetch=URL}#).

_* *{Host system}*: The environment used to create the live system.

_* *{Target system}*: The environment used to run the live system.

_* *{live-boot}*: A collection of scripts used to boot live systems. live-boot was formerly a part of /{live-initramfs}/.

_* *{live-build}*: A collection of scripts used to build customized Debian Live systems. live-build was formerly known as /{live-helper}/, and even earlier known as /{live-package}/.

_* *{live-config}*: A collection of scripts used to configure a live system during the boot process. live-config was formerly a part of /{live-initramfs}/.

_* *{live-manual}*: This document is maintained in a package called live-manual.

_* *{Debian Installer (d-i)}*: The official installation system for the Debian distribution.

_* *{Boot parameters}*: Parameters that can be entered at the bootloader prompt to influence the kernel or live-config.

_* *{chroot}*: The /{chroot}/ program, #{chroot(8)}#, enables us to run different instances of the GNU/Linux environment on a single system simultaneously without rebooting.

_* *{Binary image}*: A file containing the live system, such as binary.iso or binary.img.

_* *{Target distribution}*: The distribution upon which your live system will be based. This can differ from the distribution of your host system.

_* *{stable/testing/unstable}*: The *{stable}* distribution contains the latest officially released distribution of Debian. The *{testing}* distribution is the staging area for the next *{stable}* release. A major advantage of using this distribution is that it has more recent versions of software relative to the *{stable}* release. The *{unstable}* distribution is where active development of Debian occurs. Generally, this distribution is run by developers and those who like to live on the edge. Throughout the manual, we tend to use codenames for the releases, such as wheezy or sid, as that is what is supported by the tools themselves.

2~ Authors

A list of authors (in alphabetical order):

_* Ben Armstrong

_* Brendan Sleight

_* Carlos Zuferri

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~how-to-contribute Contributing to this document

This manual is intended as a community project and all proposals for improvements and contributions are extremely welcome. The preferred way to submit a contribution is to send it to the mailing list. Please see the section {Contact}#contact for more information.

When submitting a contribution, please clearly identify its copyright holder and include the licensing statement. Note that to be accepted, the contribution must be licensed under the same license as the rest of the document, namely, GPL version 3 or later.

The sources for this manual are maintained using the Git version control system (see {Git repositories}#git-repositories). You can check out the latest copy by executing:

code{

$ git clone git://live.debian.net/git/live-manual.git

}code

Prior to submission of your contribution, please preview your work. To preview the live-manual, ensure the packages needed for building are installed by executing:

code{

 # apt-get install make po4a sisu-complete libnokogiri-ruby

}code

You may build the live-manual from the top level directory of your Git checkout by executing:

code{

 $ make build

}code

Since it takes a while to build the manual in all supported languages, you may find it convenient when proofing to build for only one language, e.g. by executing:

code{

 $ make build LANGUAGES=en

}code

It is also possible to build by document type, e.g:

code{

 $ make build FORMATS=pdf

}code

Or combine both, e.g:

code{

 $ make build LANGUAGES=it FORMATS=html

}code

3~ Applying changes

Anyone can directly commit to the repository. However, we ask you to send bigger changes to the mailing list to discuss them first. To push to the repository, you must follow this procedure:

_* Fetch the public commit key:

code{

 $ mkdir -p ~/.ssh/identity.d
 $ wget http://live.debian.net/other/keys/git@live.debian.net \
     -O ~/.ssh/identity.d/git@live.debian.net
 $ wget http://live.debian.net/other/keys/git@live.debian.net.pub \
     -O ~/.ssh/identity.d/git@live.debian.net.pub
 $ chmod 0600 ~/.ssh/identity.d/git@live.debian.net*

}code

_* Add the following section to your openssh-client config:

code{

 $ cat >> ~/.ssh/config << EOF
 Host live.debian.net
     Hostname live.debian.net
     User git
     IdentityFile ~/.ssh/identity.d/git@live.debian.net
 EOF

}code

_* Check out a clone of the manual through ssh:

code{

 $ git clone git@live.debian.net:/live-manual.git
 $ cd live-manual && git checkout debian-next

}code

_* Note that you should commit any changes on the debian-next branch, not on the debian branch.

_* Do not use #{make commit}# unless you are updating translations in this commit, and in that case, do not mix changes to the English manual and translations in the same commit, but use separate commits for each. See the {Translation}#translation section for more details.

_* Write commit messages that consist of complete, meaningful sentences in English, starting with a capital letter and ending with a full stop. Usually, these will start with the form 'Fixing/Adding/Removing/Correcting/Translating', e.g.

code{

 $ git commit -a -m "Adding a section on applying patches."

}code

_* Push the commit to the server:

code{

 $ git push

}code

3~translation Translation

To start a translation for a new language, follow these steps:

_* Translate the *{about_manual.ssi.pot}*, *{about_project.ssi.pot}* and *{index.html.in.pot}* files to your language with your favourite editor (such as /{poedit}/). Send the translated #{.po}# files to the mailing list so that the translation team can check their integrity.

_* To enable a new language in the autobuild it is enough to add the initial translated files to #{manual/po/${LANGUAGE}/}# and run #{make commit}#. And then edit #{manual/_sisu/home/index.html}#.

_* Once the new language is added, you can randomly continue translating the remaining po files in #{manual/po/}#.

_* Don't forget you need #{make commit}# to ensure the translated manuals are updated from the po files and then you can review your changes launching #{make build}# before #{git add .}#, #{git commit -a -m "Translating..."}# and #{git push}#.

*{Note:}* You can use #{make clean}# to clean your git tree before pushing. This step is not compulsory thanks to the .gitignore file but it is a good practice to avoid committing files involuntarily.
