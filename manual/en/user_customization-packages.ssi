:B~ Customizing package installation

1~customizing-package-installation Customizing package installation

Perhaps the most basic customization of a Debian live system is the selection of packages to be included in the image. This chapter guides you through the various build-time options to customize live-build's installation of packages. We start with customization of the distribution mirror. You can also add your own repositories for backports, experimental or custom packages, or include packages directly as files. You can define your own lists of packages to include, use live-build's predefined lists, use #{tasksel}# tasks, or a combination of all three. Finally, a number of options give some control over apt, or if you prefer, aptitude, at build time when packages are installed. You may find these handy if you use a proxy, want to disable installation of recommended packages to save space, or need to control which versions of packages are installed via APT pinning, to name a few possibilities.

2~ Package sources

3~ Distribution mirrors

Each of the #{--mirror-*}# options governs which distribution mirror is used at various stages of the build. Recall from {Stages of the build}#stages-of-the-build that the *bootstrap* stage is when the chroot is initially populated by debootstrap with a minimal system, and the *chroot* stage is when the chroot used to construct the live system's filesystem is built. Thus, the corresponding mirror switches are used for those stages, and later, in the *binary* stage, the #{--mirror-binary}# and #{--mirror-binary-security}# values are used, superceding any mirrors used in an earlier stage.

4~ Distribution mirrors used at build time

To set the distribution mirrors used at build time to point at a local mirror, it is sufficient to set #{--mirror-bootstrap}# and #{--mirror-chroot-security}# as follows.

code{

$ lb config --mirror-bootstrap http://localhost/debian/ \
            --mirror-chroot-security http://localhost/debian-security/

}code

The chroot mirror, specified by #{--mirror-chroot}#, defaults to the #{--mirror-bootstrap}# value.

4~ Distribution mirrors used at run time

The #{--mirror-binary*}# options govern the distribution mirrors placed in the binary image. These may be used to install additional packages while running the live system. The defaults employ #{cdn.debian.net}#, a service that chooses a geographically close mirror based on the user's IP number. This is a suitable choice when you cannot predict which mirror will be best for all of your users. Or you may specify your own values as shown in the example below. An image built from this configuration would only be suitable for users on a network where "#{mirror}#" is reachable.

code{

$ lb config --mirror-binary http://mirror/debian/ \
            --mirror-binary-security http://mirror/debian-security/

}code

3~ Additional repositories

To add more repositories (e.g. backports, experimental or custom packages, etc.), create #{config/chroot_sources/your-repository.{chroot,binary}}# files. As with the #{--mirror-*}# options, these govern the repositories used in the *chroot* stage when building the image, and in the *binary* stage, i.e. for use when running the live system.

For example, #{config/chroot_sources/live.chroot}# allows you to install packages from the debian live snapshot repository at live system build time.

code{

deb http://live.debian.net/ sid-snapshots main contrib non-free

}code

If you add the line to #{config/chroot_sources/live.binary}#, the repository will be added to your live system's #{/etc/apt/sources.list.d/}# directory.

If such files exist, they will be picked up automatically.

You can also put the GPG key used to sign the repository into #{config/chroot_sources/your-repository.{binary,chroot}.gpg}# files.

Note: some preconfigured package repositories are available for easy selection through the #{--repository}# option, e.g. for enabling live snapshots, a simple command is enough to enable it:

code{

$ lb config --repository live.debian.net

}code

2~installing-additional-packages Installing additional packages

live-build has a number of mechanisms for indicating that additional packages should be installed, including:

_* The #{--packages}# option

_* Package lists

_* Local packages (#{config/chroot_local-packages/}#)

_* Tasks

3~ The #{--packages}# option

To install additional packages, simply specify #{--packages}#. For example:

code{

$ lb config --packages "package1 package2 package3"

}code

The behaviour of live-build when specifying a package that does not exist is determined by your choice of APT utility. See {Choosing apt or aptitude}#choosing-apt-or-aptitude for more details.

If you need to specify a large number of packages to be installed or you need flexibility regarding which packages to install, you should probably be using package lists. See {Package lists}#package-lists for more information.

3~package-lists Package lists

Package lists are a powerful way of expressing which packages should be installed. live-build ships with a number of predefined package lists which provide sensible default package selections for the major desktop environments, as well as standard systems.

To specify one or more package list, you can use:

code{

$ lb config --packages-lists "list1 list2 list3"

}code

Note: Package lists that are distributed with live-build reside in the #{/usr/share/live/build/lists/}# directory.

4~ Local package lists

You may supplement the supplied lists using local package lists stored in #{config/chroot_local-packageslists/}#.

Package lists that exist in this directory need to have a #{.list}# suffix in order to be processed. Local package lists always override package lists distributed with live-build. This can cause undesired effects, we therefore recommend to use unique names for local package lists.

4~ Local binary package lists

In case you want to include some required .deb packages to live media's #{pool/}# (without installing them onto the live image) you may need to use lists using binary local package lists stored in #{config/binary_local-packageslists/}#. Such media can be used as a customized Debian install image for offline installations.

Package lists that exist in this directory need to have a #{.list}# suffix in order to be processed.

4~ Extending a provided package list using includes

% FIXME

% code{
%
% #include <gnome>
% iceweasel
%
% }code

The package lists that are included with live-build make extensive use of includes. They are available to view in the #{/usr/share/live/build/lists/}# directory.

4~ Using conditionals inside package lists

Any of the live-build configuration variables stored in #{config/*}# (minus the #{LB_}# prefix) may be used in conditional statements in package lists. Generally, this means any #{lb config}# option uppercased and with dashes changed to underscores. But in practice, it is only the ones that influence package selection that make sense, such as #{DISTRIBUTION}#, #{ARCHITECTURE}# or #{ARCHIVE_AREAS}#.

For example, to install #{ia32-libs}# if the #{--architecture amd64}# is specified:

code{

#if ARCHITECTURE amd64
ia32-libs
#endif

}code

You may test for any one of a number of values, e.g. to install #{memtest86+} if either #{--architecture i386}# or #{--architecture amd64}# is specified:

code{

#if ARCHITECTURE i386 amd64
memtest86+
#endif

}code

You may also test against variables that may contain more than one value, e.g. to install #{vrms}# if either #{contrib}# or #{non-free}# is specified via #{--archive-areas}#:

code{

#if ARCHIVE_AREAS contrib non-free
vrms
#endif

}code

A conditional may surround an #{#include}# directive:

code{

#if ARCHITECTURE amd64
#include <gnome-full>
#endif

}code

The nesting of conditionals is not supported.

3~ Tasks

%FIXME

2~ Installing modified or third-party packages

Whilst it is against the philosophy of Debian Live, it may sometimes be necessary to build a Live system with modified versions of packages that are in the Debian repository. This may be to modify or support additional features, languages and branding, or even to remove elements of existing packages that are undesirable. Similarly, "third-party" packages may be used to add bespoke and/or proprietary functionality.

This section does not cover advice regarding building or maintaining modified packages. Joachim Breitner's 'How to fork privately' method from http://www.joachim-breitner.de/blog/archives/282-How-to-fork-privately.html may be of interest, however. The creation of bespoke packages is covered in the Debian New Maintainers' Guide at http://www.debian.org/doc/maint-guide/ and elsewhere.

There are two ways of installing modified custom packages:

_* #{chroot_local-packages}#

_* Using a custom APT repository

Using #{chroot_local-packages}# is simpler to achieve and useful for "one-off" customizations but has a number of drawbacks, whilst using a custom APT repository is more time-consuming to set up.

3~ Using #{chroot_local-packages}# to install custom packages

To install a custom package, simply copy it to the #{config/chroot_local-packages/}# directory. Packages that are inside this directory will be automatically installed into the live system during build - you do not need to specify them elsewhere.

Packages *{must}* be named in the prescribed way. One simple way to do this is to use #{dpkg-name}#.

Using #{chroot_local-packages}# for installation of custom packages has disadvantages:

_* It is not possible to use secure APT.

_* You must install all appropriate packages in the #{config/chroot_local-packages/}# directory.

_* It does not lend itself to storing Debian Live configurations in revision control.

3~ Using an APT repository to install custom packages

Unlike using #{chroot_local-packages}#, when using a custom APT repository you must ensure that you specify the packages elsewhere. See #{Installing additional packages}#installing-additional-packages for details.

Whilst it may seem unnecessary effort to create an APT repository to install custom packages, the infrastructure can be easily re-used at a later date to offer updates of the modified packages.

3~ Custom packages and APT

live-build uses APT to install all packages into the live system so will therefore inherit behaviours from this program. One relevant example is that (assuming a default configuration) given a package available in two different repositories with different version numbers, APT will elect to install the package with the higher version number.

Because of this, you may wish to increment the version number in your custom packages' #{debian/changelog}# files to ensure that your modified version is installed over one in the official Debian repositories. This may also be achieved by altering the live system's APT pinning preferences - see apt-preferences for more information.

% FIXME: <xref linkend="apt-preferences"/>

2~ Configuring APT at build time

You can configure APT through a number of options applied only at build time. (APT configuration used in the running live system may be configured in the normal way for live system contents, that is, by including the appropriate configurations through #{config/chroot_local_includes/}#.) For a complete list, look for options starting with #{apt}# in the #{lb_config}# man page.

3~choosing-apt-or-aptitude Choosing apt or aptitude

You can elect to use either #{apt}# or #{aptitude}# when installing packages at build time. Which utility is used is governed by the #{--apt}# argument to #{lb config}#. Choose the method implementing the preferred behaviour for package installation, the notable difference being how missing packages are handled.

_* #{apt}#: With this method, if a missing package is specified, the package installation will fail. This is the default setting.

_* #{aptitude}#: With this method, if a missing package is specified, the package installation will succeed.

3~ Using a proxy with APT

One commonly required APT configuration is to deal with building an image behind a proxy. You may specify your APT proxy with the #{--apt-ftp-proxy}# or #{--apt-http-proxy}# options as needed, e.g.

code{

lb config --apt-http-proxy http://proxy/

}code

3~ Tweaking APT to save space

You may find yourself needing to save some space on the image media, in which case one or the other or both of the following options may be of interest.

If you don't want to include APT indices in the image, you can omit those with:

code{

$ lb config --binary-indices false

}code

This will not influence the entries in /etc/apt/sources.list, but merely whether /var/lib/apt contains the indices files or not. The tradeoff is that APT needs those indices in order to operate in the live system, so before performing #{apt-cache search}# or #{apt-get install}#, for instance, the user must #{apt-get update}# first to create those indices.

If you find the installation of recommended packages bloats your image too much, you may disable that default option of APT with:

code{

$ lb config -apt-recommends false

}code

The tradeoff here is that recommended packages are defined as "packages that would be found together with this one in all but unusual installations" (Debian Policy Manual, §7.2). This may lead to some packages that you actually need being omitted, so we suggest you review the difference this makes to your packages list (see the #{binary.packages}# file generated by #{lb build}#) and re-include in your list any missing packages that you still want installed.

3~ Passing options to apt or aptitude

If there is not an #{lb config}# option to alter APT's behaviour in the way you need, use #{--apt-options}# or #{--aptitude-options}# to pass any options through to your configured APT tool. See the man pages for #{apt}# and #{aptitude}# for details.

3~ APT pinning

% FIXME: needs content

