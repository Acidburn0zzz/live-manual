:B~ Customizing package installation

1~customizing-package-installation Customizing package installation

Perhaps the most basic customization of a Debian live system is the selection of packages to be included in the image. This chapter guides you through the various build-time options to customize live-build's installation of packages. We start with customization of the distribution mirror. You can also add your own repositories for backports, experimental or custom packages, or include packages directly as files. You can define your own lists of packages to include, use live-build's predefined lists, use #{tasksel}# tasks, or a combination of all three. Finally, a number of options give some control over apt, or if you prefer, aptitude, at build time when packages are installed. You may find these handy if you use a proxy, want to disable installation of recommended packages to save space, or need to control which versions of packages are installed via apt pinning, to name a few possibilities.

2~ Package sources

3~ Debian repositories

To set a local mirror to be used to at build time:

code{

$ lb config --mirror-bootstrap http://localhost/debian/

}code

The chroot repository, specified by --mirror-chroot, defaults to the same as --mirror-bootstrap.

Each of the --mirror-* options governs which repository is used at various stages of the build. Recall from {Stages of the build}#stages-of-the-build that the *bootstrap* stage is when the chroot is initially populated by debootstrap with a minimal system, and the *chroot* stage is when the chroot used to construct the live system's filesystem is built. Thus, the corresponding mirror switches are used for those stages, and later, when the binary image is constructed, the --mirror-binary value is used, superceding any earlier repositories.

The generic mirror is added to the live system's /etc/apt/sources.list.

code{

$ lb config --mirror-binary http://ftp.debian.org/debian/

}code

Note: It is not used for building the live system but to install new software while using the live system.

It can be disabled by setting the binary mirror to the same value as the chroot mirror.

Note: the same applies for mirror chroot security and mirror binary security

code{

$ lb config --mirror-chroot-security {URL}
$ lb config --mirror-binary-security {URL}

}code

If you don't want to include apt indices, you can skip those with:

code{

$ lb config --binary-indices false

}code

This will not influence the entries in /etc/apt/sources.list, but only if /var/lib/apt contains the indices files or not (and by that making the image smaller).

3~ Own repository

To add more repositories (e.g. backports, experimental or custom packages, etc.), create #{config/chroot_sources/your-repository.{chroot,binary}}# files.

e.g. #{config/chroot_sources/live.chroot}# allows you to install packages from the debian live snapshot repository at live system build time (you have to add the packages in your package list):

code{

deb http://live.debian.net/ sid-snapshots main contrib non-free

}code

If you add the line to #{config/chroot_sources/live.binary}# the repository will be added to your live-system's #{/etc/apt/sources.list}#.

If such files exist, they will be picked up automatically.

You can also put the gpg-key used to sign the repository into config/chroot_sources/your-repository.{binary,chroot}.gpg

Note: some preconfigured package repositories are available for easy selection through the --repository switch, e.g. for enabling live snapshots, a simple command is enough to enable it:

code{

$ lb config --repository live.debian.net

}code

3~ Package installation

You can elect to use either #{apt}# or #{aptitude}# when installing packages. Which utility is used is governed by the #{LB_APT}# variable in #{config/chroot}# or by the #{--apt}# argument to #{lb config}#:

_* #{apt}#: Specifying a missing package causes package installation to fail, which may not be the desired behaviour. This is the default setting for building images for Lenny or later.

_* #{aptitude}#: Specifying a missing package causes package installation to succeed, which may not be the desired behaviour. This is the default setting for building images for Etch.

2~ Installing additional packages

live-helper has a number of mechanisms for indicating that additional packages should be installed, including:

_* The #{LB_PACKAGES}# variable

_* Package lists

_* Local packages (#{chroot_local-packages/}#)

_* Tasks

3~ The #{LB_PACKAGES}# variable

To install additional packages, simply add them to the #{LB_PACKAGES}# variable in #{config/chroot}#. For example:

code{

LB_PACKAGES="package1 package2 package3 ... "

}code

You can also specify initial values on the command line:

code{

$ lb config --packages "package1 package2 package3"

}code

The behaviour of live-build when specifying a package that does not exist is determined by your choice of APT utility. See package-installation for more details.

% FIXME: <xref linkend="package-installation"/>

If you need to specify a large number of packages to be installed or you need flexibility regarding which packages to install, you should probably be using package lists. See package-lists for more information.

% FIXME: <xref linkend="package-lists"/>

3~ Package lists

Package lists are a powerful way of expressing which packages should be installed. live-build ships with a number of predefined package lists which provide sensible default package selections for the major desktop environments, as well as standard systems.

To specify one or more package list, you can use:

code{

$ lb config --packages-lists "list1 list2 list3"

}code

Note: Package lists that are distributed with live-build reside in the #{/usr/share/live/build/lists}# directory.

*{Local packages lists}*

You may supplement the supplied lists using local package lists stored in #{config/chroot_local-packageslists}#.

Package lists that exist in this directory need to have a #{.list}# suffix in order to be processed. Local packages lists always override package lists distributed with live-build. This can cause undesired effects, we therefore recommend to use unique names for local packages lists.

*{Local binary packages lists}*

In case you want to include some required .deb packages to live media's pool/ (without installing them onto the live image) you may need to use lists using binary local package lists stored in #{config/binary_local-packageslists}#. Such media can be used as a customized debian install image for offline installations.

Package lists that exist in this directory need to have a .list suffix in order to be processed.

*{Extending a provided package list using includes}*

% FIXME

% code{
%
% #include <gnome>
% iceweasel
%
% }code

The package lists that are included with live-build make extensive use of includes. They are available to view in the #{/usr/share/live/build/lists}# directory.

*{Using conditionals inside packages lists}*

code{

#if ARCHITECTURE amd64
ia32-libs
#endif

}code

or if #{LB_ARCHITECTURE}# is set to #{i386}# or #{amd64}#:

code{

#if ARCHITECTURE i386 amd64
memtest86+
#endif

}code

or if #{LB_ARCHIVE_AREAS}# contains either #{contrib}# or #{non-free}#:

code{

#if ARCHIVE_AREAS contrib non-free
vrms
#endif

}code

A conditional may surround an #{#include}# directive:

code{

#if ARCHITECTURE amd64
#include <gnome-full>
#endif

}code

Any live-build configuration variable that begins with #{LB_}# can be tested in this way.

The nesting of conditionals is not supported.

3~ Tasks

%FIXME

2~ Installing modified or third-party packages

Whilst it is against the philosophy of Debian Live, it may sometimes be necessary to build a Live system with modified versions of packages that are in the Debian repository. This may be to modify or support additional features, languages and branding, or even to remove elements of existing packages that are undesirable. Similarly, "third-party" packages may be used to add bespoke and/or proprietary functionality.

This section does not cover advice regarding building or maintaining modified packages. Joachim Breitner's 'How to fork privately' method from http://www.joachim-breitner.de/blog/archives/282-How-to-fork-privately.html may be of interest, however. The creation of bespoke packages is covered in the Debian New Maintainers' Guide at http://www.debian.org/doc/maint-guide/ and elsewhere.

There are two ways of installing modified custom packages:

_* #{chroot_local-packages}#

_* Using a custom APT repository

The #{chroot_local-packages}# is simpler to achieve and useful for "one-off" customizations but has a number of drawbacks, whilst using a custom APT repository is more time-consuming to set up.

3~ Using #{chroot_local-packages}# to install custom packages

To install a custom package, simply copy it to the #{config/chroot_local-packages}# directory. Packages that are inside this directory will be automatically installed into the live system during build - you do not need to specify them elsewhere.

Packages *{must}* be named in the prescribed way. One simple way to do this is to use #{dpkg-name}#.

Using #{chroot_local-packages}# for installation of custom packages has disadvantages:

_* It is not possible to use secure APT

_* You must install all appropriate packages in the #{config/chroot_local-packages}# directory

_* It does not lend itself to storing Debian Live configurations in revision control

3~ Using an APT repository to install custom packages

Unlike using #{chroot_local-packages}#, when using a custom APT repository you must ensure that you specify the packages elsewhere. See lb-packages for details.

% FIXME: <xref linkend="lb-packages"/>

Whilst it may seem unnecessary effort to create an APT repository to install custom packages, the infrastructure can be easily re-used at a later date to offer updates of the modified packages.

3~ Custom packages and APT

live-build uses APT to install all packages into the live system so will therefore inherit behaviours from this program. One relevant example is that (assuming a default configuration) given a package available in two different repositories with different version numbers, APT will elect to install the package with the higher version number.

Because of this, you may wish to increment the version number in your custom packages' #{debian/changelog}# files to ensure that your modified version is installed over one in the official Debian repositories. This may also be achieved by altering the live system's APT pinning preferences - see apt-preferences for more information.

% FIXME: <xref linkend="apt-preferences"/>

3~ Altering APT preferences during Live system

Whilst it may seem unnecessary effort to create an APT repository to install custom packages, the infrastructure can be easily re-used at a later date to offer updates of the modified package.
