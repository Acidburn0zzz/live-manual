:B~ Customizing contents

1~customizing-contents Customizing contents

This chapter discusses further customization of the live system.

2~ Includes

Using includes, it is possible to add (or replace) arbitrary files in your Debian Live image. live-build provides three mechanisms for using them:

_* Chroot local includes: These allow you to add or replace files to the chroot/Live filesystem. Please see chroot-local-includes for more information.

% FIXME: <xref linkend="chroot-local-includes"/>

_* Binary local includes: These allow you to add or replace files in the binary image. Please see binary-local-includes for more information.

% FIXME: <xref linkend="binary-local-includes"/>

_* Binary includes: These allow you to add or replace Debian specific files in the binary image, such as the templates and tools directories. Please see binary-includes for more information.

% FIXME: <xref linkend="binary-includes"/>

Please see terms for more information about the distinction between the "Live" and "binary" images.

% FIXME: <xref linkend="terms"/>

3~ Live/chroot local includes

Chroot local includes can be used to add or replace files in the chroot/Live filesystem so that they are visible when the Live system is booted. Typical uses for them are to populate the skeleton user directory (#{/etc/skel}#) used by the live system to create the live user's home directory, or adding configuration files where additional processing is not required.

To include files, simply add them to your #{config/chroot_local-includes}# directory. This directory corresponds to the root directory (#{/}#) of the live system. For example, to add a file #{/var/www/index.html}# in the live system, use:

code{

$ mkdir -p config/chroot_local-includes/var/www
$ cp /path/to/my/index.html config/chroot_local-includes/var/www

}code

Your configuration will then have the following layout:

code{

-- config
   [...]
    |-- chroot_local-includes
    |   `-- var
    |       `-- www
    |           `-- index.html
   [...]
    `-- templates

}code

Chroot local includes are installed after package installation so that files installed by packages are overwritten.

3~ Binary local includes

The same way as chroot local includes work, there exists the corresponding mechanism to include files in the live media itself.

3~ Binary includes

live-build has some standard files (like documentation) that gets included in the default configuration on every live media. This can be disabled with:

code{

$ lb config --includes none

}code

2~ Hooks

Hooks allow commands to be performed in the chroot and binary stages of the build in order to customize the image.

3~ Live/chroot local hooks

To run commands in the chroot stage, create a hook script containing the commands in the #{config/chroot_local-hooks}# directory. The hook will run in the chroot after the rest of your chroot configuration has been applied, so remember to ensure your configuration includes all packages and files your hook needs in order to run. See the example chroot hook scripts for various common chroot customization tasks provided in #{/usr/share/live/build/examples/hooks}# which you can copy or symlink to use them in your own configuration.

3~ Binary local hooks

To run commands in the binary stage, create a hook script containing the commands in the #{config/binary_local-hooks}#. The hook will run after all other binary commands are run, but before binary_checksums, the very last binary commands The commands in your hook do not run in the chroot, so take care to not modify any files outside of the build tree, or you may damage your build system! See the example binary hook scripts for various common binary customization tasks provided in #{/usr/share/live/build/examples/hooks}# which you can copy or symlink to use them in your own configuration.

2~ Preseeding Debconf questions

Files in the #{config/chroot_local-preseed}# directory are considered to be debconf preseed files and are installed by live-build using #{debconf-set-selections}#.

For more information about debconf, please see debconf(7) in the #{debconf}# package.
