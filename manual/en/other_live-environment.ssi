B~ The Live environment

1~ The Live environment

2~ Swap space

FIXME

2~ Hostname

The name of host running live system can be set with the #{hostname}# parameter into the #{--bootappend-live}# option of #{lh_config}#, e.g.:

code{

lh_config --bootappend-live "hostname=myhost"

}code

This parameter can also be used in kernel command line.

2~ The Live user

Username FIXME.

One important consideration is that the live user is created by live-initramfs during bootup, it is not created by live-helper when building the image.

You can specify additional groups that the live user will belong to by preseeding the #{passwd/user-default-groups}# debconf value. For example, to add the live user to the #{fuse}# group, add the following to a file in the #{config/chroot_local-preseed}# directory:

code{

debconf passwd/user-default-groups string audio cdrom dialout floppy video plugdev netdev powerdev fuse

}code

For more information about debconf preseeding, please see debconf-preseed.
% FIXME: <xref linkend="debconf-preseed"/>

2~ Language

When the live system boots, language is involved in three steps:

_* the locale generation

_* setting the keyboard layout for the console

_* setting the keyboard layout for X

To define the locale that should be generated, use the #{locale}# parameter into the #{--bootappend-live}# option of #{lh_config}#, e.g.:

code{

lh_config --bootappend-live "locale=sv_SE.utf8"

}code

This parameter can also be used in kernel command line. You can specify a locale by a two-letters code, or for better control, by a full #{language_country.encoding}# word.

Both the console and X keyboard configuration depends on the #{keyb}# parameter of the #{--bootappend-live}# option. Valid options for X keyboard layouts can be found in #{/etc/X11/xkb/base.xml}# (rather limited to two-letters country codes). To find the value (the two characters) corresponding to a language try searching for the english name of the nation where the language is spoken, e.g:

code{

$ grep -i sweden -C3 /etc/X11/xkb/base.xml | grep name <name>se</name>

}code

To get the locale files for swedish generated and a swedish keyboard layout in X use:

code{

lh_config --bootappend-live "locale=sv_SE.utf8 keyb=se"

}code

A list of the valid values of the keyboards for the console can be figured with the following command:

code{

for i in `find /usr/share/keymaps/ -iname "*kmap.gz"`; do basename $i | head -c -9; echo; done | sort | less

}code

To make the console keyboard use a swedish layout use

code{

lh_config --bootappend-live "locale=sv_SE.utf8 keyb=se-latin1"

}code

Alternatively, you can use the #{console-setup}# package, a tool to let you configure console layout using X (XKB) definitions; you can then setup your keyboard layout more precisely with #{klayout}#, #{kvariant}#, #{koptions}# and #{kmodel}# variables; #{live-initramfs}# will use also these parameters for X configuration. For example, to set up a french system with a french-dvorak layout (called BÃ©po) on a TypeMatrix keyboard, both in console and X11, use:

code{

lh_config --bootappend-live \ "locale=fr_FR.UTF-8 klayout=fr kvariant=bepo kmodel=tm2030usb"

}code

Note that on old versions of #{console-setup}# (i.e. Lenny's one), you'll need to setup also the #{keyb}# variable to the #{klayout}#'s value.

2~ Persistence

A live cd paradigm is a pre-installed system which runs from read-only media, like a cdrom, where writes and modifications do not survive reboots of the host hardware which runs it.


A Debian Live system is a generalization of this paradigm and thus supports other media in addition to CDs; but still, in its default behaviour, it should be considered read-only and all the run-time evolutions of the system are lost at shutdown.

Persistence is a common name for different kinds of solutions for saving across reboots some, or all, of this run-time evolution of the system. To understand how it could work it could be handy to know that even if the system is booted and run from read-only media, modification to the files and directories are written on writable media, typically a ram disk (tmpfs) and ram disks' data do not survive reboots.

The data stored on this ramdisk should be saved on a writable persistent medium like a Hard Disk, a USB key, a network share or even a session of a multisession (re)writable CD/DVD. All these media are supported in Debian Live in different ways, and all but the last one require a special boot parameter to be specified at boot time: #{persistent}#.

3~ Full persistence

By 'full persistence' it is meant that instead of using a tmpfs for storing modifications to the read-only media (with the copy-on-write, COW, system) a writable partition is used. In order to use this feature a partition with a clean writable supported filesystem on it labeled "live-rw" must be attached on the system at boot time and the system must be started with the boot parameter 'persistent'. This partition could be an ext2 partition on the hard disk or on a usb key created with, e.g.:

code{

# mkfs.ext2 -L live-rw /dev/sdb1

}code

If you already have a partition on your device, you could just change the label with one of the following:

code{

# tune2fs -L live-rw /dev/sdb1 # for ext2,3,4 filesystems
# dosfslabel /dev/sdb1 live-rw # for a fat filesystem

}code

But since live system users cannot always use a hard drive partition, and considering that most USB keys have poor write speeds, 'full' persistence could be also used with just image files, so you could create a file representing a partition and put this image file even on a NTFS partition of a foreign OS, with something like:

code{

$ dd if=/dev/null of=live-rw bs=1G seek=1 # for a 1GB sized image file
$ /sbin/mkfs.ext2 -F live-rw

}code

Then copy the #{live-rw}# file to a writable partition and reboot with the boot parameter 'persistent'.

3~ Home automounting

If during the boot a partition (filesystem) image file or a partition labeled #{home-rw}# is discovered, this filesystem will be directly mounted as #{/home}#, thus permitting persistence of files that belong to e.g. the default user. It can be combined with full persistence.

3~ Snapshots

Snapshots are collections of files and directories which are not mounted while running but which are copied from a persistent device to the system (tmpfs) at boot and which are resynced at reboot/shutdown of the system. The content of a snapshot could reside on a partition or an image file (like the above mentioned types) labeled #{live-sn}#, but it defaults to a simple cpio archive named #{live-sn.cpio.gz}#. As above, at boot time, the block devices connected to the system are traversed to see if a partition or a file named like that could be found. A power interruption during run time could lead to data loss, hence a tool invoked #{live-snapshot --refresh}# could be called to sync important changes. This type of persistence, since it does not write continuously to the persistent media, is the most flash-based device friendly and the fastest of all the persistence systems.

A /home version of snapshot exists too and its label is #{home-sn.*}#; it works the same as the main snapshot but it is only applied to /home.

Snapshots cannot currently handle file deletion but full persistence and home automounting can.

3~ Persistent SubText

If a user would need multiple persistent storage of the same type for different locations or testing, such as #{live-rw-nonwork}# and #{live-rw-work}#, the boot parameter #{persistent-subtext}# used in conjuntion with the boot parameter #{persistent}# will allow for multiple but unique persistent media. An example would be if a user wanted to use a persistent partition labeled #{live-sn-subText}# they would use the boot parameters of: #{persistent}# #{persistent-subtext=subText}#.

3~ Partial remastering

The run-time modification of the tmpfs could be collected using live-snapshot in a squashfs and added to the cd by remastering the iso in the case of cd-r or adding a session to multisession cd/dvd(rw); live-initramfs mounts all /live filesystem in order or with the module boot parameter.
