:B~ À propos de ce manuel

1~about-manual À propos de ce manuel

L'objectif principal de ce manuel est de servir de point d'accès unique à
tous les documents liés au projet Debian Live et particulièrement aux
logiciels produits par le projet pour Debian 7.0 "wheezy". Une version mise
à jour peut toujours être trouvée sur http://live.debian.net/

Ce manuel a principalement pour but de vous aider à construire un système
live et non pas d'articuler autour des sujets rélatifs à l'utilisateur
final; Toute fois, l'utilisateur final peut trouver des informations utiles
dans ces sections: {Les Bases}#the-basics couvrent le téléchargement des
images précompilées et la préparation des images pour être démarrées sur les
supports ou sur le réseau, soit en utilisant le constructeur web ou en
executant live-build directement sur le système. {Personnalisation des
comportements pendant l'exécution}#customizing-run-time-behaviours décrit
certaines options qui peuvent être spécifiées à l'invite de démarrage, tels
que la sélection d'un clavier, des paramètres régionaux et la persistance.

Certaines commandes mentionnées dans le texte doivent être exécutées avec
les privilèges de super-utilisateur, qui peuvent être obtenus à l'aide de la
commande #{su}# ou en utilisant #{sudo}#. Afin de distinguer les commandes
qui peuvent être exécutées par un utilisateur sans privilèges de celles
nécessitant les privilèges de super-utilisateur, les commandes sont
précédées respectivement par #{$}# ou #{#}#. Notez que ce symbole ne fait
pas partie de la commande.

2~ Pour les impatients

Même si nous croyons que tout dans ce manuel est important pour au moins
certains de nos utilisateurs, nous nous rendons compte qu'il y a beaucoup de
matière à couvrir et que vous pouvez vouloir expérimenter avant d'entrer
dans les détails. Par conséquent, nous vous suggérons de lire dans l'ordre
suivant.

Tout d'abord, lisez ce chapitre {À propos de ce manuel}#about-manual dès le
début et finissant avec la section {Terminologie}#terms. Ensuite, sautez aux
trois tutoriels à l'avant de la section {Exemples}#examples destinée à vous
apprendre la construction de l'image et les bases de la
personnalisation. Lire en premier {En utilisant les
exemples}#using-the-examples, suivie par {Tutoriel 1: Une image par
défaut}#tutorial-1, {Tutoriel 2: Un logiciel de navigateur Web}#tutorial-2
et finalement {Tutoriel 3: Une image personnalisée}#tutorial-3. À la fin de
ces tutoriels, vous aurez un avant-goût de ce qui peut être fait avec Debian
Live.

Nous vous encourageons à revenir à l'étude plus approfondie du manuel, la
prochaine lecture peut-être {Les bases}#the-basics, passer pour {Construire
une image netboot}#building-netboot-image, et finissant par la lecture de
la{Vue d'ensemble de la personnalisation}#customization-overview et les
autres sections suivantes. En ce point, nous espérons que vous soyez
complètement excités par ce que on peut faire avec Debian Live et motivés
pour lire le reste du manuel, du début à la fin.

2~terms Terminologie

_* *{Système Live}*: Un système d'exploitation pouvant être démarré sans
installation préalable sur un disque dur. Les Systèmes Live ne modifient pas
le système d'exploitation local ou les fichiers installés sur le disque dur
sans qu'on leur en donne explicitement l'instruction. D'habitude, les
systèmes Live sont démarrés à partir des supports tels que des CD, DVD, ou
des clés USB. Certains systèmes peuvent également être démarrés sur le
réseau.

_* *{Debian Live}*: Le sous-projet Debian qui maintient, entre autres, les
paquets live-boot, live-build, live-config live-tools et live-manual.

_* *{Système Debian Live}*: Un système live qui utilise les logiciels du
système d'exploitation Debian et qui peut être démarré sur CD, DVD, clé USB,
sur le réseau (à l'aide des images netboot), et à partir d'Internet (à
l'aide du paramètre de démarrage #{fetch=URL}#).

_* *{Système hôte}*: L'environnement utilisé pour créer le système live.

_* *{Système cible}*: L'environnement utilisé pour faire fonctionner le
système live.

_* *{live-boot}*: Une collection de scripts utilisés pour lancer des
systèmes live.

_* *{live-build}*: Une collection de scripts utilisés pour construire des
systèmes Debian Live personnalisés.

_* *{live-config}*: Une collection de scripts utilisés pour configurer un
système live pendant le processus d'amorçage.

_* *{live-tools}*: Une collection de scripts supplémentaires utilisés pour
effectuer des tâches utiles dans un système live en fonctionnement. 

_* *{live-manual}*: Ce document est maintenu dans un paquet nommé
live-manual.

_* *{Debian Installer (d-i)}*: Le système d'installation officiel pour la
distribution Debian.

_* *{Paramètres d'amorçage}*: Les paramètres qui peuvent être entrés à
l'invite de démarrage afin de modifier le noyau ou live-config.

_* *{chroot}*: Le logiciel /{chroot}/, #{chroot(8)}#, nous permet d'exécuter
plusieurs instances concurrentes de l'environnement GNU/Linux sur un système
sans redémarrage.

_* *{Image binaire}*: Un fichier contenant le système live, tel que
binary.iso ou binary.img.

_* *{Distribution cible}*: La distribution sur laquelle votre système live
sera basée. Ceci peut être diffèrent de la distribution de votre système
hôte.

_* *{stable/testing/unstable}*: La distribution *{stable}* contient la
dernière version officielle de Debian. La distribution *{testing}* est la
prochaine version stable où seulement les paquets suffisamment matures
peuvent entrer. Un avantage de cette distribution est qu'elle contient des
logiciels de versions plus récentes que la version *{stable}*. La
distribution *{unstable}* est en constante évolution. En général cette
distribution est utilisée par les développeurs et ceux qui aiment le
risque. Tout au long du manuel, nous avons tendance à utiliser les noms de
code pour les évolutions majeures, tels que wheezy ou sid, car c'est ce qui
est soutenu par les outils eux-mêmes.

2~ Auteurs

La liste des auteurs (dans l'ordre alphabétique):

_* Ben Armstrong

_* Brendan Sleight

_* Carlos Zuferri

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~how-to-contribute Contribuer à ce document

Ce manuel est conçu comme un projet communautaire et toutes les propositions
d'améliorations et de contributions sont bienvenues. S'il vous plaît voir la
section {Contribuer au projet}#contributing-to-project pour des informations
détaillées sur la façon d'obtenir la clé et de faire les livraisons.

3~ Appliquer des modifications

Afin d'apporter des modifications au manuel anglais, vous devez éditer les
fichiers adéquats dans #{manual/en/}# mais avant de soumettre votre
contribution, veuillez prévisualiser votre travail. Afin de prévisualiser
live-manual, assurez-vous que les paquets nécessaires sont installés en
exécutant:

code{

 # apt-get install make po4a ruby ruby-nokogiri sisu-complete texlive-generic-recommended

}code

Vous pouvez compiler live-manual dans le répertoire de niveau supérieur de
votre Git checkout en exécutant:

code{

 $ make build

}code

Comme il faut un certain temps pour construire le manuel dans toutes les
langues disponibles, il peut être pratique construire une seule langue, par
exemple en exécutant:

code{

 $ make build LANGUAGES=en

}code

Il est également possible de construire par type de document, par exemple,

code{

 $ make build FORMATS=pdf

}code

Ou combiner les deux, par exemple:

code{

 $ make build LANGUAGES=de FORMATS=html

}code

Après la révision de votre travail et de s'assurer que tout va bien, ne pas
utiliser #{make commit}# à moins que vous mettez à jour les traductions dans
le commit, et dans ce cas, ne pas mélanger les modifications apportées au
manuel en anglais et les traductions dans la même livraison, mais utiliser
commits séparés. Voir la section {Traduction}#translation pour plus de
détails.

3~translation Traduction

Pour commencer la traduction d'une nouvelle langue, suivez ces étapes:

_* Traduire les fichiers *{about_manual.ssi.pot}*, *{about_project.ssi.pot}*
et *{index.html.in.pot}* à votre langue avec votre éditeur préféré (comme
/{poedit}/). Envoyer les fichiers #{.po}# traduits à la liste de diffusion
afin que l'équipe de traduction puisse vérifier leur intégrité.

_* Pour activer une nouvelle langue dans l'autobuild il suffit d'ajouter les
premiers fichiers traduits à #{manual/po/${LANGUAGE}/}# et lancer #{make
commit}#.  Et alors modifier #{manual/_sisu/home/index.html}#.

_* Une fois la nouvelle langue est ajoutée,  vous pouvez continuer avec la
traduction des fichiers po dans #{manual/po/}# de façon aléatoire.

_* N'oubliez pas que vous devez faire un #{make commit}# pour assurer que la
traduction des manuels est mise à jour à partir des fichiers po, alors vous
pouvez réviser vos modifications avec #{make build}# avant #{git add .}#,
#{git commit -m "Translating..."}# et #{git push}#.

Après l'exécution de #{make commit}#, vous verrez beaucoup de texte sur
l'écran. Ils sont essentiellement des messages informatifs sur l'état du
processus et aussi quelques indications sur ce qui peut être fait pour
améliorer live-manual. Si vous ne voyez aucune erreur fatale, vous pouvez
généralement continuer et soumettre votre contribution.

live-manual contient deux utilitaires qui peuvent grandement aider les
traducteurs à trouver textes non traduits et modifiés. Le premier est "make
translate". Il lance un script  qui vous indique en détail le nombre de
messages non traduits qu'il y a dans chaque fichier po. Le second, "make
fixfuzzy", n'agit que sur les messages modifiés, mais il vous aide à les
trouver et à les résoudre un par un.

Gardez à l'esprit que même si ces utilitaires peuvent être vraiment utiles
pour faire un travail de traduction sur la ligne de commande, l'utilisation
d'un outil spécialisé comme /{poedit}/ est la méthode recommandée pour
effectuer la tâche. C'est aussi une bonne idée de lire la documentation sur
localisation de debian (l10n) et, plus particulièrement pour live-manual,
les {Lignes directrices pour les traducteurs}#guidelines-translators.

*{Remarque:}* Vous pouvez utiliser #{make clean}# pour nettoyer votre arbre git avant de faire un push. Cette étape n'est pas obligatoire grâce au fichier .gitignore mais c'est une bonne pratique pour éviter d'envoyer certains fichiers involontairement.
