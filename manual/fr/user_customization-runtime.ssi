:B~ Personnalisation des comportements au moment de l'exécution

1~customizing-run-time-behaviours Personnalisation des comportements au
moment de l'exécution

Toute la configuration qui est faite pendant l'exécution est faite par
live-config. Voici quelques options les plus courantes de live-config
d'intérêt pour les utilisateurs. Une liste complète de toutes les
possibilités peut être trouvée dans la page de manuel de live-config.

2~ Personnalisation de l'utilisateur Live

Une considération importante est que l'utilisateur live est créé par
live-boot au démarrage, non pas par live-config au moment de la
construction. Ça influence non seulement là où les documents relatifs à
l'utilisateur live sont introduits dans votre construction, tel que discuté
dans {Live/chroot local includes}#live-chroot-local-includes, mais aussi
tous les groupes et les autorisations associées à l'utilisateur live.

Vous pouvez spécifier d'autres groupes pour l'utilisateur live en
préconfigurant la valeur debconf #{passwd/user-default-groups}#. Par
exemple, pour ajouter l'utilisateur live au groupe #{fuse}# pendant l'étape
chroot, ajoutez la ligne suivante à un fichier dans le répertoire
#{config/chroot_local-preseed}#:

code{

 $ lb config
 $ echo user-setup passwd/user-default-groups string audio cdrom \
   dip floppy video plugdev netdev powerdev scanner bluetooth fuse \
   >> config/preseed/my.preseed.chroot

}code

Il est également possible de changer le nom d'utilisateur par défaut «user»
et du mot de passe par défaut "live". Si vous voulez pour quelque raison,
vous pouvez facilement faire ça comme suit:

Pour modifier le nom d'utilisateur par défaut, vous pouvez simplement le
spécifier dans votre config:

code{

 $ lb config --bootappend-live "username=live-user"

}code

Une façon possible de changer le mot de passe par défaut est au moyen d'un
hook comme décrit dans {Hooks au moment du démarrage}#boot-time-hooks. Pour
ce faire vous pouvez utiliser le hook "passwd" de
#{/usr/share/doc/live-config/examples/hooks}#, ajouter un préfixe correct
(par exemple 200-passwd) et l'ajouter à
#{config/includes.chroot/lib/live/config/}#

2~customizing-locale-and-language Personnalisation des paramètres régionaux
et la langue

Au démarrage du système live, la langue est impliqué dans trois étapes:

_* la génération des paramètres régionaux

_* réglage de la disposition du clavier pour la console

_* réglage de la disposition du clavier pour X

Les paramètres régionaux par défaut pendant la construction d'un système
Live sont "locales=en_US.UTF-8". Pour définir les paramètres régionaux qui
doivent être générés, utilisez le paramètre #{locales}# dans l'option
#{--bootappend-live}# de #{lb config}#, par exemple

code{

 $ lb config --bootappend-live "locales=de_CH.UTF-8"

}code

Ce paramètre peut également être utilisé à la ligne de commande du
noyau. Vous pouvez spécifier des paramètres régionaux par
#{language_country.encoding}#.

Tant la console et la configuration du clavier X dépendent du paramètre
#{keyboard-layouts}# de l'option #{--bootappend-live}#. Options valides pour
les dispositions des claviers X peuvent être trouvés dans
#{/usr/share/X11/xkb/rules/base.xml}# (plutôt limitées à des codes des pays
à deux lettres). Pour trouver la valeur (les deux caractères), correspondant
à une langue essayez de rechercher le nom anglais de la nation où la langue
est parlée, par exemple:

code{

 $ grep -i sweden -C3 /usr/share/X11/xkb/rules/base.xml | grep name
 <name>se</name>

}code

Pour obtenir les fichiers des paramètres régionaux de l'allemand et la
disposition du clavier suisse allemand dans X utiliser:

code{

 $ lb config --bootappend-live "locales=de_CH.UTF-8 keyboard-layouts=ch"

}code

Une liste des valeurs valides des claviers pour la console peut être figuré
avec la commande suivante:

code{

 $ for i in $(find /usr/share/keymaps/ -iname "*kmap.gz"); \
     do basename $i | head -c -9; echo; done | sort | less

}code

Alternativement, vous pouvez utiliser le paquet #{console-setup}#, un outil
pour vous permettre de configurer la disposition de la console en utilisant
définitions X (XKB), vous pouvez alors définir votre clavier plus
précisément avec variables #{keyboard-layouts}#, #{keyboard-variant}#,
#{keyboard-options}# et #{keyboard-model}#; live-boot pourra également
utiliser ces paramètres pour la configuration de X. Par exemple, pour mettre
en place un système français avec une disposition Français Dvorak (appelée
Bepo) sur un clavier TypeMatrix, à la fois dans la console et X11, utilisez:

code{

 $ lb config --bootappend-live \
     "locales=fr_FR.UTF-8 keyboard-layouts=fr keyboard-variant=bepo keyboard-model=tm2030usb"

}code

2~persistence Persistance

Un paradigme d'un Live CD est être un système pré-installé qui amorce sur un
support en lecture seule, comme un cdrom, où les données et les
modifications ne survivent pas aux redémarrages du matériel hôte qui
l'exécute.

Un système Debian Live est une généralisation de ce paradigme et soutient
ainsi autres supports, en plus de CDs, mais encore, dans son comportement
par défaut, il doit être considéré en lecture seule et toutes les évolutions
pendant l'exécution du système sont perdus à l'arrêt.

La persistance est un nom commun pour les différents types de solutions pour
sauver, après un redémarrage, certaines ou toutes les données, de cette
évolution pendant l'exécution du système. Pour comprendre comment cela
pourrait fonctionner il pourrait être utile de savoir que même si le système
est démarré et exécuté à partir d'un support en lecture seule, la
modification des fichiers et répertoires sont écrits sur des supports
inscriptibles, typiquement un disque ram (tmpfs) et aux disques RAM les
données ne survivent pas à un redémarrage.

Les données stockées sur ce disque virtuel doivent être enregistrées sur un
support inscriptible persistant comme supports de stockage locaux, un
partage réseau ou même une séance d'un CD/DVD multisession
(ré)inscriptible. Tous ces supports sont pris en charge dans Debian Live de
différentes manières, et tous, moins le dernier, nécessitent un paramètre
d'amorçáge spéciale à préciser au moment du démarrage: #{persistent}#.

Si le paramètre de démarrage #{persistent}# est réglé (et #{nopersistent}#
n'est pas utilisé), les supports de stockage locaux (par exemple les disques
durs, clés USB) seront examinés pour trouver des volumes persistants pendant
le démarrage. Un volume persistant est un des éléments suivants:

_* une partition, identifiée par son nom GPT.

_* un système de fichiers, identifié par son étiquette de système de
fichiers.

_* un fichier image/archive situé sur la racine de tout système de fichiers
en lecture (même une partition NTFS d'un système d'exploitation étranger),
identifié par son nom de fichier. Dans ce cas, le nom du fichier doit
également utiliser le système de fichiers contenant l'extension de fichier,
par exemple, "<label>.ext4".

Il est possible de limiter les types de volumes persistants à utiliser en
spécifiant certains paramètres de démarrage décrits dans la page de manuel
live-boot(7). Les "étiquettes d'identification" mentionnées ci-dessus
peuvent être un des éléments suivants:

_* #{full-ov}# pour couches de persistance pleine.

_* #{custom-ov}# pour couches personalisées

_* #{live-sn}# pour instantanés du système complet.

_* #{home-sn}# pour instantanés du /home.

3~ Couches de persistance pleine

Par «persistance pleine» on entend que au lieu d'utiliser un tmpfs pour le
stockage des modifications au support en lecture seule (avec le système
copy-on-write, COW) une partition accessible en écriture est utilisée. Pour
ce type de persistance le nom du volume doit être #{full-ov}#. Cela
pourrait, par exemple, être une partition ext4 sur un disque dur ou sur une
clé usb créée avec, par exemple:

code{

 # mkfs.ext4 -L full-ov /dev/sdb1

}code

Voir aussi {Utilisation de l'espace disponible sur une clé
USB}#using-usb-extra-space.

Si vous avez déjà une partition sur votre dispositif, vous pouvez simplement
modifier l'étiquette avec l'un des suivants:

code{

 $ tune2fs -L full-ov /dev/sdb1 # for ext2,3,4 filesystems

}code

Voici un exemple de comment créer un fichier image ext4 utilisé pour la
persistance pleine:

code{

 $ dd if=/dev/null of=full-ov bs=1G seek=1 # for a 1GB sized image file
 $ /sbin/mkfs.ext4 -F full-ov

}code

Ensuite, copiez le fichier #{full-ov}# sur une partition accessible en
écriture et redémarrer.

3~ Couches personnalisées

Un volume avec l'étiquette #{custom-ov}# peut être configuré pour créer des
répertoires arbitraires persistants. Le fichier #{live.persist}#, situé sur
le système de fichiers racine du volume, contrôle quels répertoires il fait
persistants, et de quelle manière.

Comment on configure monter des couches personnalisés est décrit en détail
dans la page de manuel live.persist(5), mais un simple exemple devrait être
suffisant pour la plupart des utilisations. Imaginons que nous voulons faire
notre répertoire personnel et APT cache persistants dans un système de
fichiers ext4 sur la partition /dev/sdb1:

code{

 $ mkfs.ext4 -L custom-ov /dev/sdb1
 $ mount -t ext4 /dev/sdb1 /mnt
 $ echo "/home" >> /mnt/live.persist
 $ echo "/var/cache/apt" >> /mnt/live.persist

}code

Alors nous redémarrons. Lors du premier démarrage les contenus du #{/home}#
et #{/var/cache/apt}# seront copiés dans le volume persistant, et à partir
de ce moment tous les changements dans ces répertoires seront stockés dans
le volume persistant. S'il vous plaît souligner que les chemins d'accès aux
répertoriés dans le fichier #{live.persist}# ne peuvent pas contenir
d'espaces blancs ou les éléments spéciaux #{.}# et #{..}#. En outre, ni
#{/live}# (ou un de ses sous-répertoires), ni #{/}#  peuvent être rendus
persistants en utilisant custom mounts (pour ce dernier, utilisez la
persistance #{full-ov}# décrite ci-dessus).

Plusieurs différents volumes de couches personnalisés (avec leurs propres
fichiers #{live.persist}#) peuvent être utilisés au même temps, mais si
plusieurs volumes font le même répertoire persistant, un seul d'entre eux
sera utilisé. Si les deux sont «imbriqués» (un est un sous-répertoire de
l'autre) le premier sera monté avant que le secondaire de sorte que aucun
sera caché par l'autre. Monter  des éléments personnalisés imbriqués est
problématique s'ils sont énumérés dans le même fichier
#{live.persist}#. Voir la page de manuel live.persist(5) pour savoir comment
gérer ce cas, si vous avez vraiment besoin (remarque: vous n'avez
généralement pas).

3~ Instantanés

Les instantanés sont des collections de fichiers et de répertoires qui ne
sont pas montés lors de l'exécution, mais qui sont copiés à partir d'un
périphérique persistant à le système (tmpfs) au démarrage et qui sont
resynchronisés au redémarrage/arrêt du système. Le volume doit être étiqueté
#{live-sn}#. Il est par défaut une simple archive cpio appelé
#{live-sn.cpio.gz}#.  Une coupure de courant pendant l'exécution pourrait
conduire à la perte de données, donc un outil appelé #{live-snapshot
--refresh}# pourrait être appelé pour synchroniser des changements
importants. Ce type de persistance, car elle n'écrit pas continuellement
dans les supports persistants, est la plus respectuese avec les dispositifs
flash et la plus rapide de tous les systèmes de persistance, mais elle
occupe autant RAM que la taille de l'instantané non compressé.

Une version d'instantané de /home existe aussi, et son étiquette est
#{home-sn.*}#; elle travaille le même que l'instantané principale, mais il
est seulement appliquée à /home.

Les instantanés ne peuvent pas actuellement gérer la suppression de
fichiers.

3~ SubText persistant

Si un utilisateur a besoin de multiples stockages persistants du même type
pour différents endroits ou l'essai, tel que #{full-ov-nonwork}# et
#{full-ov-work}#, le paramètre de démarrage #{persistent-subtext}# utilisé
en conjonction avec le paramètre de démarrage #{persistent}# permettra
multiples mais uniques supports persistants. Un exemple serait le cas si un
utilisateur voudrait utiliser une partition persistante étiqueté
#{live-sn-subText}# il utiliserait les paramètres de démarrage:
#{persistent}# #{persistent-subtext=subText}#.

3~ Remasterisation partielle

Les modifications de l'exécution du tmpfs pourraient être recueillies à
l'aide de live-snapshot dans une squashfs et ajoutés au CD en remasterisant
l'ISO dans le cas des CD-R ou en ajoutant une session à un cd/dvd(rw)
multisession; live-boot monte tous les systèmes de fichiers /live dans
l'ordre ou avec le paramètre de démarrage du module.
