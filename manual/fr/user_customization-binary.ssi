B~ Personnalisation de l'image binaire

1~customizing-binary Personnalisation de l'image binaire

2~ Chargeur d'amorçage

live-build utilise /{syslinux}/  et certains de ses dérivés (selon le type
d'image) comme chargeurs d'amorçage par défaut. Vous pouvez facilement les
personnaliser de différentes façons qui vont de fournir un thème complet à
changer le délai de démarrage ou tout simplement ajouter une image de
démarrage personnalisée. Certains des exemples de personnalisation suivants
utilisent méthodes différentes, comme {includes}#includes ou {hooks}#hooks.

Si vous souhaitez utiliser un thème complet, vous pouvez spécifier l'option
#{--syslinux-theme}# (voir man #{lb_config}#). live-build téléchargera le
thème du miroir et l'installera.

Imaginez que vous voulez construire un client progress, mais vous voulez
inclure le thème du serveur parce que vous voulez avoir le menu
d'aide. Ensuite, vous devez lancer #{lb config}# comme suit:

code{

 $ lb config --mode progress --syslinux-theme progress-server

}code

Vous pouvez également créer votre propre thème ou modifier un déjà existant
et si vous n'avez pas un miroir, vous pouvez ajouter le paquet à
#{config/packages.chroot}#. Dans ce cas, il n'est pas nécessaire de
spécifier une autre option.

Il y a aussi la possibilité de faire des petits changements. Par exemple,
les dérivés de syslinux sont configurés par défaut avec un timeout de 0
(zéro) qui signifie qu'ils se mettront en pause indéfiniment à leur écran de
démarrage jusqu'à ce que vous pressez une touche.

Pour modifier le délai de démarrage d'une image iso-hybrid, vous pouvez
éditer un fichier *{isolinux.cfg}* précisant le timeout dans les unités de
secondes et l'ajouter à #{config/includes.binary/isolinux/}#

Un *{isolinux.cfg}* modifié pour démarrer après cinq secondes ressemblerait
à ceci:

code{

 include menu.cfg
 default vesamenu.c32
 prompt 0
 timeout 50

}code

Une autre façon d'atteindre le même objectif pourrait être écrire un hook et
l'ajouter à #{config/hooks/}# N'oubliez pas d'ajouter le suffixe #{.binary}#
pour l'exécuter dans l’étape binaire. Un exemple proposé:

code{

 #!/bin/sh

 sed -i 's|timeout 0|timeout 50|' binary/isolinux/isolinux.cfg

}code

Également, si vous souhaitez utiliser une splash.png personnalisée, vous
pouvez ajouter une image de 640x480 pixels à
#{config/includes.binary/isolinux/}#

2~ Métadonnées ISO

En créant une image binaire ISO9660, vous pouvez utiliser les options
suivantes pour ajouter différentes métadonnées textuelles pour votre
image. Cela peut vous aider à facilement identifier la version ou la
configuration d'une image sans la démarrer.

_* #{LB_ISO_APPLICATION/--iso-application NAME}#: Cela devrait décrire
l'application qui sera sur l'image. La longueur maximale de ce champ est de
128 caractères.

_* #{LB_ISO_PREPARER/--iso-preparer NAME}#: Cela devrait décrire le
préparateur de l'image, généralement avec certains détails de contact. Le
défaut de cette option est la version de live-build que vous utilisez, ce
qui peut faciliter le débogage plus tard. La longueur maximale de ce champ
est de 128 caractères.

_* #{LB_ISO_PUBLISHER/--iso-publisher NAME}#: Ce doit décrire l'éditeur de
l'image, généralement avec certains détails de contact. La longueur maximale
de ce champ est de 128 caractères.

_* #{LB_ISO_VOLUME/--iso-volume NAME}#: Cela devrait spécifier l'ID de
volume de l'image. Il est utilisé comme une étiquette visible par
l'utilisateur sur certaines plateformes comme Windows et Apple Mac OS. La
longueur maximale de ce champ est de 128 caractères.
