:B~ Personnalisation de l'image binaire

1~customizing-binary Personnalisation de l'image binaire

2~ Chargeur d'amorçage

live-build utilise /{syslinux}/ et certains de ses dérivés (selon le type
d'image) comme chargeurs d'amorçage par défaut. Vous pouvez facilement les
personnaliser de différentes façons qui vont de fournir un thème complet à
seulement modifier quelques fichiers qui vous permettent, par exemple,
changer le délai de démarrage ou tout simplement ajouter une image splash
personnalisée.

Si vous souhaitez utiliser un thème complet, vous pouvez indiquer l'option
#{--syslinux-theme}# (voir man #{lb_config}#). live-build téléchargera le
thème du miroir et l'installera. Vous pouvez également créer votre propre
thème ou en modifier un existant et le télécharger sur votre miroir local.

Imaginez que vous vouliez construire un client Progress Linux, mais que vous
souhaitiez inclure le thème du serveur parce que vous voulez avoir le menu
d'aide. Vous devez lancer #{lb config}# comme suit:

code{

 $ lb config --mode progress-linux --syslinux-theme progress-server

}code

Si vous ne voulez pas créer un .deb, ajoutez simplement vos fichiers de
configuration locaux pour une image par défaut dans
#{config/bootloaders/isolinux}#. Remplacez *{isolinux}* par *{extlinux}*,
*{pxelinux}* ou *{syslinux}* en fonction de votre cas d'utilisation.

Il y a aussi la possibilité de faire de petits changements. Par exemple, les
dérivés de syslinux sont configurés par défaut avec un timeout de 0 (zéro),
ce qui signifie qu'ils se mettront en pause indéfiniment à leur écran de
démarrage jusqu'à ce que vous pressiez une touche.

Pour modifier le délai de démarrage d'une image iso-hybrid, vous pouvez
modifier un fichier *{isolinux.cfg}* en précisant le timeout dans les unités
de secondes et l'ajouter à #{config/includes.binary/isolinux/}#

Un *{isolinux.cfg}* modifié pour démarrer après cinq secondes ressemblerait
à ceci:

code{

 include menu.cfg
 default vesamenu.c32
 prompt 0
 timeout 50

}code

Une autre façon d'atteindre le même objectif pourrait être d'écrire un hook
et l'ajouter à #{config/hooks/}#. N'oubliez pas d'ajouter le suffixe
#{.binary}# pour l'exécuter dans l’étape binaire. Un exemple proposé:

code{

 #!/bin/sh

 sed -i -e 's|timeout 0|timeout 50|' binary/isolinux/isolinux.cfg

}code

De même, si vous souhaitez utiliser une image splash.png personnalisée, vous
pouvez ajouter une image de 640x480 pixels à
#{config/includes.binary/isolinux/}#

2~ Métadonnées ISO

En créant une image binaire ISO9660, vous pouvez utiliser les options
suivantes pour ajouter différentes métadonnées textuelles pour votre
image. Cela peut vous aider à facilement identifier la version ou la
configuration d'une image sans la démarrer.

_* #{LB_ISO_APPLICATION/--iso-application NAME}#: Cela devrait décrire
l'application qui sera sur l'image. Le nombre maximum de caractères pour ce
champ est 128.

_* #{LB_ISO_PREPARER/--iso-preparer NAME}#: Cela devrait décrire le
préparateur de l'image, généralement avec certains détails de contact. Le
défaut de cette option est la version de live-build que vous utilisez, ce
qui peut faciliter le débogage plus tard. Le nombre maximum de caractères
pour ce champ est 128.

_* #{LB_ISO_PUBLISHER/--iso-publisher NAME}#: Ce doit décrire l'éditeur de
l'image, généralement avec certains détails de contact. Le nombre maximum de
caractères pour ce champ est 128.

_* #{LB_ISO_VOLUME/--iso-volume NAME}#: Cela devrait indiquer l'ID de volume
de l'image. Il est utilisé comme une étiquette visible par l'utilisateur sur
certaines plateformes comme Windows et Apple Mac OS. Le nombre maximum de
caractères pour ce champ est 128.
