:B~ Personnalisation des contenus

1~customizing-contents Personnalisation des contenus

Ce chapitre aborde affiner la personnalisation du contenu du système live
delà du simple choix des paquets à inclure. Les includes vous permettent
d'ajouter ou de remplacer des fichiers arbitraires à votre image Debian
Live, les hooks vous permettent d'exécuter des commandes arbitraires à
différentes étapes de la construction et au démarrage, et la
préconfiguration (preseeding) vous permet de configurer les paquets quand
ils sont installés en fournissant des réponses aux questions debconf .

2~ Includes

Bien qu'idéalement un système Debian Live comprendrait les fichiers
entièrement fournis par les paquets Debian non modifiés, on convient parfois
de fournir ou de modifier certains contenus par le biais de fichiers. Avec
les includes, il est possible d'ajouter (ou remplacer) des fichiers
arbitraires à votre image live de Debian. live-build prévoit trois
mécanismes de leur utilisation:

_* Chroot local includes: Ils vous permettent d'ajouter ou remplacer des
fichiers sur le système de fichiers chroot/Live. S'il vous plaît voir
{Live/chroot local includes}#live-chroot-local-includes pour plus
d'informations.

_* Binary local includes: Ils vous permettent d'ajouter ou de remplacer des
fichiers dans l'image binaire. S'il vous plaît voir {Binary local
includes}#binary-local-includes pour plus d'informations.

_* Binary includes: Ils vous permettent d'ajouter ou remplacer des fichiers
spécifiques de Debian dans l'image binaire, comme les modèles et les
répertoires d'outils. S'il vous plaît voir {Binary includes}#binary-includes
pour plus d'informations.

S'il vous plaît voir {Termes}#terms pour plus d'informations sur la
distinction entre les images "Live" et "binaire".

3~live-chroot-local-includes Live/chroot local includes

Chroot local includes peuvent être utilisés pour ajouter ou remplacer des
fichiers dans le système de fichiers chroot/Live afin qu'ils puissent être
utilisés dans le système Live. Une utilisation typique est de peupler le
répertoire du squelette de l'utilisateur (#{/etc/skel}#) utilisé par le
système live pour créer le répertoire home de l'utilisateur Live. Une autre
est de fournir des fichiers de configuration qui peuvent être simplement
ajoutés ou remplacés à l'image sans traitement, voir {Live/chroot local
hooks}#live-chroot-local-hooks si le traitement est nécessaire.

Pour inclure des fichiers, il suffit de les ajouter à votre répertoire
#{config/includes.chroot}#. Ce répertoire correspond au répertoire racine
(#{/}#) du système live. Par exemple, pour ajouter un fichier
#{/var/www/index.html}# dans le système live, utilisez:

code{

 $ mkdir -p config/includes.chroot/var/www
 $ cp /path/to/my/index.html config/includes.chroot/var/www

}code

Votre configuration aura alors le schéma suivant:

code{

 -- config
    [...]
     |-- includes.chroot
     |   `-- var
     |       `-- www
     |           `-- index.html
    [...]
     `-- templates

}code

Chroot local includes sont installés après l'installation de paquets de
sorte que les fichiers installés par les paquets sont écrasés.

3~binary-local-includes Binary local includes

Pour inclure des matériels tels que des documents ou des vidéos sur le
système de fichiers des supports, afin qu'il soit accessible dès l'insertion
du support sans avoir à démarrer le système live, vous pouvez utiliser
binary local includes. Cela fonctionne de façon similaire aux chroot local
includes. Par exemple, supposons que les fichiers #{~/video_demo.*}# sont
des vidéos de démonstration du système live décrit par et lié par une page
d'index HTML. Copiez simplement le matériel dans #{config/includes.binary/}#
comme suit:

code{

 $ cp ~/video_demo.* config/includes.binary/

}code

Ces fichiers apparaissent maintenant dans le répertoire racine du support
live.

3~binary-includes Binary includes

live-build a certains fichiers standard (comme la documentation) qui sera
inclus dans la configuration par défaut sur tous les supports live. Ceci
peut être désactivé avec:

code{

 $ lb config --includes none

}code

Sinon, le matériel sera installé par live-build dans #{/includes/}# par
défaut sur le système de fichiers du support, ou bien vous pouvez spécifier
un autre chemin avec

2~ Hooks

Les hooks permettent à les commandes être exécutées dans les étapes chroot
et binaire de la construction afin de personnaliser l'image. 

3~live-chroot-local-hooks Live/chroot local hooks

To run commands in the chroot stage, create a hook script with a #{.chroot}#
suffix containing the commands in the #{config/hooks/}# directory. The hook
will run in the chroot after the rest of your chroot configuration has been
applied, so remember to ensure your configuration includes all packages and
files your hook needs in order to run. See the example chroot hook scripts
for various common chroot customization tasks provided in
#{/usr/share/live/build/examples/hooks}# which you can copy or symlink to
use them in your own configuration.

3~boot-time-hooks Hooks au moment du démarrage

Pour exécuter des commandes au moment du démarrage, vous pouvez fournir
live-config hooks comme expliqué dans la section "Personnalisation" de sa
page de manuel. Examiner les hooks de live-config fournis dans
#{/lib/live/config/}#, en notant les numéros de séquence. Puis fournir votre
propre hook préfixée avec un numéro de séquence appropriée, soit comme un
chroot local include dans #{config/includes.chroot/lib/live/config/}#, ou
comme un paquet personnalisé tel que discuté dans {Installation des paquets
modifiés ou de tiers}#installing-modified-or-third-party-packages.

3~ Binary local hooks

To run commands in the binary stage, create a hook script with a #{.binary}#
suffix containing the commands in the #{config/hooks/}# directory. The hook
will run after all other binary commands are run, but before
binary_checksums, the very last binary command. The commands in your hook do
not run in the chroot, so take care to not modify any files outside of the
build tree, or you may damage your build system! See the example binary hook
scripts for various common binary customization tasks provided in
#{/usr/share/live/build/examples/hooks}# which you can copy or symlink to
use them in your own configuration.

2~ Préconfigurer questions de debconf

Files in the #{config/preseed/}# directory suffixed with #{.preseed}#
followed by the stage (#{.chroot}# or #{.binary}#) are considered to be
debconf preseed files and are installed by live-build using
#{debconf-set-selections}# during the corresponding stage.

Pour plus d'informations sur debconf, s'il vous plaît voir debconf(7) dans
le paquet #{debconf}#.
