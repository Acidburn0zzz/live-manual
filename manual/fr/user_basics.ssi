:B~ Les bases 

1~the-basics Les bases

This chapter contains a brief overview of the build process and instructions
for using the three most commonly used image types. The most versatile image
type, #{iso-hybrid}#, may be used on a virtual machine, optical media or USB
portable storage device. In certain special cases, as explained later, the
#{hdd}# type may be more suitable. The chapter finishes with instructions
for building and using a #{netboot}# type image, which is a bit more
involved due to the setup required on the server. This is an slightly
advanced topic for anyone who is not familiar already with netbooting, but
it is included here because once the setup is done, it is a very convenient
way to test and deploy images for booting on the local network without the
hassle of dealing with image media.

Throughout the chapter, we will often refer to the default filenames
produced by live-build. If you are {downloading a prebuilt
image}#downloading-prebuilt-images instead, the actual filenames may vary.

2~what-is-live Qu'est ce qu'un système live?

Un système live signifie généralement un système d'exploitation démarré sur
un ordinateur à partir d'un support amovible, tel qu'un CD-ROM, une clé USB
ou sur un réseau, prêt à l'emploi sans aucune installation sur le disque
habituel, avec auto-configuration fait lors de l'exécution (voir
{Termes}#terms).

Avec Debian Live, c'est un système Debian GNU/Linux, construit pour une des
architectures supportées (actuellement amd64 et i386). Il est fait à partir
des éléments suivants:

_* *{Image du noyau Linux}*, d'habitude appelé #{vmlinuz*}#

_* *{Image du RAM-disque initial (initrd)}*: Un disque virtuel RAM configuré
pour le démarrage de Linux, contenant possiblement des modules nécessaires
pour monter l'image du système et certains scripts pour le faire.

_* *{Image du système}*: L'image du système de fichiers du système
d'exploitation. Habituellement, un système de fichiers SquashFS comprimé est
utilisé pour réduire au minimum la taille de l'image Debian Live. Notez
qu'il est en lecture seulement. Ainsi, lors du démarrage du système Debian
Live nous allons utiliser un disque RAM et un mécanisme  "union" pour
permettre l'écriture de fichiers dans le système en marche. Cependant,
toutes les modifications seront perdues lors de l'arrêt à moins que l'option
«persistance» soit utilisée (voir {Persistance}#persistence).

_* *{Chargeur d'amorçage}*: Un petit morceau de code conçu pour démarrer à
partir du support choisi, il peut présenter un menu rapide ou permettre la
sélection des options/configurations. Il charge le noyau Linux et son initrd
pour fonctionner avec un système de fichiers associé. Différentes solutions
peuvent être utilisées, selon le support de destination et le format du
système de fichiers contenant les composants mentionnés précédemment:
isolinux pour démarrer à partir d'un CD ou DVD au format ISO9660, syslinux
pour démarrer un disque dur ou une clé USB à partir d'une partition VFAT,
extlinux pour partitions ext2/3/4 et btrfs, pxelinux pour netboot PXE, GRUB
pour partitions ext2/3/4, etc.

Vous pouvez utiliser live-build pour construire l'image du système à partir
de vos spécifications, configurer un noyau Linux, son initrd, et un chargeur
d'amorçage pour les exécuter, tout dans un format en fonction du support
(image ISO9660, image disque, etc.)

2~downloading-prebuilt-images Downloading prebuilt images

While the focus of this manual is developing and building your own live
images, you may simply wish to try one of our prebuilt images, either as an
introduction to their use or instead of building your own. These images are
built using our {live-images git repository}#clone-configuration-via-git and
official stable releases are published at http://www.debian.org/CD/live/. In
addition, older and upcoming releases, and unofficial images containing
non-free firmware and drivers are available at
http://live.debian.net/cdimage/release/.

2~using-web-builder Using the web live image builder

As a service to the community, we run a web-based live image builder service
at http://live-build.debian.net/. This site is maintained on a best effort
basis. That is, although we strive to keep it up-to-date and operational at
all times, and do issue notices for significant operational outages, we
cannot guarantee 100% availability or fast image building, and the service
may occasionally have issues that take some time to resolve. If you have
problems or questions about the service, please {contact us}#contact,
providing us with the link to your build.

3~ Web builder usage and caveats

The web interface currently makes no provision to prevent the use of invalid
combinations of options, and in particular, where changing an option would
normally (i.e. using live-build directly) change defaults of other options
listed in the web form, the web builder does not change these defaults. Most
notably, if you change #{--architectures}# from the default #{i386}# to
#{amd64}#, you must change the corresponding option #{--linux-flavours}#
from the default #{486}# to #{amd64}#. See the #{lb_config}# man page for
the version of live-build installed on the web builder for more details. The
version number of live-build is listed at the bottom of the web builder
page.

The time estimate given by the web builder is a crude estimate only and may
not reflect how long your build actually takes. Nor is the estimate updated
once it is displayed. Please be patient. Do not refresh the page you land on
after submitting the build, as this will resubmit a new build with the same
parameters. You should {contact us}#contact if you don't receive
notification of your build only once you are certain you've waited long
enough and verified the notification e-mail did not get caught by your own
e-mail spam filter.

The web builder is limited in the kinds of images it can build. This keeps
it simple and efficient to use and maintain. If you would like to make
customizations that are not provided for by the web interface, the rest of
this manual explains how to build your own images using live-build.

2~building-iso-hybrid Premières étapes: la construction d'une image ISO
hybride

Quel que soit le type d'image, vous devrez effectuer les mêmes étapes de
base pour créer une image chaque fois. Comme premier exemple, créer un
répertoire de travail, passer à ce répertoire et exécuter la séquence
suivante de commandes live-build pour créer une image ISO hybride de base
contenant tout le système Debian par défaut sans X.org. Elle est appropriée
pour être gravée sur CD ou DVD, et également peut être copiée sur une clé
USB.

Le nom du répertoire de travail dépend absolument à vous, mais si vous jetez
un oeil aux exemples utilisés dans live-manual, c'est une bonne idée
d'utiliser un nom qui vous aide à identifier l'image avec laquelle vous
travaillez dans chaque répertoire, surtout si vous travaillez ou
expérimentez avec différents types d'images. Dans ce cas, vous allez
construire un système par défaut, nous allons donc l'appeler, par exemple,
live-default.

code{

 $ mkdir live-default && cd live-default

}code

Alors, exécutez la commande #{lb config}#. Cela va créer une hiérarchie
"config/" dans le répertoire courant pour être utilisée par d'autres
commandes:

code{

 $ lb config

}code

Aucun paramètre n'est passé à #{lb config}#, donc les défauts seront
utilisés pour l'ensemble de ses diverses options. Voir {La commande lb
config}#lb-config pour plus de détails.

Maintenant que la hiérarchie "config/" existe, créez l'image avec la
commande #{lb build}# :

code{

 # lb build

}code

This process can take a while, depending on the speed of your computer and
your network connection. When it is complete, there should be a
#{binary.hybrid.iso}# image file, ready to use, in the current directory.

2~using-iso-hybrid Utilisation d'une image ISO hybride live

Après la construction ou le téléchargement d'une image ISO hybride, qui peut
être obtenue sur http://www.debian.org/CD/live/, l'étape suivante est
d'habitude préparer votre support pour le démarrage, soit sur CD-R(W) ou
DVD-R(W), des supports optiques ou une clé USB.

3~burning-iso-image Graver une image ISO sur un support physique

Burning an ISO image is easy. Just install /{xorriso}/ and use it from the
command-line to burn the image. For instance:

code{

 # apt-get install xorriso

 $ xorriso -as cdrecord -v dev=/dev/sr0 blank=as_needed binary.hybrid.iso

}code

3~copying-iso-hybrid-to-usb Copie d'une image ISO hybride sur une clé USB

Les images ISO préparées avec #{xorriso}#, peuvent être simplement copiées
sur une clé USB avec #{dd}# ou un logiciel équivalent. Brancher une clé USB
avec une capacité suffisamment grande pour votre fichier image et déterminez
quel dispositif elle est, que nous appellons ci-dessous
#{${USBSTICK}}#. C'est le fichier de périphérique de votre clé, tel que
#{/dev/sdb}#, pas une partition, tel que #{/dev/sdb1}#! Vous pouvez trouver
le nom du périphérique en regardant la sortie de #{dmesg}# après avoir
branché le dispositif, ou mieux encore, #{ls -l /dev/disk/by-id}#.

Une fois que vous êtes sûr d'avoir le nom correct de l'appareil, utilisez la
commande #{dd}# pour copier l'image sur la clé. *{Ceci écrasera tout fichier
déjà existant sur votre clé!}*

code{

 $ dd if=binary.hybrid.iso of=${USBSTICK}

}code

3~using-usb-extra-space Utilisation de l'espace disponible sur une clé USB

Pour utiliser l'espace libre restant après avoir copié #{binary.hybrid.iso}#
sur une clé USB, utilisez un outil de partitionnement tel que /{gparted}/ ou
/{parted}/ afin de créer une nouvelle partition sur la clé. La première
partition sera utilisée par le système Debian Live.

code{

 # gparted ${USBSTICK}

}code

Après la partition est créée, où #{${PARTITION}}# est le nom de la
partition, tel que #{/dev/sdb2}#, vous devez créer un système de fichiers
sur elle. Un choix possible serait ext4.

code{

 # mkfs.ext4 ${PARTITION}

}code

*{Remarque:}* Si vous voulez utiliser l'espace supplémentaire avec Windows, apparemment cet système d’exploitation ne peut pas normalement accéder à n'importe quelle partition, mais la première. Certaines solutions à ce problème ont été discutées sur notre {liste de diffusion}#contact, mais il semble qu'il n'y a pas de réponses faciles.

*{Rappelez-vous: Chaque fois que vous installez une nouvelle binary.hybrid.iso sur la clé, toutes les données sur la clé seront perdues parce que la table de partition est écrasée par le contenu de l'image, vous devez sauvegarder votre partition supplémentaire d'abord la restaurer à nouveau après la mise à jour de l'image live.}*

3~booting-live-media Démarrer le support live

La première fois que vous démarrez votre support live, qu'il s'agisse de CD,
DVD, clé USB, ou du démarrage par PXE, une certaine configuration dans le
BIOS de votre ordinateur peut être d'abord nécessaire. Puisque les BIOS
varient grandement en fonctionnalités et raccourcis clavier, on ne peut pas
pénétrer dans le sujet en profondeur ici. Certains BIOS fournissent une
touche pour ouvrir un menu d'amorçage au démarrage, qui est le moyen le plus
facile si elle est disponible sur votre système. Sinon, vous avez besoin
d'entrer dans le menu de configuration du BIOS et modifier l'ordre de
démarrage pour placer le dispositif de démarrage pour le système live devant
votre périphérique de démarrage normal.

Une fois que vous avez démarré le support, vous êtes présenté avec un menu
de démarrage. Si vous appuyez simplement sur enter ici, le système va
démarrer en utilisant l'entrée par défaut, #{Live}#. Pour plus
d'informations sur les options de démarrage, consultez l'entrée «Help» dans
le menu et aussi les pages de manuel de live-boot et live-config dans le
système live.

Assuming you've selected #{Live}# and booted a default desktop live image,
after the boot messages scroll by, you should be automatically logged into
the #{user}# account and see a desktop, ready to use. If you have booted a
console-only image, such as #{standard}# or #{rescue}# flavour {prebuilt
images}#downloading-prebuilt-images, you should be automatically logged in
on the console to the #{user}# account and see a shell prompt, ready to use.

2~using-virtual-machine Utiliser une machine virtuelle pour les tests

Il peut être un gain de temps important pour le développement des images
live les faire fonctionner dans une machine virtuelle (VM). Ce n'est pas
sans ses avertissements:

_* L'exécution d'une VM demande assez de RAM pour le système d’exploitation
client et l'hôte et un CPU avec support matériel pour la virtualisation est
recommandée.

_* Il y a quelques limitations inhérentes à l'exécution sur une VM, par
exemple performance de vidéo médiocre, ou choix limité de matériel émulé.

_* Lors du développement d'un matériel spécifique, il n'existe aucun
substitut pour l'exécution que le matériel lui-même.

_* Parfois il y a des bogues que deviennent visibles uniquement pendant
l'exécution dans une VM. En cas de doute, testez votre image directement sur
le matériel.

À condition que vous pouvez travailler avec ces obstacles, examinez les
logiciels VM disponibles et choisissez celui qui convient à vos besoins.

3~testing-iso-with-qemu Test d'une image ISO avec QEMU

La VM la plus polyvalente de Debian est QEMU. Si votre processeur possède un
support matériel pour la virtualisation, vous pouvez utiliser le paquet
/{qemu-kvm}/; La description du paquet /{qemu-kvm}/ énumère brièvement les
exigences.

Tout d'abord, installez /{qemu-kvm}/ si votre processeur le soutient. Sinon,
installez /{qemu}/, dans ce cas, le nom du programme est #{qemu}# au lieu de
#{kvm}# dans les exemples suivants. Le paquet /{qemu-utils}/ est également
valuable pour créer des images disque virtuels avec #{qemu-img}#.

code{

 # apt-get install qemu-kvm qemu-utils

}code

Démarrer une image ISO est simple:

code{

 $ kvm -cdrom binary.hybrid.iso

}code

Voir les pages de manuel pour plus de détails.

3~testing-iso-with-virtualbox  Test d'une image ISO avec virtualbox

Afin de tester l'ISO avec /{virtualbox}/:

code{

 # apt-get install virtualbox virtualbox-qt virtualbox-dkms

 $ virtualbox

}code

Créer une nouvelle machine virtuelle, modifier les paramètres de stockage
pour utiliser #{binary.hybrid.iso}# comme le périphérique CD/DVD et démarrer
la machine.

*{Remarque:}* Pour les systèmes live contenant X.org que vous voulez essayer avec /{virtualbox}/, vous pouvez inclure le paquet des pilotes VirtualBox X.org, /{virtualbox-guest-dkms}/ et /{virtualbox-guest-x11}, dans votre configuration de live-build. Sinon, la résolution est limitée à 800x600.

code{

 $ echo "virtualbox-guest-dkms virtualbox-guest-x11" >> config/package-lists/my.list.chroot

}code

In order to make the dkms package work, also the kernel headers for the
kernel flavour used in your image need to be installed. Instead of manually
listing the correct /{linux-headers}/ package in above created package list,
the selection of the right package can be done automatically by live-build.

code{

  $ lb config --linux-packages "linux-image linux-header"

}code

2~using-hdd-image Construire et utiliser une image HDD

La construction d'une image HDD est similaire à une ISO hybride à tous les
régards, sauf que vous spécifiez #{-b hdd}# et le nom du fichier résultant
est #{binary.img}# qui ne peut être brûlé sur des supports optiques. Il
convient pour le démarrage à partir de clés USB, disques durs USB, et divers
autres dispositifs de stockage portables. Normalement, une image ISO hybride
peut être utilisée à cette fin au lieu, mais si vous avez un BIOS qui ne
gère pas correctement les images hybrides, vous devez utiliser une image
HDD. 

*{Remarque:}* si vous avez créé une image ISO hybride avec l'exemple précédent, vous devrez nettoyer votre répertoire de travail avec la commande #{lb clean}# (voir {La commande lb clean}#lb-clean):

code{

 # lb clean --binary

}code

Exécutez la commande #{lb config}# comme avant, sauf que cette fois en
spécifiant le type d'image HDD:

code{

 $ lb config -b hdd

}code

Maintenant construire l'image avec la commande #{lb build}#

code{

 # lb build

}code

Quand la création de l'image est finie, un fichier #{binary.img}# doit être
présent dans le répertoire courant.

L'image binaire générée contient une partition VFAT et le chargeur de
démarrage syslinux, prêtes à être écrites directement sur une clé
USB. Encore une fois, comme l'utilisation d'une image HDD est juste comme
l'utilisation d'une image ISO hybride sur USB, suivez les instructions
{Utiliser une image live ISO hybride}#using-iso-hybrid, à l'exception du nom
de fichier #{binary.img}# en lieu de #{binary.hybrid.iso}#.

De même, pour tester une image HDD avec Qemu, installer /{qemu}/ comme
décrit ci-dessus dans {Test d'une image ISO avec
QEMU}#testing-iso-with-qemu. Ensuite, exécutez #{kvm}# ou #{qemu}#, selon la
version que votre système hôte a besoin, précisant #{binary.img}# comme le
premier disque dur.

code{

 $ kvm -hda binary.img

}code

2~building-netboot-image Construction d'une image netboot

La séquence de commandes suivante va créer une image NetBoot de base
contenant le système Debian par défaut sans X.org. Elle peut être démarrée
sur le réseau.

*{Remarque:}* Si vous avez réalisé quelque des exemples précédents, vous aurez besoin de nettoyer votre répertoire de travail avec la commande #{lb clean}#:

code{

 # lb clean

}code

In this specific case, a #{lb clean --binary}# would be not enough to clean
up the necessary stages. The cause for this is that in netboot setups, a
different initramfs configuration needs to be used which live-build performs
automatically when building netboot images. Since the initramfs creation
belongs to the chroot stage, switching to netboot in an existing build
directory means to rebuild the chroot stage too. Therefore, #{lb clean}#
(which will remove the chroot stage, too) needs to be used.

Exécutez la commande comme suit pour configurer votre image pour démarrer
sur le réseau:

code{

 $ lb config -b netboot --net-root-path "/srv/debian-live" --net-root-server "192.168.0.1"

}code

In contrast with the ISO and HDD images, netbooting does not, itself, serve
the filesystem image to the client, so the files must be served via
NFS. Different network filesystems can be chosen through lb config. The
#{--net-root-path}# and #{--net-root-server}# options specify the location
and server, respectively, of the NFS server where the filesytem image will
be located at boot time. Make sure these are set to suitable values for your
network and server.

Maintenant construire l'image avec la commande #{lb build}#

code{

 # lb build

}code

Dans un démarrage réseau, le client exécute un petit morceau de logiciel qui
réside habituellement sur l'EPROM de la carte Ethernet. Ce programme envoie
une requête DHCP pour obtenir une adresse IP et les informations sur ce
qu'il faut faire ensuite. Typiquement, la prochaine étape est obtenir un
chargeur d'amorçage de niveau supérieur via le protocole TFTP. Cela pourrait
être pxelinux, GRUB, ou démarrer directement à un système d'exploitation
comme Linux.

For example, if you unpack the generated #{binary.netboot.tar}# archive in
the #{/srv/debian-live}# directory, you'll find the filesystem image in
#{live/filesystem.squashfs}# and the kernel, initrd and pxelinux bootloader
in #{tftpboot/debian-live/i386}#.

Nous devons maintenant configurer trois services sur le serveur pour activer
le démarrage sur le réseau: le serveur DHCP, serveur TFTP et le serveur NFS.

3~ Serveur DHCP

Nous devons configurer le serveur DHCP de notre réseau pour être sûr de
donner une adresse IP au client du système du démarrage sur le réseau, et
pour annoncer l'emplacement du chargeur d'amorçage PXE.

Voici un exemple source d'inspiration, écrit pour le serveur ISC DHCP
#{isc-dhcp-server}# dans le fichier de configuration
#{/etc/dhcp/dhcpd.conf}#:

code{

 # /etc/dhcp/dhcpd.conf - configuration file for isc-dhcp-server

 ddns-update-style none;

 option domain-name "example.org";
 option domain-name-servers ns1.example.org, ns2.example.org;

 default-lease-time 600;
 max-lease-time 7200;

 log-facility local7;

 subnet 192.168.0.0 netmask 255.255.255.0 {
   range 192.168.0.1 192.168.0.254;
   next-server servername;
   filename "pxelinux.0";
}

}code

3~ Serveur TFTP

Cela sert le noyau et le ramdisk initial pour le système au moment de
l'exécution.

Vous devriez installer le paquet /{tftpd-hpa}/. Il peut servir tous les
fichiers contenus dans un répertoire racine, d'habitude #{/srv/tftp}#. Pour
le laisser servir des fichiers dans #{/srv/debian-live/tftpboot}#, exécuter
comme utilisateur root la commande suivante:

code{

 # dpkg-reconfigure -plow tftpd-hpa

}code

et remplissez le nuveau répertoire du serveur tftp

3~ Serveur NFS

Une fois l'ordinateur hôte a téléchargé et démarré un noyau Linux et chargé
son initrd, il va essayer de monter l'image du système de fichiers live via
un serveur NFS.

Vous devez installer le paquet /{nfs-kernel-server}/.

Ensuite, rendre l'image du système de fichiers disponible via NFS en
ajoutant une ligne comme la suivante #{/etc/exports}#:

code{

 /srv/debian-live *(ro,async,no_root_squash,no_subtree_check)

}code

et indiquer au serveur NFS sur cette exportation avec la commande suivante:

code{

 # exportfs -rv

}code

La configuation de ces trois services peut être un peu dificile. Vous
pourriez avoir besoin de patience pour obtenir que tous travaillent
ensemble. Pour plus d'informations, consultez le wiki syslinux à
http://www.syslinux.org/wiki/index.php/PXELINUX ou la section Debian
Installer Manual's TFTP Net Booting à
http://d-i.alioth.debian.org/manual/en.i386/ch04s05.html. Ils pourraient
aider parce que leurs processus sont très semblables.

3~ Guide pratique pour expérimenter avec une image Netboot

Netboot image creation is made easy with live-build, but testing the images
on physical machines can be really time consuming.

To make our life easier, we can use virtualization.

3~ Qemu

_* Installer /{qemu}/, /{bridge-utils}/, /{sudo}/.

Èditer #{/etc/qemu-ifup}#:

code{

 #!/bin/sh
 sudo -p "Password for $0:" /sbin/ifconfig $1 172.20.0.1
 echo "Executing /etc/qemu-ifup"
 echo "Bringing up $1 for bridged mode..."
 sudo /sbin/ifconfig $1 0.0.0.0 promisc up
 echo "Adding $1 to br0..."
 sudo /usr/sbin/brctl addif br0 $1
 sleep 2

}code

Obtenir, ou construire un #{grub-floppy-netboot}#.

Lancer #{qemu}# avec "#{-net nic,vlan=0 -net tap,vlan=0,ifname=tun0}#"
