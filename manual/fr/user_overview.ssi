:B~ Aperçu des outils

1~overview-of-tools Aperçu des outils

Ce chapitre contient un aperçu des trois principaux outils utilisés dans les
systèmes de construction Debian Live: live-build, live-boot et live-config.

2~live-build live-build

live-build est une collection de scripts pour construire des systèmes Debian
Live. Ces scripts sont aussi appelés "commandes".

L'idée derrière live-build est de constituer un cadre qui utilise un
répertoire de configuration pour automatiser et personnaliser complètement
tous les aspects de la construction d'une image Live.

Plusieurs concepts sont similaires à celles dans les outils de le paquet
Debian debhelper écrit par Joey Hess:

_* Les scripts ont un emplacement central pour la configuration de leur
fonctionnement. Avec debhelper, c'est le sous-répertoire #{debian/}# d'un
arbre de paquets. Par exemple, dh_install cherchera, entre autres, un
fichier appelé #{debian/install}# pour déterminer quels fichiers doivent
exister dans un paquet binaire particulier. De la même manière, live-build
enregistre son configuration entièrement sous un sous-répertoire
#{config/}#.

_* Les scripts sont indépendants - c'est-à-dire, il est toujours sûr
d'exécuter chaque commande.

Contrairement à debhelper, live-build contient un outil pour générer un
répertoire de configuration de squelette, #{lb config}#. Cela pourrait être
considéré comme similaire à des outils tels que #{dh-make}#.  Pour plus
d'informations à propos de #{lb config}#, s'il vous plaît voir {La commande
lb config}#lb-config.

Le reste de cette section examine les trois commandes les plus importantes:

_* *{lb config}*: Responsable de l'initialisation d'un répertoire de
configuration du système Live. Voir {La commande lb config }#lb-config pour
plus d'informations.

_* *{lb build}*: Responsable de démarrer un système de construction
Live. Voir {La commande lb build}#lb-build pour plus d'informations.

_* *{lb clean}*: Responsable pour enlever des parties d'un système de
construction Live. Voir {La commande lb clean}#lb-clean pour plus
d'informations.

3~lb-config La commande #{lb config}#

Comme indiqué dans {live-build}#live-build, les scripts qui composent
live-build lisent leur configuration avec la commande #{source}# à partir
d'un seul répertoire nommé #{config/}#. Comme la construction de ce
répertoire à la main serait fastidieux et source d'erreurs, la commande #{lb
config}# peut être utilisée pour créer des répertoires de configuration de
squelette.

Issuing #{lb config}# without any arguments creates a #{config/}#
subdirectory which it populates with some default settings, and a skeleton
#{auto/}# subdirectory tree.

code{

 $ lb config
 P: Considering defaults defined in /etc/live/build.conf
 P: Creating config tree

}code

Using #{lb config}# without any arguments would be suitable for users who
need a very basic image, or who intend to later provide a more complete
configuration via #{auto/config}# (see {Managing a
configuration}#managing-a-configuration for details).

Normalement, vous voulez spécifier certaines options. Par exemple, pour
inclure la liste du paquet «gnome» dans votre configuration:

code{

 $ lb config -p gnome

}code

Il est possible de spécifier plusieurs options, telles que:

code{

 $ lb config --binary-images net --hostname live-machine --username live-user ...

}code

Une liste complète des options est disponible dans la page de manuel de
#{lb_config}#.

3~lb-build La commande #{lb build}#

The #{lb build}# command reads in your configuration from the #{config/}#
directory. It then runs the lower level commands needed to build your Live
system.

3~lb-clean La commande #{lb clean}#

Le travail de la commande #{lb clean}# est enlever les différentes parties
d'une construction afin que autres compilations ultérieures puissent
commencer à partir d'un état propre. Par défaut, les stades #{chroot}#,
#{binary}# et #{source}# sont nettoyées, mais la cache est laissé intact. En
outre, les étapes individuelles peuvent être nettoyées. Par exemple, si vous
avez effectué des changements qui affectent uniquement la phase binaire,
utilisez #{lb clean --binary}# avant de construire un nouveau binaire. Voir
la page de manuel de #{lb_clean}# pour une liste complète des options.

2~live-boot Le paquet live-boot

live-boot est une collection de scripts fournissant hooks pour
initramfs-tools, utilisé pour générer un initramfs capable de démarrer des
systèmes live, comme ceux créés par live-build. Cela inclut les ISOs de
Debian Live, netboot tarballs, et les images clé USB.

At boot time it will look for read-only media containing a #{/live/}#
directory where a root filesystem (often a compressed filesystem image like
squashfs) is stored. If found, it will create a writable environment, using
aufs, for Debian like systems to boot from.

Plus d'information sur ramfs initial dans Debian peut être trouvé dans le
Debian Linux Kernel Handbook à  http://kernel-handbook.alioth.debian.org/
dans le chapitre sur initramfs.

2~live-config Le paquet live-config

live-config se compose des scripts qui s'exécutent au démarrage après
live-boot pour configurer le système live automatiquement. Il gère tâches
telles que l'établissement du nom d'hôte, paramètres régionaux et le fuseau
horaire, la création de l'utilisateur live, l'inhibition des cron jobs et
autologin de l'utilisateur live.
