:B~ Aperçu des outils

1~overview-of-tools Aperçu des outils

Ce chapitre contient un aperçu des trois principaux outils utilisés dans les
systèmes de construction Debian Live: live-build, live-boot et live-config.

2~live-build live-build

live-build est une collection de scripts pour construire des systèmes Debian
Live. Ces scripts sont aussi appelés "commandes".

L'idée derrière live-build est de constituer un cadre qui utilise un
répertoire de configuration pour automatiser et personnaliser complètement
tous les aspects de la construction d'une image Live.

Many concepts are similar to those in the /{debhelper}/ Debian package tools
written by Joey Hess:

_* The scripts have a central location for configuring their operation. In
/{debhelper}/, this is the #{debian/}# subdirectory of a package tree. For
example, dh_install will look, amongst others, for a file called
#{debian/install}# to determine which files should exist in a particular
binary package. In much the same way, live-build stores its configuration
entirely under a #{config/}# subdirectory.

_* Les scripts sont indépendants - c'est-à-dire, il est toujours sûr
d'exécuter chaque commande.

Unlike /{debhelper}/, live-build contains a tool to generate a skeleton
configuration directory, #{lb config}#. This could be considered to be
similar to tools such as #{dh-make}#. For more information about #{lb
config}#, please see {The lb config command}#lb-config.

Le reste de cette section examine les trois commandes les plus importantes:

_* *{lb config}*: Responsable de l'initialisation d'un répertoire de
configuration du système Live. Voir {La commande lb config }#lb-config pour
plus d'informations.

_* *{lb build}*: Responsable de démarrer un système de construction
Live. Voir {La commande lb build}#lb-build pour plus d'informations.

_* *{lb clean}*: Responsable pour enlever des parties d'un système de
construction Live. Voir {La commande lb clean}#lb-clean pour plus
d'informations.

3~lb-config La commande #{lb config}#

Comme indiqué dans {live-build}#live-build, les scripts qui composent
live-build lisent leur configuration avec la commande #{source}# à partir
d'un seul répertoire nommé #{config/}#. Comme la construction de ce
répertoire à la main serait fastidieux et source d'erreurs, la commande #{lb
config}# peut être utilisée pour créer des répertoires de configuration de
squelette.

Exécuter #{lb config}# sans aucun argument crée un sous-répertoire
#{config/}# dont il remplit avec certains paramètres, et un sous-répertoire
en squelette #{auto/}#.

code{

 $ lb config
 [2012-03-19 15:17:14] lb_config
 P: Considering defaults defined in /etc/live/build.conf
 P: Creating config tree for a debian system

}code

L'utilisation de #{lb config}# sans aucun argument serait approprié pour les
utilisateurs qui ont besoin d'une image de base, ou qui ont l'intention
d'offrir plus tard, une configuration plus complète via #{auto/config}#
(voir {Gestion d'une configuration}#managing-a-configuration pour plus de
détails).

Normalement, vous voulez spécifier certaines options. Par exemple, pour
inclure la liste du paquet «gnome» dans votre configuration:

code{

 $ lb config -p gnome

}code

Il est possible de spécifier plusieurs options, telles que:

code{

 $ lb config --binary-images net --bootappend-live "hostname=live-machine username=live-user" ...

}code

Une liste complète des options est disponible dans la page de manuel de
#{lb_config}#.

3~lb-build La commande #{lb build}#

La commande #{lb build}# lit dans votre configuration à partir du répertoire
#{config/}#. Elle exécute alors les commandes de niveau inférieur
nécessaires pour construire votre système Live.

3~lb-clean La commande #{lb clean}#

Le travail de la commande #{lb clean}# est enlever les différentes parties
d'une construction afin que autres compilations ultérieures puissent
commencer à partir d'un état propre. Par défaut, les étapes #{chroot}#,
#{binary}# et #{source}# sont nettoyées, mais le cache est laissé intact. En
outre, les étapes individuelles peuvent être nettoyées. Par exemple, si vous
avez effectué des changements qui affectent uniquement la phase binaire,
utilisez #{lb clean --binary}# avant de construire un nouveau binaire. Voir
la page de manuel de #{lb_clean}# pour une liste complète des options.

2~live-boot Le paquet live-boot

live-boot est une collection de scripts fournissant hooks pour
initramfs-tools, utilisé pour générer un initramfs capable de démarrer des
systèmes live, comme ceux créés par live-build. Cela inclut les ISOs de
Debian Live, netboot tarballs, et les images pour clés USB.

Au démarrage il va chercher un support en lecture seule qui contient un
répertoire #{/live/}# où un système de fichiers racine (souvent une image du
système de fichiers compressé comme squashfs) est stocké. S'il est trouvé,
il va créer un environnement accessible en écriture, en utilisant aufs, afin
que systémes similaires à Debian puissent démarrer à partir de ça.

Plus d'information sur ramfs initial dans Debian peut être trouvé dans le
Debian Linux Kernel Handbook à  http://kernel-handbook.alioth.debian.org/
dans le chapitre sur initramfs.

2~live-config Le paquet live-config

live-config se compose des scripts qui s'exécutent au démarrage après
live-boot pour configurer le système live automatiquement. Il gère tâches
telles que l'établissement du nom d'hôte, paramètres régionaux et le fuseau
horaire, la création de l'utilisateur live, l'inhibition des cron jobs et
autologin de l'utilisateur live.
