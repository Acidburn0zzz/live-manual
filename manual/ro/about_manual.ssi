:B~ Despre acest manual

1~about-manual Despre acest manual

Acest manual servește ca punct de acces pentru toată documentația
proiectului Debian Live și se referă în special la programele software
produse pentru distribuția Debian 7.0 "wheezy". Versiunea cea mai recentă a
manualului poate fi găsită la http://live.debian.net/

While live-manual is primarily focused on helping you build a live system
and not on end-user topics, an end-user may find some useful information in
these sections: {The Basics}#the-basics covers preparing images to be booted
from media or the network, and {Customizing run time
behaviours}#customizing-run-time-behaviours describes some options that may
be specified at the boot prompt, such as selecting a keyboard layout and
locale, and using persistence.

Anumite comenzi din text trebuie sa fie executate ca 'super_utilizator',
privilegiu care poate fi obtinut fie prin comanda #{su}#, sau
#{sudo}#. Pentru a distinge intre acesti utilizatori se vor folosi #{$}#
respectiv #{#}# . Aceste simboluri nu fac parte din comenzi.

2~ For the impatient

While we believe that everything in this manual is important to at least
some of our users, we realize it is a lot of material to cover and that you
may wish to experience early success using the software before delving into
the details. Therefore, we suggest reading in the following order.

First, read this chapter, {About this manual}#about-manual, from the
beginning and ending with the {Terms}#terms section. Next, skip to the three
tutorials at the front of the {Examples}#examples section designed to teach
you image building and customization basics. Read {Using the
examples}#using-the-examples first, followed by {Tutorial 1: A standard
image}#tutorial-1, {Tutorial 2: A web browser utility}#tutorial-2 and
finally {Tutorial 3: A personalized image}#tutorial-3. By the end of these
tutorials, you will have a taste of what can be done with Debian Live.

We encourage you to return to more in-depth study of the manual, perhaps
next reading {The basics}#the-basics, skimming or skipping {Building a
netboot image}#building-netboot-image, and finishing by reading the
{Customization overview}#customization-overview and the chapters that follow
it. By this point, we hope you are thoroughly excited by what can be done
with Debian Live and motivated to read the rest of the manual,
cover-to-cover.

2~terms Termeni

_* *{Live system}*: Un sistem de operare care porneste fara a instala pe
discul dur. Un sistem live nu altereaza un sistem de operare local sau
fisiere deja instalate pe discul dur ci doar dace se mentioneaza expres
acest lucru. Sistemele livefolosesc spre pornire medii ca CDs, DVDs sau chei
USB. Unele chiar pot porni prin retaua de net.

_* *{Debian Live}*: The Debian sub-project which maintains, among others,
the live-boot, live-build, live-config, and live-manual packages.

_* *{Debian Live system}*: Un sistem live care foloseste programe din
sitemul de operare Debian, si care poate fi pornit folosind CDs, DVDs, chei
USB, sau reteaua net (via netboot images), sau prin nternet (via boot
parameter #{fetch=URL}#).

_* *{Host system}*: Mediul folosit pentru crearea sistemului live pe un
sistem dat.

_* *{Target system}*: Mediul folosit pentru rularea sistemului live.

_* *{live-boot}*: O coloctie se scripte folosite la pornirea sistemului
live. live-boot a facul parte formal din /{live-initramfs}/.

_* *{live-build}*: O colectie de scripte folosite la particularizatrea
sistemelor Debian Live. live-build a fost cunoscut ca /{live-helper}/, iar
mai inainte ca /{live-package}/.

_* *{live-config}*: O colectie de scripte folosite la configurarea sitemului
live in timpul procesului de pornire. live-config a fost cunoscut ca parte
din /{live-initramfs}/.

_* *{live-manual}*: Acest document face parte din pachetul numit
live-manual.

_* *{Debian Installer (d-i)}*: Sistemul de instalare oficial pentru
distributia Debian.

_* *{Boot parameters}*: Parameti care pot fi adaugati la promptul
bootloader-ului care sa infuenteze kernelul sau live-config.

_* *{chroot}*: Programul /{chroot}/, #{chroot(8)}#, permite rularea a
diferite instante din mediul GNU/Linux pe un singur sistem si in simultan
fara a necesita o repornire a sistemului.

_* *{Binary image}*: Un fisier ce contine sistemul live, ca de exemplu
binary.iso sau binary.img.

_* *{Target distribution}*: Dea pe care se bazeaza sistemul live. Aceasta
distributie poate fi diferita de cea a sistemului gazda.

_* *{stable/testing/unstable}*: The *{stable}* distribution contains the
latest officially released distribution of Debian. The *{testing}*
distribution is the staging area for the next *{stable}* release. A major
advantage of using this distribution is that it has more recent versions of
software relative to the *{stable}* release. The *{unstable}* distribution
is where active development of Debian occurs. Generally, this distribution
is run by developers and those who like to live on the edge. Throughout the
manual, we tend to use codenames for the releases, such as wheezy or sid, as
that is what is supported by the tools themselves.

2~ Autori

Lista autorilor (in ordine alfabetica):

_* Ben Armstrong

_* Brendan Sleight

_* Chris Lamb

_* Daniel Baumann

_* Franklin Piat

_* Jonas Stein

_* Kai Hendry

_* Marco Amadori

_* Mathieu Geli

_* Matthias Kirschner

_* Richard Nelson

_* Trent W. Buck

2~how-to-contribute Cum se poate contribui la acest document

Acest manual este conceput ca un proiect comunitar si astfel orice
propozitie sau inbunatatire sunt bune venite. Principala cale de a face o
contributie este trimeterea unui mail la mailing list. Vedeti
{Contact}#contact pentru mai multe informatii.

In orice contributie trimisa va rog sa precizati in clar cine detine
copyright-ul si sub ce licenta este publicata. A se nota ca o contrinutie
este acceptata daca este licentiata in acceeasi termeni ca si restul
documentului , adica GPL version 3 or later.

Sursele acestui manual sunt gerate folosind Git version control
system. Pute-ti checkout ultima copie prin executarea :

code{

$ git clone git://live.debian.net/git/live-manual.git

}code

Inainte de a trimite contibutia dvs, este de dorit sa efectuati o
previzualizare a lucrarii. Pentru aceasta verifica-ti ca pachetele necesare
pentru 'building' sunt instalate, prin executatea comenzii:

code{

 # apt-get install make po4a sisu-complete libnokogiri-ruby

}code

Pute-ti crea live-manual de la nivelul de sus al directorului Git checkout
al dvs, prin executatea:

code{

 $ make build

}code

Since it takes a while to build the manual in all supported languages, you
may find it convenient when proofing to build for only one language, e.g. by
executing:

code{

 $ make build LANGUAGES=en

}code

It is also possible to build by document type, e.g:

code{

 $ make build FORMATS=pdf

}code

Or combine both, e.g:

code{

 $ make build LANGUAGES=it FORMATS=html

}code

3~ Applying changes

Commiterea in direct este la indemana oricui. Totusi, va rugam sa trimeteti
schimbarile mai mari , spre discutie , la mailing list. Pentru a fi trimise
contibutiile la repository, pasii urmatori sunt necesari:

_* Fetch the public commit key:

code{

 $ mkdir -p ~/.ssh/identity.d
 $ wget http://live.debian.net/other/keys/git@live.debian.net \
     -O ~/.ssh/identity.d/git@live.debian.net
 $ wget http://live.debian.net/other/keys/git@live.debian.net.pub \
     -O ~/.ssh/identity.d/git@live.debian.net.pub
 $ chmod 0600 ~/.ssh/identity.d/git@live.debian.net*

}code

_* Adaugati urmatoarea sectiuna la openssh-client config:

code{

 $ cat >> ~/.ssh/config << EOF
 Host live.debian.net
     Hostname live.debian.net
     User git
     IdentityFile ~/.ssh/identity.d/git@live.debian.net
 EOF

}code

_* Checkout un clon al manualului prin ssh:

code{

 $ git clone git@live.debian.net:/live-manual.git
 $ cd live-manual && git checkout debian-next

}code

_* Note that you should commit any changes on the debian-next branch, not on
the debian branch.

_* Do not use #{make commit}# unless you are updating translations in this
commit, and in that case, do not mix changes to the English manual and
translations in the same commit, but use separate commits for each. See the
{Translation}#translation section for more details.

_* Write commit messages that consist of complete, meaningful sentences in
English, starting with a capital letter and ending with a full
stop. Usually, these will start with the form
'Fixing/Adding/Removing/Correcting/Translating', e.g.

code{

 $ git commit -a -m "Adding a section on applying patches."

}code

_* Primite commit-ul la server:

code{

 $ git push

}code

3~translation Translation

To start a translation for a new language, follow these steps:

_* Translate the *{about_manual.ssi.pot}*, *{about_project.ssi.pot}* and
*{index.html.in.pot}* files to your language with your favourite editor
(such as /{poedit}/). Send the translated #{.po}# files to the mailing list
so that the translation team can check their integrity.

_* To enable a new language in the autobuild it is enough to add the initial
translated files to #{manual/po/${LANGUAGE}/}# and run #{make commit}#. And
then edit #{manual/_sisu/home/index.html}#.

_* Once the new language is added, you can randomly continue translating the
remaining po files in #{manual/po/}#.

_* Don't forget you need #{make commit}# to ensure the translated manuals
are updated from the po files and then you can review your changes launching
#{make build}# before #{git add .}#, #{git commit -a -m "Translating..."}#
and #{git push}#.

*{Note:}* You can use #{make clean}# to clean your git tree before pushing. This step is not compulsory thanks to the .gitignore file but it is a good practice to avoid committing files involuntarily.
